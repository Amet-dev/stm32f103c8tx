
stm32f103c8tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ba4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005cb4  08005cb4  00015cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08005d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a74  20000010  08005d70  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001a84  08005d70  00021a84  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000184c5  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003056  00000000  00000000  000384fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001498  00000000  00000000  0003b558  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001360  00000000  00000000  0003c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b2ad  00000000  00000000  0003dd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006df8  00000000  00000000  00048ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004fdf5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00005654  00000000  00000000  0004fe74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c9c 	.word	0x08005c9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005c9c 	.word	0x08005c9c

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fbd6 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f82a 	bl	80001b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f96e 	bl	800043c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000160:	f000 f8c0 	bl	80002e4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f940 	bl	80003e8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000168:	f000 f87e 	bl	8000268 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800016c:	f003 f8a0 	bl	80032b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000170:	4a09      	ldr	r2, [pc, #36]	; (8000198 <main+0x48>)
 8000172:	2100      	movs	r1, #0
 8000174:	4809      	ldr	r0, [pc, #36]	; (800019c <main+0x4c>)
 8000176:	f003 f901 	bl	800337c <osThreadNew>
 800017a:	4602      	mov	r2, r0
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <main+0x50>)
 800017e:	601a      	str	r2, [r3, #0]

  /* creation of myTaskGpio */
  myTaskGpioHandle = osThreadNew(StartTask02, NULL, &myTaskGpio_attributes);
 8000180:	4a08      	ldr	r2, [pc, #32]	; (80001a4 <main+0x54>)
 8000182:	2100      	movs	r1, #0
 8000184:	4808      	ldr	r0, [pc, #32]	; (80001a8 <main+0x58>)
 8000186:	f003 f8f9 	bl	800337c <osThreadNew>
 800018a:	4602      	mov	r2, r0
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <main+0x5c>)
 800018e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000190:	f003 f8c0 	bl	8003314 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000194:	e7fe      	b.n	8000194 <main+0x44>
 8000196:	bf00      	nop
 8000198:	08005cf8 	.word	0x08005cf8
 800019c:	08000579 	.word	0x08000579
 80001a0:	20001934 	.word	0x20001934
 80001a4:	08005d1c 	.word	0x08005d1c
 80001a8:	08000589 	.word	0x08000589
 80001ac:	200019f4 	.word	0x200019f4

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b094      	sub	sp, #80	; 0x50
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ba:	2228      	movs	r2, #40	; 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f005 fd63 	bl	8005c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	f107 0314 	add.w	r3, r7, #20
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
 80001d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e0:	2301      	movs	r3, #1
 80001e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f2:	2302      	movs	r3, #2
 80001f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000200:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000206:	4618      	mov	r0, r3
 8000208:	f001 f8c6 	bl	8001398 <HAL_RCC_OscConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000212:	f000 f9d0 	bl	80005b6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000216:	230f      	movs	r3, #15
 8000218:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000226:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f001 fb30 	bl	8001898 <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800023e:	f000 f9ba 	bl	80005b6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000242:	2302      	movs	r3, #2
 8000244:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800024a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fcee 	bl	8001c30 <HAL_RCCEx_PeriphCLKConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800025a:	f000 f9ac 	bl	80005b6 <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3750      	adds	r7, #80	; 0x50
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <MX_ADC1_Init+0x74>)
 800027a:	4a19      	ldr	r2, [pc, #100]	; (80002e0 <MX_ADC1_Init+0x78>)
 800027c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <MX_ADC1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <MX_ADC1_Init+0x74>)
 8000286:	2200      	movs	r2, #0
 8000288:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800028a:	4b14      	ldr	r3, [pc, #80]	; (80002dc <MX_ADC1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <MX_ADC1_Init+0x74>)
 8000292:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000296:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000298:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_ADC1_Init+0x74>)
 800029a:	2200      	movs	r2, #0
 800029c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_ADC1_Init+0x74>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <MX_ADC1_Init+0x74>)
 80002a6:	f000 fb5f 	bl	8000968 <HAL_ADC_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002b0:	f000 f981 	bl	80005b6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002b8:	2301      	movs	r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4619      	mov	r1, r3
 80002c4:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_ADC1_Init+0x74>)
 80002c6:	f000 fc27 	bl	8000b18 <HAL_ADC_ConfigChannel>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002d0:	f000 f971 	bl	80005b6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20001980 	.word	0x20001980
 80002e0:	40012400 	.word	0x40012400

080002e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08e      	sub	sp, #56	; 0x38
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f8:	f107 0320 	add.w	r3, r7, #32
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
 8000310:	615a      	str	r2, [r3, #20]
 8000312:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000314:	4b32      	ldr	r3, [pc, #200]	; (80003e0 <MX_TIM4_Init+0xfc>)
 8000316:	4a33      	ldr	r2, [pc, #204]	; (80003e4 <MX_TIM4_Init+0x100>)
 8000318:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800031a:	4b31      	ldr	r3, [pc, #196]	; (80003e0 <MX_TIM4_Init+0xfc>)
 800031c:	2200      	movs	r2, #0
 800031e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000320:	4b2f      	ldr	r3, [pc, #188]	; (80003e0 <MX_TIM4_Init+0xfc>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000326:	4b2e      	ldr	r3, [pc, #184]	; (80003e0 <MX_TIM4_Init+0xfc>)
 8000328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800032c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032e:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <MX_TIM4_Init+0xfc>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000334:	4b2a      	ldr	r3, [pc, #168]	; (80003e0 <MX_TIM4_Init+0xfc>)
 8000336:	2200      	movs	r2, #0
 8000338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800033a:	4829      	ldr	r0, [pc, #164]	; (80003e0 <MX_TIM4_Init+0xfc>)
 800033c:	f001 fd2e 	bl	8001d9c <HAL_TIM_Base_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000346:	f000 f936 	bl	80005b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800034a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800034e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000354:	4619      	mov	r1, r3
 8000356:	4822      	ldr	r0, [pc, #136]	; (80003e0 <MX_TIM4_Init+0xfc>)
 8000358:	f001 ffe0 	bl	800231c <HAL_TIM_ConfigClockSource>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000362:	f000 f928 	bl	80005b6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000366:	481e      	ldr	r0, [pc, #120]	; (80003e0 <MX_TIM4_Init+0xfc>)
 8000368:	f001 fdba 	bl	8001ee0 <HAL_TIM_PWM_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000372:	f000 f920 	bl	80005b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000376:	2300      	movs	r3, #0
 8000378:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800037a:	2300      	movs	r3, #0
 800037c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800037e:	f107 0320 	add.w	r3, r7, #32
 8000382:	4619      	mov	r1, r3
 8000384:	4816      	ldr	r0, [pc, #88]	; (80003e0 <MX_TIM4_Init+0xfc>)
 8000386:	f002 fb25 	bl	80029d4 <HAL_TIMEx_MasterConfigSynchronization>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000390:	f000 f911 	bl	80005b6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000394:	2360      	movs	r3, #96	; 0x60
 8000396:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003a0:	2300      	movs	r3, #0
 80003a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2204      	movs	r2, #4
 80003a8:	4619      	mov	r1, r3
 80003aa:	480d      	ldr	r0, [pc, #52]	; (80003e0 <MX_TIM4_Init+0xfc>)
 80003ac:	f001 fef8 	bl	80021a0 <HAL_TIM_PWM_ConfigChannel>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80003b6:	f000 f8fe 	bl	80005b6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2208      	movs	r2, #8
 80003be:	4619      	mov	r1, r3
 80003c0:	4807      	ldr	r0, [pc, #28]	; (80003e0 <MX_TIM4_Init+0xfc>)
 80003c2:	f001 feed 	bl	80021a0 <HAL_TIM_PWM_ConfigChannel>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80003cc:	f000 f8f3 	bl	80005b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <MX_TIM4_Init+0xfc>)
 80003d2:	f000 f987 	bl	80006e4 <HAL_TIM_MspPostInit>

}
 80003d6:	bf00      	nop
 80003d8:	3738      	adds	r7, #56	; 0x38
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20001938 	.word	0x20001938
 80003e4:	40000800 	.word	0x40000800

080003e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 80003ee:	4a12      	ldr	r2, [pc, #72]	; (8000438 <MX_USART1_UART_Init+0x50>)
 80003f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 80003f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 800040e:	220c      	movs	r2, #12
 8000410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 800041a:	2200      	movs	r2, #0
 800041c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800041e:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 8000420:	f002 fb48 	bl	8002ab4 <HAL_UART_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800042a:	f000 f8c4 	bl	80005b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200019b0 	.word	0x200019b0
 8000438:	40013800 	.word	0x40013800

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000450:	4a45      	ldr	r2, [pc, #276]	; (8000568 <MX_GPIO_Init+0x12c>)
 8000452:	4b45      	ldr	r3, [pc, #276]	; (8000568 <MX_GPIO_Init+0x12c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f043 0310 	orr.w	r3, r3, #16
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b42      	ldr	r3, [pc, #264]	; (8000568 <MX_GPIO_Init+0x12c>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0310 	and.w	r3, r3, #16
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000468:	4a3f      	ldr	r2, [pc, #252]	; (8000568 <MX_GPIO_Init+0x12c>)
 800046a:	4b3f      	ldr	r3, [pc, #252]	; (8000568 <MX_GPIO_Init+0x12c>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	f043 0320 	orr.w	r3, r3, #32
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b3c      	ldr	r3, [pc, #240]	; (8000568 <MX_GPIO_Init+0x12c>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0320 	and.w	r3, r3, #32
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000480:	4a39      	ldr	r2, [pc, #228]	; (8000568 <MX_GPIO_Init+0x12c>)
 8000482:	4b39      	ldr	r3, [pc, #228]	; (8000568 <MX_GPIO_Init+0x12c>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f043 0304 	orr.w	r3, r3, #4
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b36      	ldr	r3, [pc, #216]	; (8000568 <MX_GPIO_Init+0x12c>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0304 	and.w	r3, r3, #4
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000498:	4a33      	ldr	r2, [pc, #204]	; (8000568 <MX_GPIO_Init+0x12c>)
 800049a:	4b33      	ldr	r3, [pc, #204]	; (8000568 <MX_GPIO_Init+0x12c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f043 0308 	orr.w	r3, r3, #8
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b30      	ldr	r3, [pc, #192]	; (8000568 <MX_GPIO_Init+0x12c>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0308 	and.w	r3, r3, #8
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b6:	482d      	ldr	r0, [pc, #180]	; (800056c <MX_GPIO_Init+0x130>)
 80004b8:	f000 ff56 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO7_GPIO_Port, DO7_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004c2:	482b      	ldr	r0, [pc, #172]	; (8000570 <MX_GPIO_Init+0x134>)
 80004c4:	f000 ff50 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2108      	movs	r1, #8
 80004cc:	4829      	ldr	r0, [pc, #164]	; (8000574 <MX_GPIO_Init+0x138>)
 80004ce:	f000 ff4b 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	2301      	movs	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e0:	2302      	movs	r3, #2
 80004e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4820      	ldr	r0, [pc, #128]	; (800056c <MX_GPIO_Init+0x130>)
 80004ec:	f000 fde2 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI5_Pin DI6_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 80004f0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80004f4:	613b      	str	r3, [r7, #16]
                          |DI5_Pin|DI6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	481b      	ldr	r0, [pc, #108]	; (8000574 <MX_GPIO_Init+0x138>)
 8000506:	f000 fdd5 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DI7_Pin */
  GPIO_InitStruct.Pin = DI7_Pin;
 800050a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DI7_GPIO_Port, &GPIO_InitStruct);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	4814      	ldr	r0, [pc, #80]	; (8000570 <MX_GPIO_Init+0x134>)
 8000520:	f000 fdc8 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DO7_Pin */
  GPIO_InitStruct.Pin = DO7_Pin;
 8000524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	2301      	movs	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	2302      	movs	r3, #2
 8000534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DO7_GPIO_Port, &GPIO_InitStruct);
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	4619      	mov	r1, r3
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <MX_GPIO_Init+0x134>)
 800053e:	f000 fdb9 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DO1_Pin */
  GPIO_InitStruct.Pin = DO1_Pin;
 8000542:	2308      	movs	r3, #8
 8000544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	2301      	movs	r3, #1
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2302      	movs	r3, #2
 8000550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DO1_GPIO_Port, &GPIO_InitStruct);
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	4619      	mov	r1, r3
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <MX_GPIO_Init+0x138>)
 800055a:	f000 fdab 	bl	80010b4 <HAL_GPIO_Init>

}
 800055e:	bf00      	nop
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	40011000 	.word	0x40011000
 8000570:	40010800 	.word	0x40010800
 8000574:	40010c00 	.word	0x40010c00

08000578 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f002 ffa5 	bl	80034d0 <osDelay>
 8000586:	e7fb      	b.n	8000580 <StartDefaultTask+0x8>

08000588 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f002 ff9d 	bl	80034d0 <osDelay>
 8000596:	e7fb      	b.n	8000590 <StartTask02+0x8>

08000598 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005a8:	d101      	bne.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005aa:	f000 f9c1 	bl	8000930 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ba:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005bc:	e7fe      	b.n	80005bc <Error_Handler+0x6>
	...

080005c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005c6:	4a18      	ldr	r2, [pc, #96]	; (8000628 <HAL_MspInit+0x68>)
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <HAL_MspInit+0x68>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_MspInit+0x68>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <HAL_MspInit+0x68>)
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <HAL_MspInit+0x68>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_MspInit+0x68>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	210f      	movs	r1, #15
 80005fa:	f06f 0001 	mvn.w	r0, #1
 80005fe:	f000 fc78 	bl	8000ef2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_MspInit+0x6c>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <HAL_MspInit+0x6c>)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	40010000 	.word	0x40010000

08000630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a14      	ldr	r2, [pc, #80]	; (800069c <HAL_ADC_MspInit+0x6c>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d121      	bne.n	8000694 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000650:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <HAL_ADC_MspInit+0x70>)
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <HAL_ADC_MspInit+0x70>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <HAL_ADC_MspInit+0x70>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <HAL_ADC_MspInit+0x70>)
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <HAL_ADC_MspInit+0x70>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f043 0304 	orr.w	r3, r3, #4
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_ADC_MspInit+0x70>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = AI1_Pin|AI2_Pin|AI3_Pin|AI4_Pin
 8000680:	231f      	movs	r3, #31
 8000682:	613b      	str	r3, [r7, #16]
                          |AI5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000684:	2303      	movs	r3, #3
 8000686:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4619      	mov	r1, r3
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <HAL_ADC_MspInit+0x74>)
 8000690:	f000 fd10 	bl	80010b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40012400 	.word	0x40012400
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010800 	.word	0x40010800

080006a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <HAL_TIM_Base_MspInit+0x34>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d10b      	bne.n	80006d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80006ba:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <HAL_TIM_Base_MspInit+0x38>)
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <HAL_TIM_Base_MspInit+0x38>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_TIM_Base_MspInit+0x38>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40000800 	.word	0x40000800
 80006e0:	40021000 	.word	0x40021000

080006e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a10      	ldr	r2, [pc, #64]	; (8000740 <HAL_TIM_MspPostInit+0x5c>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d118      	bne.n	8000736 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <HAL_TIM_MspPostInit+0x60>)
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_TIM_MspPostInit+0x60>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f043 0308 	orr.w	r3, r3, #8
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <HAL_TIM_MspPostInit+0x60>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0308 	and.w	r3, r3, #8
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = TIM4_DO4_Pin|TIM4_DO5_Pin;
 800071c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000720:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2302      	movs	r3, #2
 8000728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <HAL_TIM_MspPostInit+0x64>)
 8000732:	f000 fcbf 	bl	80010b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40000800 	.word	0x40000800
 8000744:	40021000 	.word	0x40021000
 8000748:	40010c00 	.word	0x40010c00

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <HAL_UART_MspInit+0x9c>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d139      	bne.n	80007e0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800076c:	4a1f      	ldr	r2, [pc, #124]	; (80007ec <HAL_UART_MspInit+0xa0>)
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <HAL_UART_MspInit+0xa0>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <HAL_UART_MspInit+0xa0>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4a19      	ldr	r2, [pc, #100]	; (80007ec <HAL_UART_MspInit+0xa0>)
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_UART_MspInit+0xa0>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <HAL_UART_MspInit+0xa0>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800079c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	4619      	mov	r1, r3
 80007b0:	480f      	ldr	r0, [pc, #60]	; (80007f0 <HAL_UART_MspInit+0xa4>)
 80007b2:	f000 fc7f 	bl	80010b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <HAL_UART_MspInit+0xa4>)
 80007cc:	f000 fc72 	bl	80010b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2105      	movs	r1, #5
 80007d4:	2025      	movs	r0, #37	; 0x25
 80007d6:	f000 fb8c 	bl	8000ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007da:	2025      	movs	r0, #37	; 0x25
 80007dc:	f000 fba5 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40013800 	.word	0x40013800
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40010800 	.word	0x40010800

080007f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	201c      	movs	r0, #28
 800080a:	f000 fb72 	bl	8000ef2 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800080e:	201c      	movs	r0, #28
 8000810:	f000 fb8b 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000814:	4a20      	ldr	r2, [pc, #128]	; (8000898 <HAL_InitTick+0xa4>)
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <HAL_InitTick+0xa4>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	61d3      	str	r3, [r2, #28]
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <HAL_InitTick+0xa4>)
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800082c:	f107 0210 	add.w	r2, r7, #16
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f001 f9ac 	bl	8001b94 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800083c:	f001 f982 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8000840:	4603      	mov	r3, r0
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000848:	4a14      	ldr	r2, [pc, #80]	; (800089c <HAL_InitTick+0xa8>)
 800084a:	fba2 2303 	umull	r2, r3, r2, r3
 800084e:	0c9b      	lsrs	r3, r3, #18
 8000850:	3b01      	subs	r3, #1
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_InitTick+0xac>)
 8000856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800085a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <HAL_InitTick+0xac>)
 800085e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000862:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_InitTick+0xac>)
 8000866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000868:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_InitTick+0xac>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_InitTick+0xac>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000876:	480a      	ldr	r0, [pc, #40]	; (80008a0 <HAL_InitTick+0xac>)
 8000878:	f001 fa90 	bl	8001d9c <HAL_TIM_Base_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d104      	bne.n	800088c <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <HAL_InitTick+0xac>)
 8000884:	f001 fada 	bl	8001e3c <HAL_TIM_Base_Start_IT>
 8000888:	4603      	mov	r3, r0
 800088a:	e000      	b.n	800088e <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
}
 800088e:	4618      	mov	r0, r3
 8000890:	3730      	adds	r7, #48	; 0x30
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000
 800089c:	431bde83 	.word	0x431bde83
 80008a0:	200019f8 	.word	0x200019f8

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
	...

080008d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <TIM2_IRQHandler+0x10>)
 80008d6:	f001 fb5b 	bl	8001f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200019f8 	.word	0x200019f8

080008e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <USART1_IRQHandler+0x10>)
 80008ea:	f002 f931 	bl	8002b50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200019b0 	.word	0x200019b0

080008f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000908:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_Init+0x28>)
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_Init+0x28>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f043 0310 	orr.w	r3, r3, #16
 8000912:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000914:	2003      	movs	r0, #3
 8000916:	f000 fae1 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff ff6a 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f7ff fe4e 	bl	80005c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40022000 	.word	0x40022000

08000930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x1c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_IncTick+0x20>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a03      	ldr	r2, [pc, #12]	; (8000950 <HAL_IncTick+0x20>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	20000008 	.word	0x20000008
 8000950:	20001a40 	.word	0x20001a40

08000954 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return uwTick;
 8000958:	4b02      	ldr	r3, [pc, #8]	; (8000964 <HAL_GetTick+0x10>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	20001a40 	.word	0x20001a40

08000968 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000970:	2300      	movs	r3, #0
 8000972:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d101      	bne.n	800098a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e0be      	b.n	8000b08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000994:	2b00      	cmp	r3, #0
 8000996:	d109      	bne.n	80009ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff fe42 	bl	8000630 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f9ab 	bl	8000d08 <ADC_ConversionStop_Disable>
 80009b2:	4603      	mov	r3, r0
 80009b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f040 8099 	bne.w	8000af6 <HAL_ADC_Init+0x18e>
 80009c4:	7dfb      	ldrb	r3, [r7, #23]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f040 8095 	bne.w	8000af6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009d4:	f023 0302 	bic.w	r3, r3, #2
 80009d8:	f043 0202 	orr.w	r2, r3, #2
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	7b1b      	ldrb	r3, [r3, #12]
 80009ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a00:	d003      	beq.n	8000a0a <HAL_ADC_Init+0xa2>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d102      	bne.n	8000a10 <HAL_ADC_Init+0xa8>
 8000a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a0e:	e000      	b.n	8000a12 <HAL_ADC_Init+0xaa>
 8000a10:	2300      	movs	r3, #0
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	7d1b      	ldrb	r3, [r3, #20]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d119      	bne.n	8000a54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	7b1b      	ldrb	r3, [r3, #12]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d109      	bne.n	8000a3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	035a      	lsls	r2, r3, #13
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	e00b      	b.n	8000a54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a40:	f043 0220 	orr.w	r2, r3, #32
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4c:	f043 0201 	orr.w	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	6812      	ldr	r2, [r2, #0]
 8000a5c:	6852      	ldr	r2, [r2, #4]
 8000a5e:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	430a      	orrs	r2, r1
 8000a66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6899      	ldr	r1, [r3, #8]
 8000a72:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <HAL_ADC_Init+0x1a8>)
 8000a74:	400b      	ands	r3, r1
 8000a76:	68b9      	ldr	r1, [r7, #8]
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a84:	d003      	beq.n	8000a8e <HAL_ADC_Init+0x126>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d104      	bne.n	8000a98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	691b      	ldr	r3, [r3, #16]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	051b      	lsls	r3, r3, #20
 8000a96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	6812      	ldr	r2, [r2, #0]
 8000aa0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000aa2:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_ADC_Init+0x1ac>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d10b      	bne.n	8000ad4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac6:	f023 0303 	bic.w	r3, r3, #3
 8000aca:	f043 0201 	orr.w	r2, r3, #1
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ad2:	e018      	b.n	8000b06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad8:	f023 0312 	bic.w	r3, r3, #18
 8000adc:	f043 0210 	orr.w	r2, r3, #16
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae8:	f043 0201 	orr.w	r2, r3, #1
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000af4:	e007      	b.n	8000b06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afa:	f043 0210 	orr.w	r2, r3, #16
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	ffe1f7fd 	.word	0xffe1f7fd
 8000b14:	ff1f0efe 	.word	0xff1f0efe

08000b18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b18:	b490      	push	{r4, r7}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d101      	bne.n	8000b38 <HAL_ADC_ConfigChannel+0x20>
 8000b34:	2302      	movs	r3, #2
 8000b36:	e0dc      	b.n	8000cf2 <HAL_ADC_ConfigChannel+0x1da>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b06      	cmp	r3, #6
 8000b46:	d81c      	bhi.n	8000b82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6819      	ldr	r1, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	4613      	mov	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4413      	add	r3, r2
 8000b5c:	3b05      	subs	r3, #5
 8000b5e:	221f      	movs	r2, #31
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	4018      	ands	r0, r3
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681c      	ldr	r4, [r3, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	4613      	mov	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	3b05      	subs	r3, #5
 8000b78:	fa04 f303 	lsl.w	r3, r4, r3
 8000b7c:	4303      	orrs	r3, r0
 8000b7e:	634b      	str	r3, [r1, #52]	; 0x34
 8000b80:	e03c      	b.n	8000bfc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b0c      	cmp	r3, #12
 8000b88:	d81c      	bhi.n	8000bc4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6819      	ldr	r1, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3b23      	subs	r3, #35	; 0x23
 8000ba0:	221f      	movs	r2, #31
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	4018      	ands	r0, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681c      	ldr	r4, [r3, #0]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	3b23      	subs	r3, #35	; 0x23
 8000bba:	fa04 f303 	lsl.w	r3, r4, r3
 8000bbe:	4303      	orrs	r3, r0
 8000bc0:	630b      	str	r3, [r1, #48]	; 0x30
 8000bc2:	e01b      	b.n	8000bfc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6819      	ldr	r1, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	3b41      	subs	r3, #65	; 0x41
 8000bda:	221f      	movs	r2, #31
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	4018      	ands	r0, r3
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681c      	ldr	r4, [r3, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	3b41      	subs	r3, #65	; 0x41
 8000bf4:	fa04 f303 	lsl.w	r3, r4, r3
 8000bf8:	4303      	orrs	r3, r0
 8000bfa:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b09      	cmp	r3, #9
 8000c02:	d91c      	bls.n	8000c3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6819      	ldr	r1, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	68d8      	ldr	r0, [r3, #12]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	3b1e      	subs	r3, #30
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	4018      	ands	r0, r3
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	689c      	ldr	r4, [r3, #8]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4413      	add	r3, r2
 8000c32:	3b1e      	subs	r3, #30
 8000c34:	fa04 f303 	lsl.w	r3, r4, r3
 8000c38:	4303      	orrs	r3, r0
 8000c3a:	60cb      	str	r3, [r1, #12]
 8000c3c:	e019      	b.n	8000c72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6819      	ldr	r1, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6918      	ldr	r0, [r3, #16]
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	2207      	movs	r2, #7
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	4018      	ands	r0, r3
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	689c      	ldr	r4, [r3, #8]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	fa04 f303 	lsl.w	r3, r4, r3
 8000c6e:	4303      	orrs	r3, r0
 8000c70:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b10      	cmp	r3, #16
 8000c78:	d003      	beq.n	8000c82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c7e:	2b11      	cmp	r3, #17
 8000c80:	d132      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a1d      	ldr	r2, [pc, #116]	; (8000cfc <HAL_ADC_ConfigChannel+0x1e4>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d125      	bne.n	8000cd8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d126      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	6812      	ldr	r2, [r2, #0]
 8000ca2:	6892      	ldr	r2, [r2, #8]
 8000ca4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ca8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b10      	cmp	r3, #16
 8000cb0:	d11a      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_ADC_ConfigChannel+0x1e8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <HAL_ADC_ConfigChannel+0x1ec>)
 8000cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbc:	0c9a      	lsrs	r2, r3, #18
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cc8:	e002      	b.n	8000cd0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f9      	bne.n	8000cca <HAL_ADC_ConfigChannel+0x1b2>
 8000cd6:	e007      	b.n	8000ce8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cdc:	f043 0220 	orr.w	r2, r3, #32
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc90      	pop	{r4, r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	40012400 	.word	0x40012400
 8000d00:	20000000 	.word	0x20000000
 8000d04:	431bde83 	.word	0x431bde83

08000d08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d12e      	bne.n	8000d80 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6812      	ldr	r2, [r2, #0]
 8000d2a:	6892      	ldr	r2, [r2, #8]
 8000d2c:	f022 0201 	bic.w	r2, r2, #1
 8000d30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d32:	f7ff fe0f 	bl	8000954 <HAL_GetTick>
 8000d36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d38:	e01b      	b.n	8000d72 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d3a:	f7ff fe0b 	bl	8000954 <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d914      	bls.n	8000d72 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d10d      	bne.n	8000d72 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	f043 0210 	orr.w	r2, r3, #16
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d66:	f043 0201 	orr.w	r2, r3, #1
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e007      	b.n	8000d82 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d0dc      	beq.n	8000d3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_EnableIRQ+0x34>)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	095b      	lsrs	r3, r3, #5
 8000e0a:	79fa      	ldrb	r2, [r7, #7]
 8000e0c:	f002 021f 	and.w	r2, r2, #31
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	490d      	ldr	r1, [pc, #52]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	4909      	ldr	r1, [pc, #36]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	401a      	ands	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	1e59      	subs	r1, r3, #1
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff51 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff66 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ffb4 	bl	8000e7c <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff83 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff59 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d008      	beq.n	8000f6e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2204      	movs	r2, #4
 8000f60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e020      	b.n	8000fb0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	6812      	ldr	r2, [r2, #0]
 8000f76:	6812      	ldr	r2, [r2, #0]
 8000f78:	f022 020e 	bic.w	r2, r2, #14
 8000f7c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	6812      	ldr	r2, [r2, #0]
 8000f88:	f022 0201 	bic.w	r2, r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f96:	2101      	movs	r1, #1
 8000f98:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
	...

08000fbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d005      	beq.n	8000fde <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e057      	b.n	800108e <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	f022 020e 	bic.w	r2, r2, #14
 8000fec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	f022 0201 	bic.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ffe:	4a26      	ldr	r2, [pc, #152]	; (8001098 <HAL_DMA_Abort_IT+0xdc>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <HAL_DMA_Abort_IT+0xe0>)
 8001008:	4299      	cmp	r1, r3
 800100a:	d02e      	beq.n	800106a <HAL_DMA_Abort_IT+0xae>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <HAL_DMA_Abort_IT+0xe4>)
 8001014:	4299      	cmp	r1, r3
 8001016:	d026      	beq.n	8001066 <HAL_DMA_Abort_IT+0xaa>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <HAL_DMA_Abort_IT+0xe8>)
 8001020:	4299      	cmp	r1, r3
 8001022:	d01d      	beq.n	8001060 <HAL_DMA_Abort_IT+0xa4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <HAL_DMA_Abort_IT+0xec>)
 800102c:	4299      	cmp	r1, r3
 800102e:	d014      	beq.n	800105a <HAL_DMA_Abort_IT+0x9e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_DMA_Abort_IT+0xf0>)
 8001038:	4299      	cmp	r1, r3
 800103a:	d00b      	beq.n	8001054 <HAL_DMA_Abort_IT+0x98>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_DMA_Abort_IT+0xf4>)
 8001044:	4299      	cmp	r1, r3
 8001046:	d102      	bne.n	800104e <HAL_DMA_Abort_IT+0x92>
 8001048:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800104c:	e00e      	b.n	800106c <HAL_DMA_Abort_IT+0xb0>
 800104e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001052:	e00b      	b.n	800106c <HAL_DMA_Abort_IT+0xb0>
 8001054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001058:	e008      	b.n	800106c <HAL_DMA_Abort_IT+0xb0>
 800105a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105e:	e005      	b.n	800106c <HAL_DMA_Abort_IT+0xb0>
 8001060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001064:	e002      	b.n	800106c <HAL_DMA_Abort_IT+0xb0>
 8001066:	2310      	movs	r3, #16
 8001068:	e000      	b.n	800106c <HAL_DMA_Abort_IT+0xb0>
 800106a:	2301      	movs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	4798      	blx	r3
    } 
  }
  return status;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40020000 	.word	0x40020000
 800109c:	40020008 	.word	0x40020008
 80010a0:	4002001c 	.word	0x4002001c
 80010a4:	40020030 	.word	0x40020030
 80010a8:	40020044 	.word	0x40020044
 80010ac:	40020058 	.word	0x40020058
 80010b0:	4002006c 	.word	0x4002006c

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b08b      	sub	sp, #44	; 0x2c
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c6:	e127      	b.n	8001318 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010c8:	2201      	movs	r2, #1
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	f040 8116 	bne.w	8001312 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d034      	beq.n	8001158 <HAL_GPIO_Init+0xa4>
 80010ee:	2b12      	cmp	r3, #18
 80010f0:	d80d      	bhi.n	800110e <HAL_GPIO_Init+0x5a>
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d02b      	beq.n	800114e <HAL_GPIO_Init+0x9a>
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d804      	bhi.n	8001104 <HAL_GPIO_Init+0x50>
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d031      	beq.n	8001162 <HAL_GPIO_Init+0xae>
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d01c      	beq.n	800113c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001102:	e048      	b.n	8001196 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001104:	2b03      	cmp	r3, #3
 8001106:	d043      	beq.n	8001190 <HAL_GPIO_Init+0xdc>
 8001108:	2b11      	cmp	r3, #17
 800110a:	d01b      	beq.n	8001144 <HAL_GPIO_Init+0x90>
          break;
 800110c:	e043      	b.n	8001196 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800110e:	4a89      	ldr	r2, [pc, #548]	; (8001334 <HAL_GPIO_Init+0x280>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d026      	beq.n	8001162 <HAL_GPIO_Init+0xae>
 8001114:	4a87      	ldr	r2, [pc, #540]	; (8001334 <HAL_GPIO_Init+0x280>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d806      	bhi.n	8001128 <HAL_GPIO_Init+0x74>
 800111a:	4a87      	ldr	r2, [pc, #540]	; (8001338 <HAL_GPIO_Init+0x284>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d020      	beq.n	8001162 <HAL_GPIO_Init+0xae>
 8001120:	4a86      	ldr	r2, [pc, #536]	; (800133c <HAL_GPIO_Init+0x288>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d01d      	beq.n	8001162 <HAL_GPIO_Init+0xae>
          break;
 8001126:	e036      	b.n	8001196 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001128:	4a85      	ldr	r2, [pc, #532]	; (8001340 <HAL_GPIO_Init+0x28c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <HAL_GPIO_Init+0xae>
 800112e:	4a85      	ldr	r2, [pc, #532]	; (8001344 <HAL_GPIO_Init+0x290>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d016      	beq.n	8001162 <HAL_GPIO_Init+0xae>
 8001134:	4a84      	ldr	r2, [pc, #528]	; (8001348 <HAL_GPIO_Init+0x294>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0xae>
          break;
 800113a:	e02c      	b.n	8001196 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	623b      	str	r3, [r7, #32]
          break;
 8001142:	e028      	b.n	8001196 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	3304      	adds	r3, #4
 800114a:	623b      	str	r3, [r7, #32]
          break;
 800114c:	e023      	b.n	8001196 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	3308      	adds	r3, #8
 8001154:	623b      	str	r3, [r7, #32]
          break;
 8001156:	e01e      	b.n	8001196 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	330c      	adds	r3, #12
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e019      	b.n	8001196 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800116a:	2304      	movs	r3, #4
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e012      	b.n	8001196 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d105      	bne.n	8001184 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001178:	2308      	movs	r3, #8
 800117a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	611a      	str	r2, [r3, #16]
          break;
 8001182:	e008      	b.n	8001196 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001184:	2308      	movs	r3, #8
 8001186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	615a      	str	r2, [r3, #20]
          break;
 800118e:	e002      	b.n	8001196 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	2bff      	cmp	r3, #255	; 0xff
 800119a:	d801      	bhi.n	80011a0 <HAL_GPIO_Init+0xec>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	e001      	b.n	80011a4 <HAL_GPIO_Init+0xf0>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3304      	adds	r3, #4
 80011a4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	2bff      	cmp	r3, #255	; 0xff
 80011aa:	d802      	bhi.n	80011b2 <HAL_GPIO_Init+0xfe>
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x104>
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	3b08      	subs	r3, #8
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	210f      	movs	r1, #15
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	401a      	ands	r2, r3
 80011ca:	6a39      	ldr	r1, [r7, #32]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	431a      	orrs	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 8096 	beq.w	8001312 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011e6:	4a59      	ldr	r2, [pc, #356]	; (800134c <HAL_GPIO_Init+0x298>)
 80011e8:	4b58      	ldr	r3, [pc, #352]	; (800134c <HAL_GPIO_Init+0x298>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6193      	str	r3, [r2, #24]
 80011f2:	4b56      	ldr	r3, [pc, #344]	; (800134c <HAL_GPIO_Init+0x298>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011fe:	4a54      	ldr	r2, [pc, #336]	; (8001350 <HAL_GPIO_Init+0x29c>)
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	4013      	ands	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4b      	ldr	r2, [pc, #300]	; (8001354 <HAL_GPIO_Init+0x2a0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x19e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4a      	ldr	r2, [pc, #296]	; (8001358 <HAL_GPIO_Init+0x2a4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x19a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a49      	ldr	r2, [pc, #292]	; (800135c <HAL_GPIO_Init+0x2a8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x196>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a48      	ldr	r2, [pc, #288]	; (8001360 <HAL_GPIO_Init+0x2ac>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x192>
 8001242:	2303      	movs	r3, #3
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x1a0>
 8001246:	2304      	movs	r3, #4
 8001248:	e004      	b.n	8001254 <HAL_GPIO_Init+0x1a0>
 800124a:	2302      	movs	r3, #2
 800124c:	e002      	b.n	8001254 <HAL_GPIO_Init+0x1a0>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x1a0>
 8001252:	2300      	movs	r3, #0
 8001254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001256:	f002 0203 	and.w	r2, r2, #3
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	4093      	lsls	r3, r2
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001264:	493a      	ldr	r1, [pc, #232]	; (8001350 <HAL_GPIO_Init+0x29c>)
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800127e:	4939      	ldr	r1, [pc, #228]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 8001280:	4b38      	ldr	r3, [pc, #224]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
 800128a:	e006      	b.n	800129a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800128c:	4935      	ldr	r1, [pc, #212]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 800128e:	4b35      	ldr	r3, [pc, #212]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	43db      	mvns	r3, r3
 8001296:	4013      	ands	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012a6:	492f      	ldr	r1, [pc, #188]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 80012a8:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	604b      	str	r3, [r1, #4]
 80012b2:	e006      	b.n	80012c2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012b4:	492b      	ldr	r1, [pc, #172]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 80012b6:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	43db      	mvns	r3, r3
 80012be:	4013      	ands	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d006      	beq.n	80012dc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012ce:	4925      	ldr	r1, [pc, #148]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	608b      	str	r3, [r1, #8]
 80012da:	e006      	b.n	80012ea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012dc:	4921      	ldr	r1, [pc, #132]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	4013      	ands	r3, r2
 80012e8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012f6:	491b      	ldr	r1, [pc, #108]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	60cb      	str	r3, [r1, #12]
 8001302:	e006      	b.n	8001312 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001304:	4917      	ldr	r1, [pc, #92]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_GPIO_Init+0x2b0>)
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	43db      	mvns	r3, r3
 800130e:	4013      	ands	r3, r2
 8001310:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	3301      	adds	r3, #1
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	fa22 f303 	lsr.w	r3, r2, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	f47f aed0 	bne.w	80010c8 <HAL_GPIO_Init+0x14>
  }
}
 8001328:	bf00      	nop
 800132a:	372c      	adds	r7, #44	; 0x2c
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	10210000 	.word	0x10210000
 8001338:	10110000 	.word	0x10110000
 800133c:	10120000 	.word	0x10120000
 8001340:	10310000 	.word	0x10310000
 8001344:	10320000 	.word	0x10320000
 8001348:	10220000 	.word	0x10220000
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000
 8001354:	40010800 	.word	0x40010800
 8001358:	40010c00 	.word	0x40010c00
 800135c:	40011000 	.word	0x40011000
 8001360:	40011400 	.word	0x40011400
 8001364:	40010400 	.word	0x40010400

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	611a      	str	r2, [r3, #16]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e26c      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8087 	beq.w	80014c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013b8:	4b92      	ldr	r3, [pc, #584]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d00c      	beq.n	80013de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013c4:	4b8f      	ldr	r3, [pc, #572]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d112      	bne.n	80013f6 <HAL_RCC_OscConfig+0x5e>
 80013d0:	4b8c      	ldr	r3, [pc, #560]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013dc:	d10b      	bne.n	80013f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013de:	4b89      	ldr	r3, [pc, #548]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d06c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x12c>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d168      	bne.n	80014c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e246      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x76>
 8001400:	4a80      	ldr	r2, [pc, #512]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001402:	4b80      	ldr	r3, [pc, #512]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e02e      	b.n	800146c <HAL_RCC_OscConfig+0xd4>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x98>
 8001416:	4a7b      	ldr	r2, [pc, #492]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001418:	4b7a      	ldr	r3, [pc, #488]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4a78      	ldr	r2, [pc, #480]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001424:	4b77      	ldr	r3, [pc, #476]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e01d      	b.n	800146c <HAL_RCC_OscConfig+0xd4>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0xbc>
 800143a:	4a72      	ldr	r2, [pc, #456]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800143c:	4b71      	ldr	r3, [pc, #452]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4a6f      	ldr	r2, [pc, #444]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001448:	4b6e      	ldr	r3, [pc, #440]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0xd4>
 8001454:	4a6b      	ldr	r2, [pc, #428]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001456:	4b6b      	ldr	r3, [pc, #428]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4a68      	ldr	r2, [pc, #416]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001462:	4b68      	ldr	r3, [pc, #416]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fa6e 	bl	8000954 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fa6a 	bl	8000954 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e1fa      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	4b5d      	ldr	r3, [pc, #372]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0xe4>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fa5a 	bl	8000954 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fa56 	bl	8000954 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e1e6      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	4b53      	ldr	r3, [pc, #332]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x10c>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d063      	beq.n	800159a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014d2:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00b      	beq.n	80014f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014de:	4b49      	ldr	r3, [pc, #292]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d11c      	bne.n	8001524 <HAL_RCC_OscConfig+0x18c>
 80014ea:	4b46      	ldr	r3, [pc, #280]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d116      	bne.n	8001524 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	4b43      	ldr	r3, [pc, #268]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x176>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e1ba      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	493d      	ldr	r1, [pc, #244]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001510:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	e03a      	b.n	800159a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d020      	beq.n	800156e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fa0f 	bl	8000954 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fa0b 	bl	8000954 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e19b      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	492a      	ldr	r1, [pc, #168]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]
 800156c:	e015      	b.n	800159a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff f9ee 	bl	8000954 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff f9ea 	bl	8000954 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e17a      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d03a      	beq.n	800161c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d019      	beq.n	80015e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_RCC_OscConfig+0x274>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff f9ce 	bl	8000954 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff f9ca 	bl	8000954 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e15a      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 fb0a 	bl	8001bf4 <RCC_Delay>
 80015e0:	e01c      	b.n	800161c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_RCC_OscConfig+0x274>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff f9b4 	bl	8000954 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ee:	e00f      	b.n	8001610 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff f9b0 	bl	8000954 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d908      	bls.n	8001610 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e140      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	42420000 	.word	0x42420000
 800160c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001610:	4b9e      	ldr	r3, [pc, #632]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e9      	bne.n	80015f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a6 	beq.w	8001776 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162e:	4b97      	ldr	r3, [pc, #604]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10d      	bne.n	8001656 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4a94      	ldr	r2, [pc, #592]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800163c:	4b93      	ldr	r3, [pc, #588]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b91      	ldr	r3, [pc, #580]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001652:	2301      	movs	r3, #1
 8001654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b8e      	ldr	r3, [pc, #568]	; (8001890 <HAL_RCC_OscConfig+0x4f8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001662:	4a8b      	ldr	r2, [pc, #556]	; (8001890 <HAL_RCC_OscConfig+0x4f8>)
 8001664:	4b8a      	ldr	r3, [pc, #552]	; (8001890 <HAL_RCC_OscConfig+0x4f8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff f971 	bl	8000954 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001676:	f7ff f96d 	bl	8000954 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b64      	cmp	r3, #100	; 0x64
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e0fd      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	4b81      	ldr	r3, [pc, #516]	; (8001890 <HAL_RCC_OscConfig+0x4f8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x312>
 800169c:	4a7b      	ldr	r2, [pc, #492]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800169e:	4b7b      	ldr	r3, [pc, #492]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	e02d      	b.n	8001706 <HAL_RCC_OscConfig+0x36e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x334>
 80016b2:	4a76      	ldr	r2, [pc, #472]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	4b75      	ldr	r3, [pc, #468]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	6213      	str	r3, [r2, #32]
 80016be:	4a73      	ldr	r2, [pc, #460]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	4b72      	ldr	r3, [pc, #456]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	e01c      	b.n	8001706 <HAL_RCC_OscConfig+0x36e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	d10c      	bne.n	80016ee <HAL_RCC_OscConfig+0x356>
 80016d4:	4a6d      	ldr	r2, [pc, #436]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016d6:	4b6d      	ldr	r3, [pc, #436]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6213      	str	r3, [r2, #32]
 80016e0:	4a6a      	ldr	r2, [pc, #424]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	4b6a      	ldr	r3, [pc, #424]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6213      	str	r3, [r2, #32]
 80016ec:	e00b      	b.n	8001706 <HAL_RCC_OscConfig+0x36e>
 80016ee:	4a67      	ldr	r2, [pc, #412]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	4b66      	ldr	r3, [pc, #408]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6213      	str	r3, [r2, #32]
 80016fa:	4a64      	ldr	r2, [pc, #400]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	4b63      	ldr	r3, [pc, #396]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	f023 0304 	bic.w	r3, r3, #4
 8001704:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d015      	beq.n	800173a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170e:	f7ff f921 	bl	8000954 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001714:	e00a      	b.n	800172c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7ff f91d 	bl	8000954 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f241 3288 	movw	r2, #5000	; 0x1388
 8001724:	4293      	cmp	r3, r2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e0ab      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172c:	4b57      	ldr	r3, [pc, #348]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0ee      	beq.n	8001716 <HAL_RCC_OscConfig+0x37e>
 8001738:	e014      	b.n	8001764 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff f90b 	bl	8000954 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001740:	e00a      	b.n	8001758 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff f907 	bl	8000954 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001750:	4293      	cmp	r3, r2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e095      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	4b4c      	ldr	r3, [pc, #304]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1ee      	bne.n	8001742 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d105      	bne.n	8001776 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176a:	4a48      	ldr	r2, [pc, #288]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800176c:	4b47      	ldr	r3, [pc, #284]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001774:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8081 	beq.w	8001882 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001780:	4b42      	ldr	r3, [pc, #264]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b08      	cmp	r3, #8
 800178a:	d061      	beq.n	8001850 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d146      	bne.n	8001822 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001794:	4b3f      	ldr	r3, [pc, #252]	; (8001894 <HAL_RCC_OscConfig+0x4fc>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff f8db 	bl	8000954 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a2:	f7ff f8d7 	bl	8000954 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e067      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b4:	4b35      	ldr	r3, [pc, #212]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f0      	bne.n	80017a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c8:	d108      	bne.n	80017dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017ca:	4930      	ldr	r1, [pc, #192]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	4b2f      	ldr	r3, [pc, #188]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017dc:	482b      	ldr	r0, [pc, #172]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80017de:	4b2b      	ldr	r3, [pc, #172]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a19      	ldr	r1, [r3, #32]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	430b      	orrs	r3, r1
 80017f0:	4313      	orrs	r3, r2
 80017f2:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <HAL_RCC_OscConfig+0x4fc>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff f8ab 	bl	8000954 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001802:	f7ff f8a7 	bl	8000954 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e037      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x46a>
 8001820:	e02f      	b.n	8001882 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_RCC_OscConfig+0x4fc>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff f894 	bl	8000954 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff f890 	bl	8000954 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e020      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x498>
 800184e:	e018      	b.n	8001882 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e013      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	429a      	cmp	r2, r3
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d001      	beq.n	8001882 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	40007000 	.word	0x40007000
 8001894:	42420060 	.word	0x42420060

08001898 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0d0      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018ac:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0207 	and.w	r2, r3, #7
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d210      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4967      	ldr	r1, [pc, #412]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	4b66      	ldr	r3, [pc, #408]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 0207 	bic.w	r2, r3, #7
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b63      	ldr	r3, [pc, #396]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0207 	and.w	r2, r3, #7
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0b8      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d020      	beq.n	800192a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f4:	4a59      	ldr	r2, [pc, #356]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800190c:	4a53      	ldr	r2, [pc, #332]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001916:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001918:	4950      	ldr	r1, [pc, #320]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d040      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d115      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e07f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001956:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e073      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e06b      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001976:	4939      	ldr	r1, [pc, #228]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 0203 	bic.w	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001988:	f7fe ffe4 	bl	8000954 <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7fe ffe0 	bl	8000954 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e053      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 020c 	and.w	r2, r3, #12
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1eb      	bne.n	8001990 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0207 	and.w	r2, r3, #7
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d910      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4924      	ldr	r1, [pc, #144]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 0207 	bic.w	r2, r3, #7
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0207 	and.w	r2, r3, #7
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e032      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f4:	4919      	ldr	r1, [pc, #100]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a12:	4912      	ldr	r1, [pc, #72]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a26:	f000 f821 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001a2a:	4601      	mov	r1, r0
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a38:	5cd3      	ldrb	r3, [r2, r3]
 8001a3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001a3e:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x1cc>)
 8001a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_RCC_ClockConfig+0x1d0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fed4 	bl	80007f4 <HAL_InitTick>

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40022000 	.word	0x40022000
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	08005d40 	.word	0x08005d40
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	b490      	push	{r4, r7}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a72:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a74:	1d3c      	adds	r4, r7, #4
 8001a76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a96:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d002      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x40>
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d003      	beq.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x46>
 8001aaa:	e02d      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aae:	623b      	str	r3, [r7, #32]
      break;
 8001ab0:	e02d      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	0c9b      	lsrs	r3, r3, #18
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001abe:	4413      	add	r3, r2
 8001ac0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ac4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d013      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	0c5b      	lsrs	r3, r3, #17
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ade:	4413      	add	r3, r2
 8001ae0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ae4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aea:	fb02 f203 	mul.w	r2, r2, r3
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
 8001af6:	e004      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	623b      	str	r3, [r7, #32]
      break;
 8001b06:	e002      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b0a:	623b      	str	r3, [r7, #32]
      break;
 8001b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc90      	pop	{r4, r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	08005ccc 	.word	0x08005ccc
 8001b20:	08005cdc 	.word	0x08005cdc
 8001b24:	40021000 	.word	0x40021000
 8001b28:	007a1200 	.word	0x007a1200
 8001b2c:	003d0900 	.word	0x003d0900

08001b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b02      	ldr	r3, [pc, #8]	; (8001b40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	20000000 	.word	0x20000000

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b48:	f7ff fff2 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5a:	5cd3      	ldrb	r3, [r2, r3]
 8001b5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08005d50 	.word	0x08005d50

08001b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b70:	f7ff ffde 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b74:	4601      	mov	r1, r0
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	0adb      	lsrs	r3, r3, #11
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08005d50 	.word	0x08005d50

08001b94 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_RCC_GetClockConfig+0x58>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_RCC_GetClockConfig+0x58>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_RCC_GetClockConfig+0x58>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_RCC_GetClockConfig+0x58>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0207 	and.w	r2, r3, #7
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <RCC_Delay+0x34>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <RCC_Delay+0x38>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c10:	bf00      	nop
  }
  while (Delay --);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	60fa      	str	r2, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f9      	bne.n	8001c10 <RCC_Delay+0x1c>
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	10624dd3 	.word	0x10624dd3

08001c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d07d      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c50:	4b4f      	ldr	r3, [pc, #316]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10d      	bne.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5c:	4a4c      	ldr	r2, [pc, #304]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c66:	61d3      	str	r3, [r2, #28]
 8001c68:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c74:	2301      	movs	r3, #1
 8001c76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d118      	bne.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c84:	4a43      	ldr	r2, [pc, #268]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c86:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c90:	f7fe fe60 	bl	8000954 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	e008      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c98:	f7fe fe5c 	bl	8000954 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e06d      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001caa:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cb6:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d02e      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d027      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cd4:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cdc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cde:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ce4:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cea:	4a29      	ldr	r2, [pc, #164]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d014      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7fe fe2b 	bl	8000954 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7fe fe27 	bl	8000954 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e036      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ee      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d24:	491a      	ldr	r1, [pc, #104]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d54:	490e      	ldr	r1, [pc, #56]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d008      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d72:	4907      	ldr	r1, [pc, #28]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40007000 	.word	0x40007000
 8001d98:	42420440 	.word	0x42420440

08001d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e041      	b.n	8001e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fc70 	bl	80006a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f000 fb7a 	bl	80024d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d001      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e03a      	b.n	8001eca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	68d2      	ldr	r2, [r2, #12]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <HAL_TIM_Base_Start_IT+0x98>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00e      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x58>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7e:	d009      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x58>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d004      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x58>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a13      	ldr	r2, [pc, #76]	; (8001edc <HAL_TIM_Base_Start_IT+0xa0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d111      	bne.n	8001eb8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d010      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb6:	e007      	b.n	8001ec8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	40012c00 	.word	0x40012c00
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40000800 	.word	0x40000800

08001ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e041      	b.n	8001f76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f839 	bl	8001f7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f000 fad8 	bl	80024d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0202 	mvn.w	r2, #2
 8001fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fa62 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fa55 	bl	800248a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fa64 	bl	80024ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d122      	bne.n	8002040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b04      	cmp	r3, #4
 8002006:	d11b      	bne.n	8002040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0204 	mvn.w	r2, #4
 8002010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fa38 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fa2b 	bl	800248a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fa3a 	bl	80024ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b08      	cmp	r3, #8
 800204c:	d122      	bne.n	8002094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b08      	cmp	r3, #8
 800205a:	d11b      	bne.n	8002094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0208 	mvn.w	r2, #8
 8002064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2204      	movs	r2, #4
 800206a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fa0e 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fa01 	bl	800248a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fa10 	bl	80024ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d122      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d11b      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0210 	mvn.w	r2, #16
 80020b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2208      	movs	r2, #8
 80020be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f9e4 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f9d7 	bl	800248a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f9e6 	bl	80024ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d107      	bne.n	8002114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0201 	mvn.w	r2, #1
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe fa42 	bl	8000598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	2b80      	cmp	r3, #128	; 0x80
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212c:	2b80      	cmp	r3, #128	; 0x80
 800212e:	d107      	bne.n	8002140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fcb1 	bl	8002aa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214a:	2b40      	cmp	r3, #64	; 0x40
 800214c:	d10e      	bne.n	800216c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002158:	2b40      	cmp	r3, #64	; 0x40
 800215a:	d107      	bne.n	800216c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f9aa 	bl	80024c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b20      	cmp	r3, #32
 8002178:	d10e      	bne.n	8002198 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b20      	cmp	r3, #32
 8002186:	d107      	bne.n	8002198 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0220 	mvn.w	r2, #32
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fc7c 	bl	8002a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e0ac      	b.n	8002314 <HAL_TIM_PWM_ConfigChannel+0x174>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	f200 809f 	bhi.w	8002308 <HAL_TIM_PWM_ConfigChannel+0x168>
 80021ca:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	08002205 	.word	0x08002205
 80021d4:	08002309 	.word	0x08002309
 80021d8:	08002309 	.word	0x08002309
 80021dc:	08002309 	.word	0x08002309
 80021e0:	08002245 	.word	0x08002245
 80021e4:	08002309 	.word	0x08002309
 80021e8:	08002309 	.word	0x08002309
 80021ec:	08002309 	.word	0x08002309
 80021f0:	08002287 	.word	0x08002287
 80021f4:	08002309 	.word	0x08002309
 80021f8:	08002309 	.word	0x08002309
 80021fc:	08002309 	.word	0x08002309
 8002200:	080022c7 	.word	0x080022c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f9c4 	bl	8002598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	6992      	ldr	r2, [r2, #24]
 800221a:	f042 0208 	orr.w	r2, r2, #8
 800221e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	6992      	ldr	r2, [r2, #24]
 800222a:	f022 0204 	bic.w	r2, r2, #4
 800222e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	6991      	ldr	r1, [r2, #24]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	6912      	ldr	r2, [r2, #16]
 800223e:	430a      	orrs	r2, r1
 8002240:	619a      	str	r2, [r3, #24]
      break;
 8002242:	e062      	b.n	800230a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fa0a 	bl	8002664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	6992      	ldr	r2, [r2, #24]
 800225a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	6992      	ldr	r2, [r2, #24]
 800226a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	6991      	ldr	r1, [r2, #24]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	6912      	ldr	r2, [r2, #16]
 800227e:	0212      	lsls	r2, r2, #8
 8002280:	430a      	orrs	r2, r1
 8002282:	619a      	str	r2, [r3, #24]
      break;
 8002284:	e041      	b.n	800230a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68b9      	ldr	r1, [r7, #8]
 800228c:	4618      	mov	r0, r3
 800228e:	f000 fa53 	bl	8002738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	69d2      	ldr	r2, [r2, #28]
 800229c:	f042 0208 	orr.w	r2, r2, #8
 80022a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	69d2      	ldr	r2, [r2, #28]
 80022ac:	f022 0204 	bic.w	r2, r2, #4
 80022b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	69d1      	ldr	r1, [r2, #28]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	6912      	ldr	r2, [r2, #16]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	61da      	str	r2, [r3, #28]
      break;
 80022c4:	e021      	b.n	800230a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fa9d 	bl	800280c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	69d2      	ldr	r2, [r2, #28]
 80022dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	69d2      	ldr	r2, [r2, #28]
 80022ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	69d1      	ldr	r1, [r2, #28]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	6912      	ldr	r2, [r2, #16]
 8002300:	0212      	lsls	r2, r2, #8
 8002302:	430a      	orrs	r2, r1
 8002304:	61da      	str	r2, [r3, #28]
      break;
 8002306:	e000      	b.n	800230a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_TIM_ConfigClockSource+0x18>
 8002330:	2302      	movs	r3, #2
 8002332:	e0a6      	b.n	8002482 <HAL_TIM_ConfigClockSource+0x166>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002352:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800235a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b40      	cmp	r3, #64	; 0x40
 800236a:	d067      	beq.n	800243c <HAL_TIM_ConfigClockSource+0x120>
 800236c:	2b40      	cmp	r3, #64	; 0x40
 800236e:	d80b      	bhi.n	8002388 <HAL_TIM_ConfigClockSource+0x6c>
 8002370:	2b10      	cmp	r3, #16
 8002372:	d073      	beq.n	800245c <HAL_TIM_ConfigClockSource+0x140>
 8002374:	2b10      	cmp	r3, #16
 8002376:	d802      	bhi.n	800237e <HAL_TIM_ConfigClockSource+0x62>
 8002378:	2b00      	cmp	r3, #0
 800237a:	d06f      	beq.n	800245c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800237c:	e078      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800237e:	2b20      	cmp	r3, #32
 8002380:	d06c      	beq.n	800245c <HAL_TIM_ConfigClockSource+0x140>
 8002382:	2b30      	cmp	r3, #48	; 0x30
 8002384:	d06a      	beq.n	800245c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002386:	e073      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002388:	2b70      	cmp	r3, #112	; 0x70
 800238a:	d00d      	beq.n	80023a8 <HAL_TIM_ConfigClockSource+0x8c>
 800238c:	2b70      	cmp	r3, #112	; 0x70
 800238e:	d804      	bhi.n	800239a <HAL_TIM_ConfigClockSource+0x7e>
 8002390:	2b50      	cmp	r3, #80	; 0x50
 8002392:	d033      	beq.n	80023fc <HAL_TIM_ConfigClockSource+0xe0>
 8002394:	2b60      	cmp	r3, #96	; 0x60
 8002396:	d041      	beq.n	800241c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002398:	e06a      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800239a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239e:	d066      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x152>
 80023a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a4:	d017      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80023a6:	e063      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6899      	ldr	r1, [r3, #8]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f000 faed 	bl	8002996 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	609a      	str	r2, [r3, #8]
      break;
 80023d4:	e04c      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6899      	ldr	r1, [r3, #8]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f000 fad6 	bl	8002996 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	6892      	ldr	r2, [r2, #8]
 80023f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023f8:	609a      	str	r2, [r3, #8]
      break;
 80023fa:	e039      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	461a      	mov	r2, r3
 800240a:	f000 fa4d 	bl	80028a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2150      	movs	r1, #80	; 0x50
 8002414:	4618      	mov	r0, r3
 8002416:	f000 faa4 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 800241a:	e029      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	461a      	mov	r2, r3
 800242a:	f000 fa6b 	bl	8002904 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2160      	movs	r1, #96	; 0x60
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fa94 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 800243a:	e019      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	461a      	mov	r2, r3
 800244a:	f000 fa2d 	bl	80028a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2140      	movs	r1, #64	; 0x40
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fa84 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 800245a:	e009      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	4610      	mov	r0, r2
 8002468:	f000 fa7b 	bl	8002962 <TIM_ITRx_SetConfig>
        break;
 800246c:	e000      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800246e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
	...

080024d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a29      	ldr	r2, [pc, #164]	; (800258c <TIM_Base_SetConfig+0xb8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00b      	beq.n	8002504 <TIM_Base_SetConfig+0x30>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f2:	d007      	beq.n	8002504 <TIM_Base_SetConfig+0x30>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a26      	ldr	r2, [pc, #152]	; (8002590 <TIM_Base_SetConfig+0xbc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d003      	beq.n	8002504 <TIM_Base_SetConfig+0x30>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a25      	ldr	r2, [pc, #148]	; (8002594 <TIM_Base_SetConfig+0xc0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d108      	bne.n	8002516 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a1c      	ldr	r2, [pc, #112]	; (800258c <TIM_Base_SetConfig+0xb8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00b      	beq.n	8002536 <TIM_Base_SetConfig+0x62>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002524:	d007      	beq.n	8002536 <TIM_Base_SetConfig+0x62>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a19      	ldr	r2, [pc, #100]	; (8002590 <TIM_Base_SetConfig+0xbc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d003      	beq.n	8002536 <TIM_Base_SetConfig+0x62>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a18      	ldr	r2, [pc, #96]	; (8002594 <TIM_Base_SetConfig+0xc0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d108      	bne.n	8002548 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a07      	ldr	r2, [pc, #28]	; (800258c <TIM_Base_SetConfig+0xb8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d103      	bne.n	800257c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	615a      	str	r2, [r3, #20]
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	40012c00 	.word	0x40012c00
 8002590:	40000400 	.word	0x40000400
 8002594:	40000800 	.word	0x40000800

08002598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	f023 0201 	bic.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f023 0303 	bic.w	r3, r3, #3
 80025ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f023 0302 	bic.w	r3, r3, #2
 80025e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <TIM_OC1_SetConfig+0xc8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d10c      	bne.n	800260e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f023 0308 	bic.w	r3, r3, #8
 80025fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a13      	ldr	r2, [pc, #76]	; (8002660 <TIM_OC1_SetConfig+0xc8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d111      	bne.n	800263a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800261c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	621a      	str	r2, [r3, #32]
}
 8002654:	bf00      	nop
 8002656:	371c      	adds	r7, #28
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40012c00 	.word	0x40012c00

08002664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f023 0210 	bic.w	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f023 0320 	bic.w	r3, r3, #32
 80026ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a1d      	ldr	r2, [pc, #116]	; (8002734 <TIM_OC2_SetConfig+0xd0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d10d      	bne.n	80026e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a14      	ldr	r2, [pc, #80]	; (8002734 <TIM_OC2_SetConfig+0xd0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d113      	bne.n	8002710 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	621a      	str	r2, [r3, #32]
}
 800272a:	bf00      	nop
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40012c00 	.word	0x40012c00

08002738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0303 	bic.w	r3, r3, #3
 800276e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <TIM_OC3_SetConfig+0xd0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10d      	bne.n	80027b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800279c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a14      	ldr	r2, [pc, #80]	; (8002808 <TIM_OC3_SetConfig+0xd0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d113      	bne.n	80027e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	621a      	str	r2, [r3, #32]
}
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40012c00 	.word	0x40012c00

0800280c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800283a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	031b      	lsls	r3, r3, #12
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a0f      	ldr	r2, [pc, #60]	; (80028a4 <TIM_OC4_SetConfig+0x98>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d109      	bne.n	8002880 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	019b      	lsls	r3, r3, #6
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	621a      	str	r2, [r3, #32]
}
 800289a:	bf00      	nop
 800289c:	371c      	adds	r7, #28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	40012c00 	.word	0x40012c00

080028a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f023 0201 	bic.w	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 030a 	bic.w	r3, r3, #10
 80028e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	621a      	str	r2, [r3, #32]
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f023 0210 	bic.w	r2, r3, #16
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800292e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	031b      	lsls	r3, r3, #12
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002940:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	621a      	str	r2, [r3, #32]
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	f043 0307 	orr.w	r3, r3, #7
 8002984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002996:	b480      	push	{r7}
 8002998:	b087      	sub	sp, #28
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	021a      	lsls	r2, r3, #8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4313      	orrs	r3, r2
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	609a      	str	r2, [r3, #8]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e046      	b.n	8002a7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00e      	beq.n	8002a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d009      	beq.n	8002a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d10c      	bne.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	40012c00 	.word	0x40012c00
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	40000800 	.word	0x40000800

08002a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e03f      	b.n	8002b46 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fd fe36 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	; 0x24
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	68d2      	ldr	r2, [r2, #12]
 8002af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fb4b 	bl	8003194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	6912      	ldr	r2, [r2, #16]
 8002b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	6952      	ldr	r2, [r2, #20]
 8002b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	68d2      	ldr	r2, [r2, #12]
 8002b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10d      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x52>
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fa50 	bl	8003040 <UART_Receive_IT>
      return;
 8002ba0:	e17c      	b.n	8002e9c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80b1 	beq.w	8002d0c <HAL_UART_IRQHandler+0x1bc>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <HAL_UART_IRQHandler+0x70>
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a6 	beq.w	8002d0c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_UART_IRQHandler+0x90>
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_UART_IRQHandler+0xb0>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f043 0202 	orr.w	r2, r3, #2
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_UART_IRQHandler+0xd0>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f043 0204 	orr.w	r2, r3, #4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00f      	beq.n	8002c4a <HAL_UART_IRQHandler+0xfa>
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <HAL_UART_IRQHandler+0xee>
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f043 0208 	orr.w	r2, r3, #8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 811f 	beq.w	8002e92 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <HAL_UART_IRQHandler+0x11e>
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f9e9 	bl	8003040 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <HAL_UART_IRQHandler+0x146>
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d031      	beq.n	8002cfa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f92c 	bl	8002ef4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d023      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	6952      	ldr	r2, [r2, #20]
 8002cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d013      	beq.n	8002cea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	4a77      	ldr	r2, [pc, #476]	; (8002ea4 <HAL_UART_IRQHandler+0x354>)
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe f974 	bl	8000fbc <HAL_DMA_Abort_IT>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d016      	beq.n	8002d08 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce8:	e00e      	b.n	8002d08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8ee 	bl	8002ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf0:	e00a      	b.n	8002d08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f8ea 	bl	8002ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf8:	e006      	b.n	8002d08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8e6 	bl	8002ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d06:	e0c4      	b.n	8002e92 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	bf00      	nop
    return;
 8002d0a:	e0c2      	b.n	8002e92 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 80a1 	bne.w	8002e58 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 809b 	beq.w	8002e58 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8095 	beq.w	8002e58 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d04e      	beq.n	8002df0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 8002d5c:	8a7b      	ldrh	r3, [r7, #18]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8099 	beq.w	8002e96 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d68:	8a7a      	ldrh	r2, [r7, #18]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	f080 8093 	bcs.w	8002e96 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	8a7a      	ldrh	r2, [r7, #18]
 8002d74:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d02b      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	68d2      	ldr	r2, [r2, #12]
 8002d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d8e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	6952      	ldr	r2, [r2, #20]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	6952      	ldr	r2, [r2, #20]
 8002daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	68d2      	ldr	r2, [r2, #12]
 8002dc8:	f022 0210 	bic.w	r2, r2, #16
 8002dcc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe f8b7 	bl	8000f46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4619      	mov	r1, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f878 	bl	8002ede <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002dee:	e052      	b.n	8002e96 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d048      	beq.n	8002e9a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002e08:	8a3b      	ldrh	r3, [r7, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d045      	beq.n	8002e9a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	68d2      	ldr	r2, [r2, #12]
 8002e18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e1c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	6952      	ldr	r2, [r2, #20]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	f022 0210 	bic.w	r2, r2, #16
 8002e4a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e4c:	8a3b      	ldrh	r3, [r7, #16]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f844 	bl	8002ede <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e56:	e020      	b.n	8002e9a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_UART_IRQHandler+0x324>
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f881 	bl	8002f74 <UART_Transmit_IT>
    return;
 8002e72:	e013      	b.n	8002e9c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00e      	beq.n	8002e9c <HAL_UART_IRQHandler+0x34c>
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f8c1 	bl	8003010 <UART_EndTransmit_IT>
    return;
 8002e8e:	bf00      	nop
 8002e90:	e004      	b.n	8002e9c <HAL_UART_IRQHandler+0x34c>
    return;
 8002e92:	bf00      	nop
 8002e94:	e002      	b.n	8002e9c <HAL_UART_IRQHandler+0x34c>
      return;
 8002e96:	bf00      	nop
 8002e98:	e000      	b.n	8002e9c <HAL_UART_IRQHandler+0x34c>
      return;
 8002e9a:	bf00      	nop
  }
}
 8002e9c:	3728      	adds	r7, #40	; 0x28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	08002f4d 	.word	0x08002f4d

08002ea8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	68d2      	ldr	r2, [r2, #12]
 8002f06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	6952      	ldr	r2, [r2, #20]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d107      	bne.n	8002f34 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	68d2      	ldr	r2, [r2, #12]
 8002f2e:	f022 0210 	bic.w	r2, r2, #16
 8002f32:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff ffb0 	bl	8002ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b21      	cmp	r3, #33	; 0x21
 8002f86:	d13d      	bne.n	8003004 <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f90:	d113      	bne.n	8002fba <UART_Transmit_IT+0x46>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	8812      	ldrh	r2, [r2, #0]
 8002fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	1c9a      	adds	r2, r3, #2
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	621a      	str	r2, [r3, #32]
 8002fb8:	e008      	b.n	8002fcc <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	1c58      	adds	r0, r3, #1
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	6208      	str	r0, [r1, #32]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10f      	bne.n	8003000 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	68d2      	ldr	r2, [r2, #12]
 8002fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	68d2      	ldr	r2, [r2, #12]
 8002ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ffe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	e000      	b.n	8003006 <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 8003004:	2302      	movs	r3, #2
  }
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	68d2      	ldr	r2, [r2, #12]
 8003022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003026:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff39 	bl	8002ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b22      	cmp	r3, #34	; 0x22
 8003052:	f040 8099 	bne.w	8003188 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305e:	d117      	bne.n	8003090 <UART_Receive_IT+0x50>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d113      	bne.n	8003090 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	b29b      	uxth	r3, r3
 800307a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307e:	b29a      	uxth	r2, r3
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	1c9a      	adds	r2, r3, #2
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	629a      	str	r2, [r3, #40]	; 0x28
 800308e:	e026      	b.n	80030de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a2:	d007      	beq.n	80030b4 <UART_Receive_IT+0x74>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <UART_Receive_IT+0x82>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d106      	bne.n	80030c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	e008      	b.n	80030d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4619      	mov	r1, r3
 80030ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d148      	bne.n	8003184 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	68d2      	ldr	r2, [r2, #12]
 80030fc:	f022 0220 	bic.w	r2, r2, #32
 8003100:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	68d2      	ldr	r2, [r2, #12]
 800310c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003110:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	6952      	ldr	r2, [r2, #20]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	2b01      	cmp	r3, #1
 8003130:	d123      	bne.n	800317a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	68d2      	ldr	r2, [r2, #12]
 8003142:	f022 0210 	bic.w	r2, r2, #16
 8003146:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b10      	cmp	r3, #16
 8003154:	d10a      	bne.n	800316c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff feb3 	bl	8002ede <HAL_UARTEx_RxEventCallback>
 8003178:	e002      	b.n	8003180 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff fe9d 	bl	8002eba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e002      	b.n	800318a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	e000      	b.n	800318a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003188:	2302      	movs	r3, #2
  }
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	6912      	ldr	r2, [r2, #16]
 80031a6:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031d2:	f023 030c 	bic.w	r3, r3, #12
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	430b      	orrs	r3, r1
 80031da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	6952      	ldr	r2, [r2, #20]
 80031e6:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6992      	ldr	r2, [r2, #24]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2c      	ldr	r2, [pc, #176]	; (80032a8 <UART_SetConfig+0x114>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d103      	bne.n	8003204 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031fc:	f7fe fcb6 	bl	8001b6c <HAL_RCC_GetPCLK2Freq>
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	e002      	b.n	800320a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003204:	f7fe fc9e 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8003208:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6819      	ldr	r1, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	009a      	lsls	r2, r3, #2
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fbb2 f3f3 	udiv	r3, r2, r3
 8003224:	4a21      	ldr	r2, [pc, #132]	; (80032ac <UART_SetConfig+0x118>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	0118      	lsls	r0, r3, #4
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	441a      	add	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	fbb2 f2f3 	udiv	r2, r2, r3
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <UART_SetConfig+0x118>)
 8003246:	fba3 4302 	umull	r4, r3, r3, r2
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	2464      	movs	r4, #100	; 0x64
 800324e:	fb04 f303 	mul.w	r3, r4, r3
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	3332      	adds	r3, #50	; 0x32
 8003258:	4a14      	ldr	r2, [pc, #80]	; (80032ac <UART_SetConfig+0x118>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003264:	4418      	add	r0, r3
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009a      	lsls	r2, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	fbb2 f2f3 	udiv	r2, r2, r3
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <UART_SetConfig+0x118>)
 800327e:	fba3 4302 	umull	r4, r3, r3, r2
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2464      	movs	r4, #100	; 0x64
 8003286:	fb04 f303 	mul.w	r3, r4, r3
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	3332      	adds	r3, #50	; 0x32
 8003290:	4a06      	ldr	r2, [pc, #24]	; (80032ac <UART_SetConfig+0x118>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	4403      	add	r3, r0
 800329e:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd90      	pop	{r4, r7, pc}
 80032a8:	40013800 	.word	0x40013800
 80032ac:	51eb851f 	.word	0x51eb851f

080032b0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032b6:	f3ef 8305 	mrs	r3, IPSR
 80032ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80032bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c2:	f3ef 8310 	mrs	r3, PRIMASK
 80032c6:	607b      	str	r3, [r7, #4]
  return(result);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <osKernelInitialize+0x32>
 80032ce:	4b10      	ldr	r3, [pc, #64]	; (8003310 <osKernelInitialize+0x60>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d109      	bne.n	80032ea <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032d6:	f3ef 8311 	mrs	r3, BASEPRI
 80032da:	603b      	str	r3, [r7, #0]
  return(result);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80032e2:	f06f 0305 	mvn.w	r3, #5
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e00c      	b.n	8003304 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <osKernelInitialize+0x60>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d105      	bne.n	80032fe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80032f2:	4b07      	ldr	r3, [pc, #28]	; (8003310 <osKernelInitialize+0x60>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e002      	b.n	8003304 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003302:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003304:	68fb      	ldr	r3, [r7, #12]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	2000002c 	.word	0x2000002c

08003314 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800331a:	f3ef 8305 	mrs	r3, IPSR
 800331e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003320:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10f      	bne.n	8003346 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003326:	f3ef 8310 	mrs	r3, PRIMASK
 800332a:	607b      	str	r3, [r7, #4]
  return(result);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <osKernelStart+0x32>
 8003332:	4b11      	ldr	r3, [pc, #68]	; (8003378 <osKernelStart+0x64>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d109      	bne.n	800334e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800333a:	f3ef 8311 	mrs	r3, BASEPRI
 800333e:	603b      	str	r3, [r7, #0]
  return(result);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003346:	f06f 0305 	mvn.w	r3, #5
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e00e      	b.n	800336c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <osKernelStart+0x64>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d107      	bne.n	8003366 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003356:	4b08      	ldr	r3, [pc, #32]	; (8003378 <osKernelStart+0x64>)
 8003358:	2202      	movs	r2, #2
 800335a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800335c:	f001 fc1a 	bl	8004b94 <vTaskStartScheduler>
      stat = osOK;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e002      	b.n	800336c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003366:	f04f 33ff 	mov.w	r3, #4294967295
 800336a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800336c:	68fb      	ldr	r3, [r7, #12]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	2000002c 	.word	0x2000002c

0800337c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b092      	sub	sp, #72	; 0x48
 8003380:	af04      	add	r7, sp, #16
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800338c:	f3ef 8305 	mrs	r3, IPSR
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003394:	2b00      	cmp	r3, #0
 8003396:	f040 8094 	bne.w	80034c2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339a:	f3ef 8310 	mrs	r3, PRIMASK
 800339e:	623b      	str	r3, [r7, #32]
  return(result);
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f040 808d 	bne.w	80034c2 <osThreadNew+0x146>
 80033a8:	4b48      	ldr	r3, [pc, #288]	; (80034cc <osThreadNew+0x150>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d106      	bne.n	80033be <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033b0:	f3ef 8311 	mrs	r3, BASEPRI
 80033b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f040 8082 	bne.w	80034c2 <osThreadNew+0x146>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d07e      	beq.n	80034c2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80033c8:	2318      	movs	r3, #24
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80033cc:	2300      	movs	r3, #0
 80033ce:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80033d0:	f107 031b 	add.w	r3, r7, #27
 80033d4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d045      	beq.n	800346e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <osThreadNew+0x74>
        name = attr->name;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <osThreadNew+0x9a>
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	2b38      	cmp	r3, #56	; 0x38
 8003408:	d805      	bhi.n	8003416 <osThreadNew+0x9a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <osThreadNew+0x9e>
        return (NULL);
 8003416:	2300      	movs	r3, #0
 8003418:	e054      	b.n	80034c4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	089b      	lsrs	r3, r3, #2
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00e      	beq.n	8003450 <osThreadNew+0xd4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2b5b      	cmp	r3, #91	; 0x5b
 8003438:	d90a      	bls.n	8003450 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800343e:	2b00      	cmp	r3, #0
 8003440:	d006      	beq.n	8003450 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <osThreadNew+0xd4>
        mem = 1;
 800344a:	2301      	movs	r3, #1
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
 800344e:	e010      	b.n	8003472 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10c      	bne.n	8003472 <osThreadNew+0xf6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d108      	bne.n	8003472 <osThreadNew+0xf6>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <osThreadNew+0xf6>
          mem = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
 800346c:	e001      	b.n	8003472 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	2b01      	cmp	r3, #1
 8003476:	d110      	bne.n	800349a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003480:	9202      	str	r2, [sp, #8]
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800348c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f001 f9b8 	bl	8004804 <xTaskCreateStatic>
 8003494:	4603      	mov	r3, r0
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e013      	b.n	80034c2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	d110      	bne.n	80034c2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f001 f9ff 	bl	80048b6 <xTaskCreate>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d001      	beq.n	80034c2 <osThreadNew+0x146>
          hTask = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034c2:	697b      	ldr	r3, [r7, #20]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3738      	adds	r7, #56	; 0x38
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	2000002c 	.word	0x2000002c

080034d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d8:	f3ef 8305 	mrs	r3, IPSR
 80034dc:	613b      	str	r3, [r7, #16]
  return(result);
 80034de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10f      	bne.n	8003504 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e4:	f3ef 8310 	mrs	r3, PRIMASK
 80034e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <osDelay+0x34>
 80034f0:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <osDelay+0x58>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d109      	bne.n	800350c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034f8:	f3ef 8311 	mrs	r3, BASEPRI
 80034fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <osDelay+0x3c>
    stat = osErrorISR;
 8003504:	f06f 0305 	mvn.w	r3, #5
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	e007      	b.n	800351c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f001 fb08 	bl	8004b2c <vTaskDelay>
    }
  }

  return (stat);
 800351c:	697b      	ldr	r3, [r7, #20]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	2000002c 	.word	0x2000002c

0800352c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a06      	ldr	r2, [pc, #24]	; (8003554 <vApplicationGetIdleTaskMemory+0x28>)
 800353c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4a05      	ldr	r2, [pc, #20]	; (8003558 <vApplicationGetIdleTaskMemory+0x2c>)
 8003542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2280      	movs	r2, #128	; 0x80
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	20000030 	.word	0x20000030
 8003558:	2000008c 	.word	0x2000008c

0800355c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a07      	ldr	r2, [pc, #28]	; (8003588 <vApplicationGetTimerTaskMemory+0x2c>)
 800356c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4a06      	ldr	r2, [pc, #24]	; (800358c <vApplicationGetTimerTaskMemory+0x30>)
 8003572:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800357a:	601a      	str	r2, [r3, #0]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	2000028c 	.word	0x2000028c
 800358c:	200002e8 	.word	0x200002e8

08003590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f103 0208 	add.w	r2, r3, #8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f04f 32ff 	mov.w	r2, #4294967295
 80035a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f103 0208 	add.w	r2, r3, #8
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f103 0208 	add.w	r2, r3, #8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr

080035ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035e6:	b480      	push	{r7}
 80035e8:	b085      	sub	sp, #20
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	601a      	str	r2, [r3, #0]
}
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003642:	d103      	bne.n	800364c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e00c      	b.n	8003666 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3308      	adds	r3, #8
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e002      	b.n	800365a <vListInsert+0x2e>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	429a      	cmp	r2, r3
 8003664:	d9f6      	bls.n	8003654 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	601a      	str	r2, [r3, #0]
}
 8003692:	bf00      	nop
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6892      	ldr	r2, [r2, #8]
 80036b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6852      	ldr	r2, [r2, #4]
 80036bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d103      	bne.n	80036d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	1e5a      	subs	r2, r3, #1
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr
	...

080036f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3b04      	subs	r3, #4
 8003700:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3b04      	subs	r3, #4
 800370e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f023 0201 	bic.w	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3b04      	subs	r3, #4
 800371e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003720:	4a08      	ldr	r2, [pc, #32]	; (8003744 <pxPortInitialiseStack+0x54>)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3b14      	subs	r3, #20
 800372a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3b20      	subs	r3, #32
 8003736:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003738:	68fb      	ldr	r3, [r7, #12]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	08003749 	.word	0x08003749

08003748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800374e:	2300      	movs	r3, #0
 8003750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <prvTaskExitError+0x4c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d009      	beq.n	8003770 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	e7fe      	b.n	800376e <prvTaskExitError+0x26>
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003782:	bf00      	nop
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0fc      	beq.n	8003784 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	2000000c 	.word	0x2000000c
	...

080037a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <pxCurrentTCBConst2>)
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	6808      	ldr	r0, [r1, #0]
 80037a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037aa:	f380 8809 	msr	PSP, r0
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f380 8811 	msr	BASEPRI, r0
 80037ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80037be:	4770      	bx	lr

080037c0 <pxCurrentTCBConst2>:
 80037c0:	20001308 	.word	0x20001308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop

080037c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80037c8:	4806      	ldr	r0, [pc, #24]	; (80037e4 <prvPortStartFirstTask+0x1c>)
 80037ca:	6800      	ldr	r0, [r0, #0]
 80037cc:	6800      	ldr	r0, [r0, #0]
 80037ce:	f380 8808 	msr	MSP, r0
 80037d2:	b662      	cpsie	i
 80037d4:	b661      	cpsie	f
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	df00      	svc	0
 80037e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80037e2:	bf00      	nop
 80037e4:	e000ed08 	.word	0xe000ed08

080037e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80037ee:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <xPortStartScheduler+0xcc>)
 80037f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	22ff      	movs	r2, #255	; 0xff
 80037fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003810:	b2da      	uxtb	r2, r3
 8003812:	4b29      	ldr	r3, [pc, #164]	; (80038b8 <xPortStartScheduler+0xd0>)
 8003814:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003816:	4b29      	ldr	r3, [pc, #164]	; (80038bc <xPortStartScheduler+0xd4>)
 8003818:	2207      	movs	r2, #7
 800381a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800381c:	e009      	b.n	8003832 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800381e:	4b27      	ldr	r3, [pc, #156]	; (80038bc <xPortStartScheduler+0xd4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3b01      	subs	r3, #1
 8003824:	4a25      	ldr	r2, [pc, #148]	; (80038bc <xPortStartScheduler+0xd4>)
 8003826:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	b2db      	uxtb	r3, r3
 8003830:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	2b80      	cmp	r3, #128	; 0x80
 800383c:	d0ef      	beq.n	800381e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800383e:	4b1f      	ldr	r3, [pc, #124]	; (80038bc <xPortStartScheduler+0xd4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f1c3 0307 	rsb	r3, r3, #7
 8003846:	2b04      	cmp	r3, #4
 8003848:	d009      	beq.n	800385e <xPortStartScheduler+0x76>
 800384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	e7fe      	b.n	800385c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800385e:	4b17      	ldr	r3, [pc, #92]	; (80038bc <xPortStartScheduler+0xd4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	4a15      	ldr	r2, [pc, #84]	; (80038bc <xPortStartScheduler+0xd4>)
 8003866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003868:	4b14      	ldr	r3, [pc, #80]	; (80038bc <xPortStartScheduler+0xd4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003870:	4a12      	ldr	r2, [pc, #72]	; (80038bc <xPortStartScheduler+0xd4>)
 8003872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800387c:	4a10      	ldr	r2, [pc, #64]	; (80038c0 <xPortStartScheduler+0xd8>)
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <xPortStartScheduler+0xd8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003888:	4a0d      	ldr	r2, [pc, #52]	; (80038c0 <xPortStartScheduler+0xd8>)
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <xPortStartScheduler+0xd8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003894:	f000 f8b0 	bl	80039f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <xPortStartScheduler+0xdc>)
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800389e:	f7ff ff93 	bl	80037c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80038a2:	f001 fb51 	bl	8004f48 <vTaskSwitchContext>
	prvTaskExitError();
 80038a6:	f7ff ff4f 	bl	8003748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	e000e400 	.word	0xe000e400
 80038b8:	200006e8 	.word	0x200006e8
 80038bc:	200006ec 	.word	0x200006ec
 80038c0:	e000ed20 	.word	0xe000ed20
 80038c4:	2000000c 	.word	0x2000000c

080038c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80038e0:	4b0e      	ldr	r3, [pc, #56]	; (800391c <vPortEnterCritical+0x54>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	4a0d      	ldr	r2, [pc, #52]	; (800391c <vPortEnterCritical+0x54>)
 80038e8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <vPortEnterCritical+0x54>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d10e      	bne.n	8003910 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <vPortEnterCritical+0x58>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d009      	beq.n	8003910 <vPortEnterCritical+0x48>
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	603b      	str	r3, [r7, #0]
 800390e:	e7fe      	b.n	800390e <vPortEnterCritical+0x46>
	}
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	2000000c 	.word	0x2000000c
 8003920:	e000ed04 	.word	0xe000ed04

08003924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <vPortExitCritical+0x48>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <vPortExitCritical+0x22>
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	e7fe      	b.n	8003944 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003946:	4b09      	ldr	r3, [pc, #36]	; (800396c <vPortExitCritical+0x48>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3b01      	subs	r3, #1
 800394c:	4a07      	ldr	r2, [pc, #28]	; (800396c <vPortExitCritical+0x48>)
 800394e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <vPortExitCritical+0x48>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <vPortExitCritical+0x3e>
 8003958:	2300      	movs	r3, #0
 800395a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	2000000c 	.word	0x2000000c

08003970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003970:	f3ef 8009 	mrs	r0, PSP
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <pxCurrentTCBConst>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003980:	6010      	str	r0, [r2, #0]
 8003982:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003986:	f04f 0050 	mov.w	r0, #80	; 0x50
 800398a:	f380 8811 	msr	BASEPRI, r0
 800398e:	f001 fadb 	bl	8004f48 <vTaskSwitchContext>
 8003992:	f04f 0000 	mov.w	r0, #0
 8003996:	f380 8811 	msr	BASEPRI, r0
 800399a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	6808      	ldr	r0, [r1, #0]
 80039a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039a6:	f380 8809 	msr	PSP, r0
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	4770      	bx	lr

080039b0 <pxCurrentTCBConst>:
 80039b0:	20001308 	.word	0x20001308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop

080039b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
	__asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80039d0:	f001 f9fc 	bl	8004dcc <xTaskIncrementTick>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <SysTick_Handler+0x3c>)
 80039dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	2300      	movs	r3, #0
 80039e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	e000ed04 	.word	0xe000ed04

080039f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <vPortSetupTimerInterrupt+0x30>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <vPortSetupTimerInterrupt+0x34>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a08:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <vPortSetupTimerInterrupt+0x38>)
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <vPortSetupTimerInterrupt+0x3c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	490a      	ldr	r1, [pc, #40]	; (8003a38 <vPortSetupTimerInterrupt+0x40>)
 8003a10:	fba1 1303 	umull	r1, r3, r1, r3
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	3b01      	subs	r3, #1
 8003a18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a1a:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <vPortSetupTimerInterrupt+0x30>)
 8003a1c:	2207      	movs	r2, #7
 8003a1e:	601a      	str	r2, [r3, #0]
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	e000e010 	.word	0xe000e010
 8003a2c:	e000e018 	.word	0xe000e018
 8003a30:	e000e014 	.word	0xe000e014
 8003a34:	20000000 	.word	0x20000000
 8003a38:	10624dd3 	.word	0x10624dd3

08003a3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003a42:	f3ef 8305 	mrs	r3, IPSR
 8003a46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b0f      	cmp	r3, #15
 8003a4c:	d913      	bls.n	8003a76 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <vPortValidateInterruptPriority+0x68>)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003a58:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <vPortValidateInterruptPriority+0x6c>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	7afa      	ldrb	r2, [r7, #11]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d209      	bcs.n	8003a76 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	e7fe      	b.n	8003a74 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <vPortValidateInterruptPriority+0x70>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a7e:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <vPortValidateInterruptPriority+0x74>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d909      	bls.n	8003a9a <vPortValidateInterruptPriority+0x5e>
 8003a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	e7fe      	b.n	8003a98 <vPortValidateInterruptPriority+0x5c>
	}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	e000e3f0 	.word	0xe000e3f0
 8003aa8:	200006e8 	.word	0x200006e8
 8003aac:	e000ed0c 	.word	0xe000ed0c
 8003ab0:	200006ec 	.word	0x200006ec

08003ab4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ac0:	f001 f8cc 	bl	8004c5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ac4:	4b57      	ldr	r3, [pc, #348]	; (8003c24 <pvPortMalloc+0x170>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003acc:	f000 f90c 	bl	8003ce8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ad0:	4b55      	ldr	r3, [pc, #340]	; (8003c28 <pvPortMalloc+0x174>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f040 808c 	bne.w	8003bf6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01c      	beq.n	8003b1e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d013      	beq.n	8003b1e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f023 0307 	bic.w	r3, r3, #7
 8003afc:	3308      	adds	r3, #8
 8003afe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <pvPortMalloc+0x6a>
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e7fe      	b.n	8003b1c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d068      	beq.n	8003bf6 <pvPortMalloc+0x142>
 8003b24:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <pvPortMalloc+0x178>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d863      	bhi.n	8003bf6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b2e:	4b40      	ldr	r3, [pc, #256]	; (8003c30 <pvPortMalloc+0x17c>)
 8003b30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b32:	4b3f      	ldr	r3, [pc, #252]	; (8003c30 <pvPortMalloc+0x17c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b38:	e004      	b.n	8003b44 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d203      	bcs.n	8003b56 <pvPortMalloc+0xa2>
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f1      	bne.n	8003b3a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b56:	4b33      	ldr	r3, [pc, #204]	; (8003c24 <pvPortMalloc+0x170>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d04a      	beq.n	8003bf6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2208      	movs	r2, #8
 8003b66:	4413      	add	r3, r2
 8003b68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	1ad2      	subs	r2, r2, r3
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d91e      	bls.n	8003bc0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d009      	beq.n	8003ba8 <pvPortMalloc+0xf4>
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	e7fe      	b.n	8003ba6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003bba:	69b8      	ldr	r0, [r7, #24]
 8003bbc:	f000 f8f6 	bl	8003dac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <pvPortMalloc+0x178>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <pvPortMalloc+0x178>)
 8003bcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003bce:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <pvPortMalloc+0x178>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <pvPortMalloc+0x180>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d203      	bcs.n	8003be2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003bda:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <pvPortMalloc+0x178>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <pvPortMalloc+0x180>)
 8003be0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <pvPortMalloc+0x174>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003bf6:	f001 f83f 	bl	8004c78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d009      	beq.n	8003c18 <pvPortMalloc+0x164>
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	e7fe      	b.n	8003c16 <pvPortMalloc+0x162>
	return pvReturn;
 8003c18:	69fb      	ldr	r3, [r7, #28]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3728      	adds	r7, #40	; 0x28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200012f8 	.word	0x200012f8
 8003c28:	20001304 	.word	0x20001304
 8003c2c:	200012fc 	.word	0x200012fc
 8003c30:	200012f0 	.word	0x200012f0
 8003c34:	20001300 	.word	0x20001300

08003c38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d046      	beq.n	8003cd8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	425b      	negs	r3, r3
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4413      	add	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <vPortFree+0xa8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d109      	bne.n	8003c7a <vPortFree+0x42>
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e7fe      	b.n	8003c78 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <vPortFree+0x5e>
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	e7fe      	b.n	8003c94 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <vPortFree+0xa8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d019      	beq.n	8003cd8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d115      	bne.n	8003cd8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <vPortFree+0xa8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003cbc:	f000 ffce 	bl	8004c5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <vPortFree+0xac>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4413      	add	r3, r2
 8003cca:	4a06      	ldr	r2, [pc, #24]	; (8003ce4 <vPortFree+0xac>)
 8003ccc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003cce:	6938      	ldr	r0, [r7, #16]
 8003cd0:	f000 f86c 	bl	8003dac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003cd4:	f000 ffd0 	bl	8004c78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003cd8:	bf00      	nop
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20001304 	.word	0x20001304
 8003ce4:	200012fc 	.word	0x200012fc

08003ce8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003cf2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003cf4:	4b27      	ldr	r3, [pc, #156]	; (8003d94 <prvHeapInit+0xac>)
 8003cf6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3307      	adds	r3, #7
 8003d06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0307 	bic.w	r3, r3, #7
 8003d0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <prvHeapInit+0xac>)
 8003d18:	4413      	add	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d20:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <prvHeapInit+0xb0>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d26:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <prvHeapInit+0xb0>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003d34:	2208      	movs	r2, #8
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <prvHeapInit+0xb4>)
 8003d48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003d4a:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <prvHeapInit+0xb4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d52:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <prvHeapInit+0xb4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	1ad2      	subs	r2, r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <prvHeapInit+0xb4>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <prvHeapInit+0xb8>)
 8003d76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <prvHeapInit+0xbc>)
 8003d7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <prvHeapInit+0xc0>)
 8003d82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d86:	601a      	str	r2, [r3, #0]
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	200006f0 	.word	0x200006f0
 8003d98:	200012f0 	.word	0x200012f0
 8003d9c:	200012f8 	.word	0x200012f8
 8003da0:	20001300 	.word	0x20001300
 8003da4:	200012fc 	.word	0x200012fc
 8003da8:	20001304 	.word	0x20001304

08003dac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003db4:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <prvInsertBlockIntoFreeList+0xa8>)
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	e002      	b.n	8003dc0 <prvInsertBlockIntoFreeList+0x14>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d3f7      	bcc.n	8003dba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	441a      	add	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d108      	bne.n	8003dee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	441a      	add	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d118      	bne.n	8003e34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <prvInsertBlockIntoFreeList+0xac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d00d      	beq.n	8003e2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	441a      	add	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e008      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <prvInsertBlockIntoFreeList+0xac>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e003      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d002      	beq.n	8003e4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	200012f0 	.word	0x200012f0
 8003e58:	200012f8 	.word	0x200012f8

08003e5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d109      	bne.n	8003e84 <xQueueGenericReset+0x28>
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	e7fe      	b.n	8003e82 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003e84:	f7ff fd20 	bl	80038c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	68f9      	ldr	r1, [r7, #12]
 8003e92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	441a      	add	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003eba:	fb01 f303 	mul.w	r3, r1, r3
 8003ebe:	441a      	add	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	22ff      	movs	r2, #255	; 0xff
 8003ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	22ff      	movs	r2, #255	; 0xff
 8003ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d114      	bne.n	8003f04 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01a      	beq.n	8003f18 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3310      	adds	r3, #16
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 f8d8 	bl	800509c <xTaskRemoveFromEventList>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d012      	beq.n	8003f18 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <xQueueGenericReset+0xcc>)
 8003ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	e009      	b.n	8003f18 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3310      	adds	r3, #16
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fb41 	bl	8003590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3324      	adds	r3, #36	; 0x24
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fb3c 	bl	8003590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f18:	f7ff fd04 	bl	8003924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f1c:	2301      	movs	r3, #1
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	e000ed04 	.word	0xe000ed04

08003f2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08e      	sub	sp, #56	; 0x38
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <xQueueGenericCreateStatic+0x28>
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f52:	e7fe      	b.n	8003f52 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <xQueueGenericCreateStatic+0x42>
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6c:	e7fe      	b.n	8003f6c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <xQueueGenericCreateStatic+0x4e>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <xQueueGenericCreateStatic+0x52>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <xQueueGenericCreateStatic+0x54>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <xQueueGenericCreateStatic+0x6c>
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	623b      	str	r3, [r7, #32]
 8003f96:	e7fe      	b.n	8003f96 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d102      	bne.n	8003fa4 <xQueueGenericCreateStatic+0x78>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <xQueueGenericCreateStatic+0x7c>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <xQueueGenericCreateStatic+0x7e>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <xQueueGenericCreateStatic+0x96>
 8003fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	61fb      	str	r3, [r7, #28]
 8003fc0:	e7fe      	b.n	8003fc0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fc2:	2350      	movs	r3, #80	; 0x50
 8003fc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b50      	cmp	r3, #80	; 0x50
 8003fca:	d009      	beq.n	8003fe0 <xQueueGenericCreateStatic+0xb4>
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	e7fe      	b.n	8003fde <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ff2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f805 	bl	8004010 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004008:	4618      	mov	r0, r3
 800400a:	3730      	adds	r7, #48	; 0x30
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d103      	bne.n	800402c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e002      	b.n	8004032 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800403e:	2101      	movs	r1, #1
 8004040:	69b8      	ldr	r0, [r7, #24]
 8004042:	f7ff ff0b 	bl	8003e5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08e      	sub	sp, #56	; 0x38
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004066:	2300      	movs	r3, #0
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	2b00      	cmp	r3, #0
 8004072:	d109      	bne.n	8004088 <xQueueGenericSend+0x30>
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	62bb      	str	r3, [r7, #40]	; 0x28
 8004086:	e7fe      	b.n	8004086 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <xQueueGenericSend+0x3e>
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <xQueueGenericSend+0x42>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xQueueGenericSend+0x44>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <xQueueGenericSend+0x5c>
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
 80040b2:	e7fe      	b.n	80040b2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d103      	bne.n	80040c2 <xQueueGenericSend+0x6a>
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <xQueueGenericSend+0x6e>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <xQueueGenericSend+0x70>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d109      	bne.n	80040e0 <xQueueGenericSend+0x88>
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	623b      	str	r3, [r7, #32]
 80040de:	e7fe      	b.n	80040de <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040e0:	f001 f996 	bl	8005410 <xTaskGetSchedulerState>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <xQueueGenericSend+0x98>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <xQueueGenericSend+0x9c>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <xQueueGenericSend+0x9e>
 80040f4:	2300      	movs	r3, #0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <xQueueGenericSend+0xb6>
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	e7fe      	b.n	800410c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800410e:	f7ff fbdb 	bl	80038c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <xQueueGenericSend+0xcc>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d129      	bne.n	8004178 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800412a:	f000 f9ff 	bl	800452c <prvCopyDataToQueue>
 800412e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	d010      	beq.n	800415a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	3324      	adds	r3, #36	; 0x24
 800413c:	4618      	mov	r0, r3
 800413e:	f000 ffad 	bl	800509c <xTaskRemoveFromEventList>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004148:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <xQueueGenericSend+0x1f0>)
 800414a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	e00a      	b.n	8004170 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004160:	4b39      	ldr	r3, [pc, #228]	; (8004248 <xQueueGenericSend+0x1f0>)
 8004162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004170:	f7ff fbd8 	bl	8003924 <vPortExitCritical>
				return pdPASS;
 8004174:	2301      	movs	r3, #1
 8004176:	e063      	b.n	8004240 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800417e:	f7ff fbd1 	bl	8003924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004182:	2300      	movs	r3, #0
 8004184:	e05c      	b.n	8004240 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	4618      	mov	r0, r3
 8004192:	f000 ffe5 	bl	8005160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004196:	2301      	movs	r3, #1
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800419a:	f7ff fbc3 	bl	8003924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800419e:	f000 fd5d 	bl	8004c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041a2:	f7ff fb91 	bl	80038c8 <vPortEnterCritical>
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d103      	bne.n	80041bc <xQueueGenericSend+0x164>
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041c2:	b25b      	sxtb	r3, r3
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d103      	bne.n	80041d2 <xQueueGenericSend+0x17a>
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041d2:	f7ff fba7 	bl	8003924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041d6:	1d3a      	adds	r2, r7, #4
 80041d8:	f107 0314 	add.w	r3, r7, #20
 80041dc:	4611      	mov	r1, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 ffd4 	bl	800518c <xTaskCheckForTimeOut>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d124      	bne.n	8004234 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ec:	f000 fa96 	bl	800471c <prvIsQueueFull>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d018      	beq.n	8004228 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	3310      	adds	r3, #16
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fefe 	bl	8005000 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004206:	f000 fa21 	bl	800464c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800420a:	f000 fd35 	bl	8004c78 <xTaskResumeAll>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	f47f af7c 	bne.w	800410e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004216:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <xQueueGenericSend+0x1f0>)
 8004218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	e772      	b.n	800410e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800422a:	f000 fa0f 	bl	800464c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800422e:	f000 fd23 	bl	8004c78 <xTaskResumeAll>
 8004232:	e76c      	b.n	800410e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004236:	f000 fa09 	bl	800464c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800423a:	f000 fd1d 	bl	8004c78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800423e:	2300      	movs	r3, #0
		}
	}
}
 8004240:	4618      	mov	r0, r3
 8004242:	3738      	adds	r7, #56	; 0x38
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08e      	sub	sp, #56	; 0x38
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <xQueueGenericSendFromISR+0x2c>
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
 8004276:	e7fe      	b.n	8004276 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d103      	bne.n	8004286 <xQueueGenericSendFromISR+0x3a>
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <xQueueGenericSendFromISR+0x3e>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <xQueueGenericSendFromISR+0x40>
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d109      	bne.n	80042a4 <xQueueGenericSendFromISR+0x58>
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	e7fe      	b.n	80042a2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d103      	bne.n	80042b2 <xQueueGenericSendFromISR+0x66>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <xQueueGenericSendFromISR+0x6a>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <xQueueGenericSendFromISR+0x6c>
 80042b6:	2300      	movs	r3, #0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <xQueueGenericSendFromISR+0x84>
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	e7fe      	b.n	80042ce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042d0:	f7ff fbb4 	bl	8003a3c <vPortValidateInterruptPriority>
	__asm volatile
 80042d4:	f3ef 8211 	mrs	r2, BASEPRI
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	61ba      	str	r2, [r7, #24]
 80042ea:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80042ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d302      	bcc.n	8004302 <xQueueGenericSendFromISR+0xb6>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d12c      	bne.n	800435c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004312:	f000 f90b 	bl	800452c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004316:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d112      	bne.n	8004346 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d016      	beq.n	8004356 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	3324      	adds	r3, #36	; 0x24
 800432c:	4618      	mov	r0, r3
 800432e:	f000 feb5 	bl	800509c <xTaskRemoveFromEventList>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00b      	beq.n	8004356 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e007      	b.n	8004356 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004346:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800434a:	3301      	adds	r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	b25a      	sxtb	r2, r3
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004356:	2301      	movs	r3, #1
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800435a:	e001      	b.n	8004360 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800435c:	2300      	movs	r3, #0
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
 8004360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004362:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800436a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800436c:	4618      	mov	r0, r3
 800436e:	3738      	adds	r7, #56	; 0x38
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08c      	sub	sp, #48	; 0x30
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004380:	2300      	movs	r3, #0
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <xQueueReceive+0x2e>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	623b      	str	r3, [r7, #32]
 80043a0:	e7fe      	b.n	80043a0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d103      	bne.n	80043b0 <xQueueReceive+0x3c>
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <xQueueReceive+0x40>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <xQueueReceive+0x42>
 80043b4:	2300      	movs	r3, #0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <xQueueReceive+0x5a>
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	e7fe      	b.n	80043cc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043ce:	f001 f81f 	bl	8005410 <xTaskGetSchedulerState>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <xQueueReceive+0x6a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <xQueueReceive+0x6e>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <xQueueReceive+0x70>
 80043e2:	2300      	movs	r3, #0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <xQueueReceive+0x88>
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	e7fe      	b.n	80043fa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80043fc:	f7ff fa64 	bl	80038c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01f      	beq.n	800444c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004410:	f000 f8f6 	bl	8004600 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	1e5a      	subs	r2, r3, #1
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00f      	beq.n	8004444 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	3310      	adds	r3, #16
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fe37 	bl	800509c <xTaskRemoveFromEventList>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004434:	4b3c      	ldr	r3, [pc, #240]	; (8004528 <xQueueReceive+0x1b4>)
 8004436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004444:	f7ff fa6e 	bl	8003924 <vPortExitCritical>
				return pdPASS;
 8004448:	2301      	movs	r3, #1
 800444a:	e069      	b.n	8004520 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d103      	bne.n	800445a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004452:	f7ff fa67 	bl	8003924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004456:	2300      	movs	r3, #0
 8004458:	e062      	b.n	8004520 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d106      	bne.n	800446e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004460:	f107 0310 	add.w	r3, r7, #16
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fe7b 	bl	8005160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800446a:	2301      	movs	r3, #1
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800446e:	f7ff fa59 	bl	8003924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004472:	f000 fbf3 	bl	8004c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004476:	f7ff fa27 	bl	80038c8 <vPortEnterCritical>
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004480:	b25b      	sxtb	r3, r3
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d103      	bne.n	8004490 <xQueueReceive+0x11c>
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004496:	b25b      	sxtb	r3, r3
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d103      	bne.n	80044a6 <xQueueReceive+0x132>
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044a6:	f7ff fa3d 	bl	8003924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044aa:	1d3a      	adds	r2, r7, #4
 80044ac:	f107 0310 	add.w	r3, r7, #16
 80044b0:	4611      	mov	r1, r2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fe6a 	bl	800518c <xTaskCheckForTimeOut>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d123      	bne.n	8004506 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044c0:	f000 f916 	bl	80046f0 <prvIsQueueEmpty>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d017      	beq.n	80044fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	3324      	adds	r3, #36	; 0x24
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4611      	mov	r1, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fd94 	bl	8005000 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044da:	f000 f8b7 	bl	800464c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044de:	f000 fbcb 	bl	8004c78 <xTaskResumeAll>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d189      	bne.n	80043fc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <xQueueReceive+0x1b4>)
 80044ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	e780      	b.n	80043fc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80044fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044fc:	f000 f8a6 	bl	800464c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004500:	f000 fbba 	bl	8004c78 <xTaskResumeAll>
 8004504:	e77a      	b.n	80043fc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004508:	f000 f8a0 	bl	800464c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800450c:	f000 fbb4 	bl	8004c78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004512:	f000 f8ed 	bl	80046f0 <prvIsQueueEmpty>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	f43f af6f 	beq.w	80043fc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800451e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004520:	4618      	mov	r0, r3
 8004522:	3730      	adds	r7, #48	; 0x30
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10d      	bne.n	8004566 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d14d      	bne.n	80045ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 ff78 	bl	800544c <xTaskPriorityDisinherit>
 800455c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	e043      	b.n	80045ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d119      	bne.n	80045a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6898      	ldr	r0, [r3, #8]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	461a      	mov	r2, r3
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	f001 fb7c 	bl	8005c74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	441a      	add	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d32b      	bcc.n	80045ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	609a      	str	r2, [r3, #8]
 800459e:	e026      	b.n	80045ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68d8      	ldr	r0, [r3, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	461a      	mov	r2, r3
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	f001 fb62 	bl	8005c74 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	425b      	negs	r3, r3
 80045ba:	441a      	add	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d207      	bcs.n	80045dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	425b      	negs	r3, r3
 80045d6:	441a      	add	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d105      	bne.n	80045ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80045f6:	697b      	ldr	r3, [r7, #20]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d018      	beq.n	8004644 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	441a      	add	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	429a      	cmp	r2, r3
 800462a:	d303      	bcc.n	8004634 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68d9      	ldr	r1, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	461a      	mov	r2, r3
 800463e:	6838      	ldr	r0, [r7, #0]
 8004640:	f001 fb18 	bl	8005c74 <memcpy>
	}
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004654:	f7ff f938 	bl	80038c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800465e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004660:	e011      	b.n	8004686 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2b00      	cmp	r3, #0
 8004668:	d012      	beq.n	8004690 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3324      	adds	r3, #36	; 0x24
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fd14 	bl	800509c <xTaskRemoveFromEventList>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800467a:	f000 fde7 	bl	800524c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	3b01      	subs	r3, #1
 8004682:	b2db      	uxtb	r3, r3
 8004684:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468a:	2b00      	cmp	r3, #0
 800468c:	dce9      	bgt.n	8004662 <prvUnlockQueue+0x16>
 800468e:	e000      	b.n	8004692 <prvUnlockQueue+0x46>
					break;
 8004690:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	22ff      	movs	r2, #255	; 0xff
 8004696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800469a:	f7ff f943 	bl	8003924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800469e:	f7ff f913 	bl	80038c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046aa:	e011      	b.n	80046d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d012      	beq.n	80046da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3310      	adds	r3, #16
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fcef 	bl	800509c <xTaskRemoveFromEventList>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046c4:	f000 fdc2 	bl	800524c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046c8:	7bbb      	ldrb	r3, [r7, #14]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	dce9      	bgt.n	80046ac <prvUnlockQueue+0x60>
 80046d8:	e000      	b.n	80046dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	22ff      	movs	r2, #255	; 0xff
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80046e4:	f7ff f91e 	bl	8003924 <vPortExitCritical>
}
 80046e8:	bf00      	nop
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046f8:	f7ff f8e6 	bl	80038c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004704:	2301      	movs	r3, #1
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e001      	b.n	800470e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800470e:	f7ff f909 	bl	8003924 <vPortExitCritical>

	return xReturn;
 8004712:	68fb      	ldr	r3, [r7, #12]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004724:	f7ff f8d0 	bl	80038c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004730:	429a      	cmp	r2, r3
 8004732:	d102      	bne.n	800473a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004734:	2301      	movs	r3, #1
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e001      	b.n	800473e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800473e:	f7ff f8f1 	bl	8003924 <vPortExitCritical>

	return xReturn;
 8004742:	68fb      	ldr	r3, [r7, #12]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	e014      	b.n	8004786 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800475c:	4a0e      	ldr	r2, [pc, #56]	; (8004798 <vQueueAddToRegistry+0x4c>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10b      	bne.n	8004780 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004768:	490b      	ldr	r1, [pc, #44]	; (8004798 <vQueueAddToRegistry+0x4c>)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <vQueueAddToRegistry+0x4c>)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4413      	add	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800477e:	e005      	b.n	800478c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3301      	adds	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b07      	cmp	r3, #7
 800478a:	d9e7      	bls.n	800475c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20001a44 	.word	0x20001a44

0800479c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047ac:	f7ff f88c 	bl	80038c8 <vPortEnterCritical>
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047b6:	b25b      	sxtb	r3, r3
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d103      	bne.n	80047c6 <vQueueWaitForMessageRestricted+0x2a>
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047cc:	b25b      	sxtb	r3, r3
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d103      	bne.n	80047dc <vQueueWaitForMessageRestricted+0x40>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047dc:	f7ff f8a2 	bl	8003924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3324      	adds	r3, #36	; 0x24
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fc29 	bl	8005048 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80047f6:	6978      	ldr	r0, [r7, #20]
 80047f8:	f7ff ff28 	bl	800464c <prvUnlockQueue>
	}
 80047fc:	bf00      	nop
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08e      	sub	sp, #56	; 0x38
 8004808:	af04      	add	r7, sp, #16
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <xTaskCreateStatic+0x28>
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	623b      	str	r3, [r7, #32]
 800482a:	e7fe      	b.n	800482a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800482c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <xTaskCreateStatic+0x42>
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	61fb      	str	r3, [r7, #28]
 8004844:	e7fe      	b.n	8004844 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004846:	235c      	movs	r3, #92	; 0x5c
 8004848:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b5c      	cmp	r3, #92	; 0x5c
 800484e:	d009      	beq.n	8004864 <xTaskCreateStatic+0x60>
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	e7fe      	b.n	8004862 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004866:	2b00      	cmp	r3, #0
 8004868:	d01e      	beq.n	80048a8 <xTaskCreateStatic+0xa4>
 800486a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01b      	beq.n	80048a8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004878:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	2202      	movs	r2, #2
 800487e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004882:	2300      	movs	r3, #0
 8004884:	9303      	str	r3, [sp, #12]
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	9302      	str	r3, [sp, #8]
 800488a:	f107 0314 	add.w	r3, r7, #20
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f850 	bl	8004940 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048a2:	f000 f8d3 	bl	8004a4c <prvAddNewTaskToReadyList>
 80048a6:	e001      	b.n	80048ac <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048ac:	697b      	ldr	r3, [r7, #20]
	}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3728      	adds	r7, #40	; 0x28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b08c      	sub	sp, #48	; 0x30
 80048ba:	af04      	add	r7, sp, #16
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff f8f2 	bl	8003ab4 <pvPortMalloc>
 80048d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00e      	beq.n	80048f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80048d8:	205c      	movs	r0, #92	; 0x5c
 80048da:	f7ff f8eb 	bl	8003ab4 <pvPortMalloc>
 80048de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
 80048ec:	e005      	b.n	80048fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048ee:	6978      	ldr	r0, [r7, #20]
 80048f0:	f7ff f9a2 	bl	8003c38 <vPortFree>
 80048f4:	e001      	b.n	80048fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d017      	beq.n	8004930 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	2300      	movs	r3, #0
 800490c:	9303      	str	r3, [sp, #12]
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	9302      	str	r3, [sp, #8]
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f80e 	bl	8004940 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004924:	69f8      	ldr	r0, [r7, #28]
 8004926:	f000 f891 	bl	8004a4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800492a:	2301      	movs	r3, #1
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	e002      	b.n	8004936 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004930:	f04f 33ff 	mov.w	r3, #4294967295
 8004934:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004936:	69bb      	ldr	r3, [r7, #24]
	}
 8004938:	4618      	mov	r0, r3
 800493a:	3720      	adds	r7, #32
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	461a      	mov	r2, r3
 8004958:	21a5      	movs	r1, #165	; 0xa5
 800495a:	f001 f996 	bl	8005c8a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004968:	3b01      	subs	r3, #1
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	f023 0307 	bic.w	r3, r3, #7
 8004976:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <prvInitialiseNewTask+0x56>
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	e7fe      	b.n	8004994 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
 800499a:	e012      	b.n	80049c2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	4413      	add	r3, r2
 80049a2:	7819      	ldrb	r1, [r3, #0]
 80049a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	3334      	adds	r3, #52	; 0x34
 80049ac:	460a      	mov	r2, r1
 80049ae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d006      	beq.n	80049ca <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	3301      	adds	r3, #1
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	2b0f      	cmp	r3, #15
 80049c6:	d9e9      	bls.n	800499c <prvInitialiseNewTask+0x5c>
 80049c8:	e000      	b.n	80049cc <prvInitialiseNewTask+0x8c>
		{
			break;
 80049ca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	2b37      	cmp	r3, #55	; 0x37
 80049d8:	d901      	bls.n	80049de <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049da:	2337      	movs	r3, #55	; 0x37
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	2200      	movs	r2, #0
 80049ee:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	3304      	adds	r3, #4
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe fdea 	bl	80035ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	3318      	adds	r3, #24
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe fde5 	bl	80035ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	69b8      	ldr	r0, [r7, #24]
 8004a2e:	f7fe fe5f 	bl	80036f0 <pxPortInitialiseStack>
 8004a32:	4602      	mov	r2, r0
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a44:	bf00      	nop
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a54:	f7fe ff38 	bl	80038c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a58:	4b2d      	ldr	r3, [pc, #180]	; (8004b10 <prvAddNewTaskToReadyList+0xc4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	4a2c      	ldr	r2, [pc, #176]	; (8004b10 <prvAddNewTaskToReadyList+0xc4>)
 8004a60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a62:	4b2c      	ldr	r3, [pc, #176]	; (8004b14 <prvAddNewTaskToReadyList+0xc8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a6a:	4a2a      	ldr	r2, [pc, #168]	; (8004b14 <prvAddNewTaskToReadyList+0xc8>)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a70:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <prvAddNewTaskToReadyList+0xc4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d110      	bne.n	8004a9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a78:	f000 fc0c 	bl	8005294 <prvInitialiseTaskLists>
 8004a7c:	e00d      	b.n	8004a9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a7e:	4b26      	ldr	r3, [pc, #152]	; (8004b18 <prvAddNewTaskToReadyList+0xcc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a86:	4b23      	ldr	r3, [pc, #140]	; (8004b14 <prvAddNewTaskToReadyList+0xc8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d802      	bhi.n	8004a9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a94:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <prvAddNewTaskToReadyList+0xc8>)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a9a:	4b20      	ldr	r3, [pc, #128]	; (8004b1c <prvAddNewTaskToReadyList+0xd0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	4a1e      	ldr	r2, [pc, #120]	; (8004b1c <prvAddNewTaskToReadyList+0xd0>)
 8004aa2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <prvAddNewTaskToReadyList+0xd0>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab0:	4b1b      	ldr	r3, [pc, #108]	; (8004b20 <prvAddNewTaskToReadyList+0xd4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d903      	bls.n	8004ac0 <prvAddNewTaskToReadyList+0x74>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <prvAddNewTaskToReadyList+0xd4>)
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4a15      	ldr	r2, [pc, #84]	; (8004b24 <prvAddNewTaskToReadyList+0xd8>)
 8004ace:	441a      	add	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f7fe fd85 	bl	80035e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004adc:	f7fe ff22 	bl	8003924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ae0:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <prvAddNewTaskToReadyList+0xcc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00e      	beq.n	8004b06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <prvAddNewTaskToReadyList+0xc8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d207      	bcs.n	8004b06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <prvAddNewTaskToReadyList+0xdc>)
 8004af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	200017dc 	.word	0x200017dc
 8004b14:	20001308 	.word	0x20001308
 8004b18:	200017e8 	.word	0x200017e8
 8004b1c:	200017f8 	.word	0x200017f8
 8004b20:	200017e4 	.word	0x200017e4
 8004b24:	2000130c 	.word	0x2000130c
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d016      	beq.n	8004b6c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <vTaskDelay+0x60>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <vTaskDelay+0x2e>
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	e7fe      	b.n	8004b58 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004b5a:	f000 f87f 	bl	8004c5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b5e:	2100      	movs	r1, #0
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fcdf 	bl	8005524 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b66:	f000 f887 	bl	8004c78 <xTaskResumeAll>
 8004b6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d107      	bne.n	8004b82 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <vTaskDelay+0x64>)
 8004b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20001804 	.word	0x20001804
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	; 0x28
 8004b98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ba2:	463a      	mov	r2, r7
 8004ba4:	1d39      	adds	r1, r7, #4
 8004ba6:	f107 0308 	add.w	r3, r7, #8
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fe fcbe 	bl	800352c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bb0:	6839      	ldr	r1, [r7, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	9202      	str	r2, [sp, #8]
 8004bb8:	9301      	str	r3, [sp, #4]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	460a      	mov	r2, r1
 8004bc2:	4920      	ldr	r1, [pc, #128]	; (8004c44 <vTaskStartScheduler+0xb0>)
 8004bc4:	4820      	ldr	r0, [pc, #128]	; (8004c48 <vTaskStartScheduler+0xb4>)
 8004bc6:	f7ff fe1d 	bl	8004804 <xTaskCreateStatic>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	4b1f      	ldr	r3, [pc, #124]	; (8004c4c <vTaskStartScheduler+0xb8>)
 8004bce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bd0:	4b1e      	ldr	r3, [pc, #120]	; (8004c4c <vTaskStartScheduler+0xb8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e001      	b.n	8004be2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d102      	bne.n	8004bee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004be8:	f000 fcf0 	bl	80055cc <xTimerCreateTimerTask>
 8004bec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d115      	bne.n	8004c20 <vTaskStartScheduler+0x8c>
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c06:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <vTaskStartScheduler+0xbc>)
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c0e:	4b11      	ldr	r3, [pc, #68]	; (8004c54 <vTaskStartScheduler+0xc0>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004c14:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <vTaskStartScheduler+0xc4>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c1a:	f7fe fde5 	bl	80037e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c1e:	e00d      	b.n	8004c3c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c26:	d109      	bne.n	8004c3c <vTaskStartScheduler+0xa8>
 8004c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	e7fe      	b.n	8004c3a <vTaskStartScheduler+0xa6>
}
 8004c3c:	bf00      	nop
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	08005ce0 	.word	0x08005ce0
 8004c48:	08005265 	.word	0x08005265
 8004c4c:	20001800 	.word	0x20001800
 8004c50:	200017fc 	.word	0x200017fc
 8004c54:	200017e8 	.word	0x200017e8
 8004c58:	200017e0 	.word	0x200017e0

08004c5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <vTaskSuspendAll+0x18>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	4a03      	ldr	r2, [pc, #12]	; (8004c74 <vTaskSuspendAll+0x18>)
 8004c68:	6013      	str	r3, [r2, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20001804 	.word	0x20001804

08004c78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c86:	4b41      	ldr	r3, [pc, #260]	; (8004d8c <xTaskResumeAll+0x114>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <xTaskResumeAll+0x2a>
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	e7fe      	b.n	8004ca0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ca2:	f7fe fe11 	bl	80038c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ca6:	4b39      	ldr	r3, [pc, #228]	; (8004d8c <xTaskResumeAll+0x114>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	4a37      	ldr	r2, [pc, #220]	; (8004d8c <xTaskResumeAll+0x114>)
 8004cae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cb0:	4b36      	ldr	r3, [pc, #216]	; (8004d8c <xTaskResumeAll+0x114>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d162      	bne.n	8004d7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cb8:	4b35      	ldr	r3, [pc, #212]	; (8004d90 <xTaskResumeAll+0x118>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d05e      	beq.n	8004d7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cc0:	e02f      	b.n	8004d22 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004cc2:	4b34      	ldr	r3, [pc, #208]	; (8004d94 <xTaskResumeAll+0x11c>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3318      	adds	r3, #24
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fce4 	bl	800369c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fe fcdf 	bl	800369c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce2:	4b2d      	ldr	r3, [pc, #180]	; (8004d98 <xTaskResumeAll+0x120>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d903      	bls.n	8004cf2 <xTaskResumeAll+0x7a>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	4a2a      	ldr	r2, [pc, #168]	; (8004d98 <xTaskResumeAll+0x120>)
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4a27      	ldr	r2, [pc, #156]	; (8004d9c <xTaskResumeAll+0x124>)
 8004d00:	441a      	add	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4619      	mov	r1, r3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	f7fe fc6c 	bl	80035e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d12:	4b23      	ldr	r3, [pc, #140]	; (8004da0 <xTaskResumeAll+0x128>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d302      	bcc.n	8004d22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d1c:	4b21      	ldr	r3, [pc, #132]	; (8004da4 <xTaskResumeAll+0x12c>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d22:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <xTaskResumeAll+0x11c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1cb      	bne.n	8004cc2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d30:	f000 fb4a 	bl	80053c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d34:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <xTaskResumeAll+0x130>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d010      	beq.n	8004d62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d40:	f000 f844 	bl	8004dcc <xTaskIncrementTick>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d4a:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <xTaskResumeAll+0x12c>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f1      	bne.n	8004d40 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004d5c:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <xTaskResumeAll+0x130>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <xTaskResumeAll+0x12c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <xTaskResumeAll+0x134>)
 8004d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d7e:	f7fe fdd1 	bl	8003924 <vPortExitCritical>

	return xAlreadyYielded;
 8004d82:	68bb      	ldr	r3, [r7, #8]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20001804 	.word	0x20001804
 8004d90:	200017dc 	.word	0x200017dc
 8004d94:	2000179c 	.word	0x2000179c
 8004d98:	200017e4 	.word	0x200017e4
 8004d9c:	2000130c 	.word	0x2000130c
 8004da0:	20001308 	.word	0x20001308
 8004da4:	200017f0 	.word	0x200017f0
 8004da8:	200017ec 	.word	0x200017ec
 8004dac:	e000ed04 	.word	0xe000ed04

08004db0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004db6:	4b04      	ldr	r3, [pc, #16]	; (8004dc8 <xTaskGetTickCount+0x18>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004dbc:	687b      	ldr	r3, [r7, #4]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr
 8004dc8:	200017e0 	.word	0x200017e0

08004dcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dd6:	4b51      	ldr	r3, [pc, #324]	; (8004f1c <xTaskIncrementTick+0x150>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f040 808d 	bne.w	8004efa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004de0:	4b4f      	ldr	r3, [pc, #316]	; (8004f20 <xTaskIncrementTick+0x154>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004de8:	4a4d      	ldr	r2, [pc, #308]	; (8004f20 <xTaskIncrementTick+0x154>)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d11f      	bne.n	8004e34 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004df4:	4b4b      	ldr	r3, [pc, #300]	; (8004f24 <xTaskIncrementTick+0x158>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <xTaskIncrementTick+0x46>
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	e7fe      	b.n	8004e10 <xTaskIncrementTick+0x44>
 8004e12:	4b44      	ldr	r3, [pc, #272]	; (8004f24 <xTaskIncrementTick+0x158>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <xTaskIncrementTick+0x15c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a41      	ldr	r2, [pc, #260]	; (8004f24 <xTaskIncrementTick+0x158>)
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	4a41      	ldr	r2, [pc, #260]	; (8004f28 <xTaskIncrementTick+0x15c>)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4b41      	ldr	r3, [pc, #260]	; (8004f2c <xTaskIncrementTick+0x160>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	4a3f      	ldr	r2, [pc, #252]	; (8004f2c <xTaskIncrementTick+0x160>)
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	f000 faca 	bl	80053c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e34:	4b3e      	ldr	r3, [pc, #248]	; (8004f30 <xTaskIncrementTick+0x164>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d34e      	bcc.n	8004edc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e3e:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <xTaskIncrementTick+0x158>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <xTaskIncrementTick+0x80>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <xTaskIncrementTick+0x82>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d004      	beq.n	8004e5c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e52:	4b37      	ldr	r3, [pc, #220]	; (8004f30 <xTaskIncrementTick+0x164>)
 8004e54:	f04f 32ff 	mov.w	r2, #4294967295
 8004e58:	601a      	str	r2, [r3, #0]
					break;
 8004e5a:	e03f      	b.n	8004edc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e5c:	4b31      	ldr	r3, [pc, #196]	; (8004f24 <xTaskIncrementTick+0x158>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d203      	bcs.n	8004e7c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e74:	4a2e      	ldr	r2, [pc, #184]	; (8004f30 <xTaskIncrementTick+0x164>)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6013      	str	r3, [r2, #0]
						break;
 8004e7a:	e02f      	b.n	8004edc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fe fc0b 	bl	800369c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	3318      	adds	r3, #24
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fe fc02 	bl	800369c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9c:	4b25      	ldr	r3, [pc, #148]	; (8004f34 <xTaskIncrementTick+0x168>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d903      	bls.n	8004eac <xTaskIncrementTick+0xe0>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	4a22      	ldr	r2, [pc, #136]	; (8004f34 <xTaskIncrementTick+0x168>)
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4a1f      	ldr	r2, [pc, #124]	; (8004f38 <xTaskIncrementTick+0x16c>)
 8004eba:	441a      	add	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f7fe fb8f 	bl	80035e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <xTaskIncrementTick+0x170>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d3b3      	bcc.n	8004e3e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eda:	e7b0      	b.n	8004e3e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004edc:	4b17      	ldr	r3, [pc, #92]	; (8004f3c <xTaskIncrementTick+0x170>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee2:	4915      	ldr	r1, [pc, #84]	; (8004f38 <xTaskIncrementTick+0x16c>)
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d907      	bls.n	8004f04 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e004      	b.n	8004f04 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004efa:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <xTaskIncrementTick+0x174>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3301      	adds	r3, #1
 8004f00:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <xTaskIncrementTick+0x174>)
 8004f02:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f04:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <xTaskIncrementTick+0x178>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f10:	697b      	ldr	r3, [r7, #20]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20001804 	.word	0x20001804
 8004f20:	200017e0 	.word	0x200017e0
 8004f24:	20001794 	.word	0x20001794
 8004f28:	20001798 	.word	0x20001798
 8004f2c:	200017f4 	.word	0x200017f4
 8004f30:	200017fc 	.word	0x200017fc
 8004f34:	200017e4 	.word	0x200017e4
 8004f38:	2000130c 	.word	0x2000130c
 8004f3c:	20001308 	.word	0x20001308
 8004f40:	200017ec 	.word	0x200017ec
 8004f44:	200017f0 	.word	0x200017f0

08004f48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f4e:	4b27      	ldr	r3, [pc, #156]	; (8004fec <vTaskSwitchContext+0xa4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f56:	4b26      	ldr	r3, [pc, #152]	; (8004ff0 <vTaskSwitchContext+0xa8>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f5c:	e040      	b.n	8004fe0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004f5e:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <vTaskSwitchContext+0xa8>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f64:	4b23      	ldr	r3, [pc, #140]	; (8004ff4 <vTaskSwitchContext+0xac>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	e00f      	b.n	8004f8c <vTaskSwitchContext+0x44>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <vTaskSwitchContext+0x3e>
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	607b      	str	r3, [r7, #4]
 8004f84:	e7fe      	b.n	8004f84 <vTaskSwitchContext+0x3c>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	491a      	ldr	r1, [pc, #104]	; (8004ff8 <vTaskSwitchContext+0xb0>)
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0e5      	beq.n	8004f6c <vTaskSwitchContext+0x24>
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4a13      	ldr	r2, [pc, #76]	; (8004ff8 <vTaskSwitchContext+0xb0>)
 8004fac:	4413      	add	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d104      	bne.n	8004fd0 <vTaskSwitchContext+0x88>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	605a      	str	r2, [r3, #4]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	4a09      	ldr	r2, [pc, #36]	; (8004ffc <vTaskSwitchContext+0xb4>)
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	4a06      	ldr	r2, [pc, #24]	; (8004ff4 <vTaskSwitchContext+0xac>)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6013      	str	r3, [r2, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20001804 	.word	0x20001804
 8004ff0:	200017f0 	.word	0x200017f0
 8004ff4:	200017e4 	.word	0x200017e4
 8004ff8:	2000130c 	.word	0x2000130c
 8004ffc:	20001308 	.word	0x20001308

08005000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d109      	bne.n	8005024 <vTaskPlaceOnEventList+0x24>
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e7fe      	b.n	8005022 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005024:	4b07      	ldr	r3, [pc, #28]	; (8005044 <vTaskPlaceOnEventList+0x44>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3318      	adds	r3, #24
 800502a:	4619      	mov	r1, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7fe fafd 	bl	800362c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005032:	2101      	movs	r1, #1
 8005034:	6838      	ldr	r0, [r7, #0]
 8005036:	f000 fa75 	bl	8005524 <prvAddCurrentTaskToDelayedList>
}
 800503a:	bf00      	nop
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20001308 	.word	0x20001308

08005048 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <vTaskPlaceOnEventListRestricted+0x26>
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	e7fe      	b.n	800506c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800506e:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <vTaskPlaceOnEventListRestricted+0x50>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3318      	adds	r3, #24
 8005074:	4619      	mov	r1, r3
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7fe fab5 	bl	80035e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005082:	f04f 33ff 	mov.w	r3, #4294967295
 8005086:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	68b8      	ldr	r0, [r7, #8]
 800508c:	f000 fa4a 	bl	8005524 <prvAddCurrentTaskToDelayedList>
	}
 8005090:	bf00      	nop
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20001308 	.word	0x20001308

0800509c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <xTaskRemoveFromEventList+0x2a>
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	e7fe      	b.n	80050c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	3318      	adds	r3, #24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fae6 	bl	800369c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050d0:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <xTaskRemoveFromEventList+0xac>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d11d      	bne.n	8005114 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	3304      	adds	r3, #4
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fe fadd 	bl	800369c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e6:	4b19      	ldr	r3, [pc, #100]	; (800514c <xTaskRemoveFromEventList+0xb0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d903      	bls.n	80050f6 <xTaskRemoveFromEventList+0x5a>
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	4a16      	ldr	r2, [pc, #88]	; (800514c <xTaskRemoveFromEventList+0xb0>)
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4a13      	ldr	r2, [pc, #76]	; (8005150 <xTaskRemoveFromEventList+0xb4>)
 8005104:	441a      	add	r2, r3
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	3304      	adds	r3, #4
 800510a:	4619      	mov	r1, r3
 800510c:	4610      	mov	r0, r2
 800510e:	f7fe fa6a 	bl	80035e6 <vListInsertEnd>
 8005112:	e005      	b.n	8005120 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	3318      	adds	r3, #24
 8005118:	4619      	mov	r1, r3
 800511a:	480e      	ldr	r0, [pc, #56]	; (8005154 <xTaskRemoveFromEventList+0xb8>)
 800511c:	f7fe fa63 	bl	80035e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <xTaskRemoveFromEventList+0xbc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	429a      	cmp	r2, r3
 800512c:	d905      	bls.n	800513a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800512e:	2301      	movs	r3, #1
 8005130:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <xTaskRemoveFromEventList+0xc0>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	e001      	b.n	800513e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800513e:	697b      	ldr	r3, [r7, #20]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20001804 	.word	0x20001804
 800514c:	200017e4 	.word	0x200017e4
 8005150:	2000130c 	.word	0x2000130c
 8005154:	2000179c 	.word	0x2000179c
 8005158:	20001308 	.word	0x20001308
 800515c:	200017f0 	.word	0x200017f0

08005160 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <vTaskInternalSetTimeOutState+0x24>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <vTaskInternalSetTimeOutState+0x28>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	605a      	str	r2, [r3, #4]
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	200017f4 	.word	0x200017f4
 8005188:	200017e0 	.word	0x200017e0

0800518c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d109      	bne.n	80051b0 <xTaskCheckForTimeOut+0x24>
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	e7fe      	b.n	80051ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <xTaskCheckForTimeOut+0x3e>
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	e7fe      	b.n	80051c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80051ca:	f7fe fb7d 	bl	80038c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051ce:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <xTaskCheckForTimeOut+0xb8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d102      	bne.n	80051ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	e023      	b.n	8005236 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b15      	ldr	r3, [pc, #84]	; (8005248 <xTaskCheckForTimeOut+0xbc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d007      	beq.n	800520a <xTaskCheckForTimeOut+0x7e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	429a      	cmp	r2, r3
 8005202:	d802      	bhi.n	800520a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005204:	2301      	movs	r3, #1
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	e015      	b.n	8005236 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	429a      	cmp	r2, r3
 8005212:	d90b      	bls.n	800522c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	1ad2      	subs	r2, r2, r3
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff ff9d 	bl	8005160 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	e004      	b.n	8005236 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005232:	2301      	movs	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005236:	f7fe fb75 	bl	8003924 <vPortExitCritical>

	return xReturn;
 800523a:	69fb      	ldr	r3, [r7, #28]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	200017e0 	.word	0x200017e0
 8005248:	200017f4 	.word	0x200017f4

0800524c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005250:	4b03      	ldr	r3, [pc, #12]	; (8005260 <vTaskMissedYield+0x14>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]
}
 8005256:	bf00      	nop
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	200017f0 	.word	0x200017f0

08005264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800526c:	f000 f852 	bl	8005314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005270:	4b06      	ldr	r3, [pc, #24]	; (800528c <prvIdleTask+0x28>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d9f9      	bls.n	800526c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <prvIdleTask+0x2c>)
 800527a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005288:	e7f0      	b.n	800526c <prvIdleTask+0x8>
 800528a:	bf00      	nop
 800528c:	2000130c 	.word	0x2000130c
 8005290:	e000ed04 	.word	0xe000ed04

08005294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800529a:	2300      	movs	r3, #0
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	e00c      	b.n	80052ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4a12      	ldr	r2, [pc, #72]	; (80052f4 <prvInitialiseTaskLists+0x60>)
 80052ac:	4413      	add	r3, r2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe f96e 	bl	8003590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3301      	adds	r3, #1
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b37      	cmp	r3, #55	; 0x37
 80052be:	d9ef      	bls.n	80052a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052c0:	480d      	ldr	r0, [pc, #52]	; (80052f8 <prvInitialiseTaskLists+0x64>)
 80052c2:	f7fe f965 	bl	8003590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052c6:	480d      	ldr	r0, [pc, #52]	; (80052fc <prvInitialiseTaskLists+0x68>)
 80052c8:	f7fe f962 	bl	8003590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052cc:	480c      	ldr	r0, [pc, #48]	; (8005300 <prvInitialiseTaskLists+0x6c>)
 80052ce:	f7fe f95f 	bl	8003590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052d2:	480c      	ldr	r0, [pc, #48]	; (8005304 <prvInitialiseTaskLists+0x70>)
 80052d4:	f7fe f95c 	bl	8003590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052d8:	480b      	ldr	r0, [pc, #44]	; (8005308 <prvInitialiseTaskLists+0x74>)
 80052da:	f7fe f959 	bl	8003590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052de:	4b0b      	ldr	r3, [pc, #44]	; (800530c <prvInitialiseTaskLists+0x78>)
 80052e0:	4a05      	ldr	r2, [pc, #20]	; (80052f8 <prvInitialiseTaskLists+0x64>)
 80052e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <prvInitialiseTaskLists+0x7c>)
 80052e6:	4a05      	ldr	r2, [pc, #20]	; (80052fc <prvInitialiseTaskLists+0x68>)
 80052e8:	601a      	str	r2, [r3, #0]
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	2000130c 	.word	0x2000130c
 80052f8:	2000176c 	.word	0x2000176c
 80052fc:	20001780 	.word	0x20001780
 8005300:	2000179c 	.word	0x2000179c
 8005304:	200017b0 	.word	0x200017b0
 8005308:	200017c8 	.word	0x200017c8
 800530c:	20001794 	.word	0x20001794
 8005310:	20001798 	.word	0x20001798

08005314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800531a:	e019      	b.n	8005350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800531c:	f7fe fad4 	bl	80038c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005320:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <prvCheckTasksWaitingTermination+0x4c>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3304      	adds	r3, #4
 800532c:	4618      	mov	r0, r3
 800532e:	f7fe f9b5 	bl	800369c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <prvCheckTasksWaitingTermination+0x50>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3b01      	subs	r3, #1
 8005338:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <prvCheckTasksWaitingTermination+0x50>)
 800533a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <prvCheckTasksWaitingTermination+0x54>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3b01      	subs	r3, #1
 8005342:	4a09      	ldr	r2, [pc, #36]	; (8005368 <prvCheckTasksWaitingTermination+0x54>)
 8005344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005346:	f7fe faed 	bl	8003924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f80e 	bl	800536c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <prvCheckTasksWaitingTermination+0x54>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e1      	bne.n	800531c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005358:	bf00      	nop
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	200017b0 	.word	0x200017b0
 8005364:	200017dc 	.word	0x200017dc
 8005368:	200017c4 	.word	0x200017c4

0800536c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800537a:	2b00      	cmp	r3, #0
 800537c:	d108      	bne.n	8005390 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	4618      	mov	r0, r3
 8005384:	f7fe fc58 	bl	8003c38 <vPortFree>
				vPortFree( pxTCB );
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7fe fc55 	bl	8003c38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800538e:	e017      	b.n	80053c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005396:	2b01      	cmp	r3, #1
 8005398:	d103      	bne.n	80053a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fe fc4c 	bl	8003c38 <vPortFree>
	}
 80053a0:	e00e      	b.n	80053c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d009      	beq.n	80053c0 <prvDeleteTCB+0x54>
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e7fe      	b.n	80053be <prvDeleteTCB+0x52>
	}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ce:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <prvResetNextTaskUnblockTime+0x40>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <prvResetNextTaskUnblockTime+0x14>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <prvResetNextTaskUnblockTime+0x16>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053e2:	4b0a      	ldr	r3, [pc, #40]	; (800540c <prvResetNextTaskUnblockTime+0x44>)
 80053e4:	f04f 32ff 	mov.w	r2, #4294967295
 80053e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053ea:	e008      	b.n	80053fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <prvResetNextTaskUnblockTime+0x40>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	4a04      	ldr	r2, [pc, #16]	; (800540c <prvResetNextTaskUnblockTime+0x44>)
 80053fc:	6013      	str	r3, [r2, #0]
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr
 8005408:	20001794 	.word	0x20001794
 800540c:	200017fc 	.word	0x200017fc

08005410 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <xTaskGetSchedulerState+0x34>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d102      	bne.n	8005424 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800541e:	2301      	movs	r3, #1
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	e008      	b.n	8005436 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005424:	4b08      	ldr	r3, [pc, #32]	; (8005448 <xTaskGetSchedulerState+0x38>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800542c:	2302      	movs	r3, #2
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	e001      	b.n	8005436 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005432:	2300      	movs	r3, #0
 8005434:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005436:	687b      	ldr	r3, [r7, #4]
	}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	200017e8 	.word	0x200017e8
 8005448:	20001804 	.word	0x20001804

0800544c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d054      	beq.n	800550c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005462:	4b2d      	ldr	r3, [pc, #180]	; (8005518 <xTaskPriorityDisinherit+0xcc>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	429a      	cmp	r2, r3
 800546a:	d009      	beq.n	8005480 <xTaskPriorityDisinherit+0x34>
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	e7fe      	b.n	800547e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005484:	2b00      	cmp	r3, #0
 8005486:	d109      	bne.n	800549c <xTaskPriorityDisinherit+0x50>
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	e7fe      	b.n	800549a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a0:	1e5a      	subs	r2, r3, #1
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d02c      	beq.n	800550c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d128      	bne.n	800550c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	3304      	adds	r3, #4
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fe f8ec 	bl	800369c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054dc:	4b0f      	ldr	r3, [pc, #60]	; (800551c <xTaskPriorityDisinherit+0xd0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d903      	bls.n	80054ec <xTaskPriorityDisinherit+0xa0>
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	4a0c      	ldr	r2, [pc, #48]	; (800551c <xTaskPriorityDisinherit+0xd0>)
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4a09      	ldr	r2, [pc, #36]	; (8005520 <xTaskPriorityDisinherit+0xd4>)
 80054fa:	441a      	add	r2, r3
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	3304      	adds	r3, #4
 8005500:	4619      	mov	r1, r3
 8005502:	4610      	mov	r0, r2
 8005504:	f7fe f86f 	bl	80035e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005508:	2301      	movs	r3, #1
 800550a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800550c:	697b      	ldr	r3, [r7, #20]
	}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20001308 	.word	0x20001308
 800551c:	200017e4 	.word	0x200017e4
 8005520:	2000130c 	.word	0x2000130c

08005524 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800552e:	4b21      	ldr	r3, [pc, #132]	; (80055b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005534:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3304      	adds	r3, #4
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe f8ae 	bl	800369c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d10a      	bne.n	800555e <prvAddCurrentTaskToDelayedList+0x3a>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800554e:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3304      	adds	r3, #4
 8005554:	4619      	mov	r1, r3
 8005556:	4819      	ldr	r0, [pc, #100]	; (80055bc <prvAddCurrentTaskToDelayedList+0x98>)
 8005558:	f7fe f845 	bl	80035e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800555c:	e026      	b.n	80055ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4413      	add	r3, r2
 8005564:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005566:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	429a      	cmp	r2, r3
 8005574:	d209      	bcs.n	800558a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005576:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3304      	adds	r3, #4
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f7fe f852 	bl	800362c <vListInsert>
}
 8005588:	e010      	b.n	80055ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800558a:	4b0e      	ldr	r3, [pc, #56]	; (80055c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f7fe f848 	bl	800362c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800559c:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d202      	bcs.n	80055ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80055a6:	4a08      	ldr	r2, [pc, #32]	; (80055c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	6013      	str	r3, [r2, #0]
}
 80055ac:	bf00      	nop
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	200017e0 	.word	0x200017e0
 80055b8:	20001308 	.word	0x20001308
 80055bc:	200017c8 	.word	0x200017c8
 80055c0:	20001798 	.word	0x20001798
 80055c4:	20001794 	.word	0x20001794
 80055c8:	200017fc 	.word	0x200017fc

080055cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80055d6:	f000 fac3 	bl	8005b60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80055da:	4b1c      	ldr	r3, [pc, #112]	; (800564c <xTimerCreateTimerTask+0x80>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d021      	beq.n	8005626 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80055ea:	1d3a      	adds	r2, r7, #4
 80055ec:	f107 0108 	add.w	r1, r7, #8
 80055f0:	f107 030c 	add.w	r3, r7, #12
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fd ffb1 	bl	800355c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	9202      	str	r2, [sp, #8]
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	2302      	movs	r3, #2
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	2300      	movs	r3, #0
 800560a:	460a      	mov	r2, r1
 800560c:	4910      	ldr	r1, [pc, #64]	; (8005650 <xTimerCreateTimerTask+0x84>)
 800560e:	4811      	ldr	r0, [pc, #68]	; (8005654 <xTimerCreateTimerTask+0x88>)
 8005610:	f7ff f8f8 	bl	8004804 <xTaskCreateStatic>
 8005614:	4602      	mov	r2, r0
 8005616:	4b10      	ldr	r3, [pc, #64]	; (8005658 <xTimerCreateTimerTask+0x8c>)
 8005618:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800561a:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <xTimerCreateTimerTask+0x8c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005622:	2301      	movs	r3, #1
 8005624:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d109      	bne.n	8005640 <xTimerCreateTimerTask+0x74>
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	e7fe      	b.n	800563e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005640:	697b      	ldr	r3, [r7, #20]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20001838 	.word	0x20001838
 8005650:	08005ce8 	.word	0x08005ce8
 8005654:	08005775 	.word	0x08005775
 8005658:	2000183c 	.word	0x2000183c

0800565c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08a      	sub	sp, #40	; 0x28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800566a:	2300      	movs	r3, #0
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d109      	bne.n	8005688 <xTimerGenericCommand+0x2c>
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	623b      	str	r3, [r7, #32]
 8005686:	e7fe      	b.n	8005686 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005688:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <xTimerGenericCommand+0x94>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d02a      	beq.n	80056e6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b05      	cmp	r3, #5
 80056a0:	dc18      	bgt.n	80056d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80056a2:	f7ff feb5 	bl	8005410 <xTaskGetSchedulerState>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d109      	bne.n	80056c0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80056ac:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <xTimerGenericCommand+0x94>)
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	f107 0110 	add.w	r1, r7, #16
 80056b4:	2300      	movs	r3, #0
 80056b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b8:	f7fe fcce 	bl	8004058 <xQueueGenericSend>
 80056bc:	6278      	str	r0, [r7, #36]	; 0x24
 80056be:	e012      	b.n	80056e6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <xTimerGenericCommand+0x94>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	f107 0110 	add.w	r1, r7, #16
 80056c8:	2300      	movs	r3, #0
 80056ca:	2200      	movs	r2, #0
 80056cc:	f7fe fcc4 	bl	8004058 <xQueueGenericSend>
 80056d0:	6278      	str	r0, [r7, #36]	; 0x24
 80056d2:	e008      	b.n	80056e6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <xTimerGenericCommand+0x94>)
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	f107 0110 	add.w	r1, r7, #16
 80056dc:	2300      	movs	r3, #0
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	f7fe fdb4 	bl	800424c <xQueueGenericSendFromISR>
 80056e4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3728      	adds	r7, #40	; 0x28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20001838 	.word	0x20001838

080056f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056fe:	4b1c      	ldr	r3, [pc, #112]	; (8005770 <prvProcessExpiredTimer+0x7c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	3304      	adds	r3, #4
 800570c:	4618      	mov	r0, r3
 800570e:	f7fd ffc5 	bl	800369c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d121      	bne.n	800575e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	18d1      	adds	r1, r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	6978      	ldr	r0, [r7, #20]
 8005728:	f000 f8c8 	bl	80058bc <prvInsertTimerInActiveList>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d015      	beq.n	800575e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005732:	2300      	movs	r3, #0
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	2300      	movs	r3, #0
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	2100      	movs	r1, #0
 800573c:	6978      	ldr	r0, [r7, #20]
 800573e:	f7ff ff8d 	bl	800565c <xTimerGenericCommand>
 8005742:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <prvProcessExpiredTimer+0x6a>
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	e7fe      	b.n	800575c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	6978      	ldr	r0, [r7, #20]
 8005764:	4798      	blx	r3
}
 8005766:	bf00      	nop
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20001830 	.word	0x20001830

08005774 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800577c:	f107 0308 	add.w	r3, r7, #8
 8005780:	4618      	mov	r0, r3
 8005782:	f000 f857 	bl	8005834 <prvGetNextExpireTime>
 8005786:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4619      	mov	r1, r3
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f803 	bl	8005798 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005792:	f000 f8d5 	bl	8005940 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005796:	e7f1      	b.n	800577c <prvTimerTask+0x8>

08005798 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80057a2:	f7ff fa5b 	bl	8004c5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057a6:	f107 0308 	add.w	r3, r7, #8
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 f866 	bl	800587c <prvSampleTimeNow>
 80057b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d130      	bne.n	800581a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <prvProcessTimerOrBlockTask+0x3c>
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d806      	bhi.n	80057d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80057c6:	f7ff fa57 	bl	8004c78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80057ca:	68f9      	ldr	r1, [r7, #12]
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff ff91 	bl	80056f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80057d2:	e024      	b.n	800581e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <prvProcessTimerOrBlockTask+0x90>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	bf0c      	ite	eq
 80057e4:	2301      	moveq	r3, #1
 80057e6:	2300      	movne	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80057ec:	4b0f      	ldr	r3, [pc, #60]	; (800582c <prvProcessTimerOrBlockTask+0x94>)
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	4619      	mov	r1, r3
 80057fa:	f7fe ffcf 	bl	800479c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80057fe:	f7ff fa3b 	bl	8004c78 <xTaskResumeAll>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005808:	4b09      	ldr	r3, [pc, #36]	; (8005830 <prvProcessTimerOrBlockTask+0x98>)
 800580a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	f3bf 8f6f 	isb	sy
}
 8005818:	e001      	b.n	800581e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800581a:	f7ff fa2d 	bl	8004c78 <xTaskResumeAll>
}
 800581e:	bf00      	nop
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20001834 	.word	0x20001834
 800582c:	20001838 	.word	0x20001838
 8005830:	e000ed04 	.word	0xe000ed04

08005834 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800583c:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <prvGetNextExpireTime+0x44>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	bf0c      	ite	eq
 8005846:	2301      	moveq	r3, #1
 8005848:	2300      	movne	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	461a      	mov	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800585a:	4b07      	ldr	r3, [pc, #28]	; (8005878 <prvGetNextExpireTime+0x44>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e001      	b.n	800586a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800586a:	68fb      	ldr	r3, [r7, #12]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20001830 	.word	0x20001830

0800587c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005884:	f7ff fa94 	bl	8004db0 <xTaskGetTickCount>
 8005888:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <prvSampleTimeNow+0x3c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	429a      	cmp	r2, r3
 8005892:	d205      	bcs.n	80058a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005894:	f000 f904 	bl	8005aa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	e002      	b.n	80058a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80058a6:	4a04      	ldr	r2, [pc, #16]	; (80058b8 <prvSampleTimeNow+0x3c>)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80058ac:	68fb      	ldr	r3, [r7, #12]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20001840 	.word	0x20001840

080058bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d812      	bhi.n	8005908 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	1ad2      	subs	r2, r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d302      	bcc.n	80058f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80058f0:	2301      	movs	r3, #1
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	e01b      	b.n	800592e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <prvInsertTimerInActiveList+0x7c>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3304      	adds	r3, #4
 80058fe:	4619      	mov	r1, r3
 8005900:	4610      	mov	r0, r2
 8005902:	f7fd fe93 	bl	800362c <vListInsert>
 8005906:	e012      	b.n	800592e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d206      	bcs.n	800591e <prvInsertTimerInActiveList+0x62>
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d302      	bcc.n	800591e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005918:	2301      	movs	r3, #1
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e007      	b.n	800592e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800591e:	4b07      	ldr	r3, [pc, #28]	; (800593c <prvInsertTimerInActiveList+0x80>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3304      	adds	r3, #4
 8005926:	4619      	mov	r1, r3
 8005928:	4610      	mov	r0, r2
 800592a:	f7fd fe7f 	bl	800362c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800592e:	697b      	ldr	r3, [r7, #20]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20001834 	.word	0x20001834
 800593c:	20001830 	.word	0x20001830

08005940 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08e      	sub	sp, #56	; 0x38
 8005944:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005946:	e099      	b.n	8005a7c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	da17      	bge.n	800597e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800594e:	1d3b      	adds	r3, r7, #4
 8005950:	3304      	adds	r3, #4
 8005952:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <prvProcessReceivedCommands+0x2e>
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	e7fe      	b.n	800596c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005974:	6850      	ldr	r0, [r2, #4]
 8005976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005978:	6892      	ldr	r2, [r2, #8]
 800597a:	4611      	mov	r1, r2
 800597c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	db7b      	blt.n	8005a7c <prvProcessReceivedCommands+0x13c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	3304      	adds	r3, #4
 8005994:	4618      	mov	r0, r3
 8005996:	f7fd fe81 	bl	800369c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800599a:	463b      	mov	r3, r7
 800599c:	4618      	mov	r0, r3
 800599e:	f7ff ff6d 	bl	800587c <prvSampleTimeNow>
 80059a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b09      	cmp	r3, #9
 80059a8:	d867      	bhi.n	8005a7a <prvProcessReceivedCommands+0x13a>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <prvProcessReceivedCommands+0x70>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059d9 	.word	0x080059d9
 80059b4:	080059d9 	.word	0x080059d9
 80059b8:	080059d9 	.word	0x080059d9
 80059bc:	08005a7d 	.word	0x08005a7d
 80059c0:	08005a33 	.word	0x08005a33
 80059c4:	08005a69 	.word	0x08005a69
 80059c8:	080059d9 	.word	0x080059d9
 80059cc:	080059d9 	.word	0x080059d9
 80059d0:	08005a7d 	.word	0x08005a7d
 80059d4:	08005a33 	.word	0x08005a33
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	18d1      	adds	r1, r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e6:	f7ff ff69 	bl	80058bc <prvInsertTimerInActiveList>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d045      	beq.n	8005a7c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059f6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d13d      	bne.n	8005a7c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	441a      	add	r2, r3
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2100      	movs	r1, #0
 8005a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a12:	f7ff fe23 	bl	800565c <xTimerGenericCommand>
 8005a16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d12e      	bne.n	8005a7c <prvProcessReceivedCommands+0x13c>
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	61bb      	str	r3, [r7, #24]
 8005a30:	e7fe      	b.n	8005a30 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <prvProcessReceivedCommands+0x114>
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	e7fe      	b.n	8005a52 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	699a      	ldr	r2, [r3, #24]
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	18d1      	adds	r1, r2, r3
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a62:	f7ff ff2b 	bl	80058bc <prvInsertTimerInActiveList>
					break;
 8005a66:	e009      	b.n	8005a7c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a74:	f7fe f8e0 	bl	8003c38 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a78:	e000      	b.n	8005a7c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
 8005a7a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a7c:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <prvProcessReceivedCommands+0x15c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	1d39      	adds	r1, r7, #4
 8005a82:	2200      	movs	r2, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fe fc75 	bl	8004374 <xQueueReceive>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f47f af5b 	bne.w	8005948 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005a92:	bf00      	nop
 8005a94:	3730      	adds	r7, #48	; 0x30
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20001838 	.word	0x20001838

08005aa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005aa6:	e044      	b.n	8005b32 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005aa8:	4b2b      	ldr	r3, [pc, #172]	; (8005b58 <prvSwitchTimerLists+0xb8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ab2:	4b29      	ldr	r3, [pc, #164]	; (8005b58 <prvSwitchTimerLists+0xb8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fd fdeb 	bl	800369c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	6938      	ldr	r0, [r7, #16]
 8005acc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d12d      	bne.n	8005b32 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	4413      	add	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d90e      	bls.n	8005b06 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005af4:	4b18      	ldr	r3, [pc, #96]	; (8005b58 <prvSwitchTimerLists+0xb8>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	3304      	adds	r3, #4
 8005afc:	4619      	mov	r1, r3
 8005afe:	4610      	mov	r0, r2
 8005b00:	f7fd fd94 	bl	800362c <vListInsert>
 8005b04:	e015      	b.n	8005b32 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b06:	2300      	movs	r3, #0
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	2100      	movs	r1, #0
 8005b10:	6938      	ldr	r0, [r7, #16]
 8005b12:	f7ff fda3 	bl	800565c <xTimerGenericCommand>
 8005b16:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <prvSwitchTimerLists+0x92>
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	e7fe      	b.n	8005b30 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <prvSwitchTimerLists+0xb8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1b5      	bne.n	8005aa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <prvSwitchTimerLists+0xb8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b42:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <prvSwitchTimerLists+0xbc>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a04      	ldr	r2, [pc, #16]	; (8005b58 <prvSwitchTimerLists+0xb8>)
 8005b48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b4a:	4a04      	ldr	r2, [pc, #16]	; (8005b5c <prvSwitchTimerLists+0xbc>)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6013      	str	r3, [r2, #0]
}
 8005b50:	bf00      	nop
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20001830 	.word	0x20001830
 8005b5c:	20001834 	.word	0x20001834

08005b60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b66:	f7fd feaf 	bl	80038c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b6a:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <prvCheckForValidListAndQueue+0x60>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d120      	bne.n	8005bb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b72:	4814      	ldr	r0, [pc, #80]	; (8005bc4 <prvCheckForValidListAndQueue+0x64>)
 8005b74:	f7fd fd0c 	bl	8003590 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b78:	4813      	ldr	r0, [pc, #76]	; (8005bc8 <prvCheckForValidListAndQueue+0x68>)
 8005b7a:	f7fd fd09 	bl	8003590 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b7e:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <prvCheckForValidListAndQueue+0x6c>)
 8005b80:	4a10      	ldr	r2, [pc, #64]	; (8005bc4 <prvCheckForValidListAndQueue+0x64>)
 8005b82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b84:	4b12      	ldr	r3, [pc, #72]	; (8005bd0 <prvCheckForValidListAndQueue+0x70>)
 8005b86:	4a10      	ldr	r2, [pc, #64]	; (8005bc8 <prvCheckForValidListAndQueue+0x68>)
 8005b88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	4b11      	ldr	r3, [pc, #68]	; (8005bd4 <prvCheckForValidListAndQueue+0x74>)
 8005b90:	4a11      	ldr	r2, [pc, #68]	; (8005bd8 <prvCheckForValidListAndQueue+0x78>)
 8005b92:	2110      	movs	r1, #16
 8005b94:	200a      	movs	r0, #10
 8005b96:	f7fe f9c9 	bl	8003f2c <xQueueGenericCreateStatic>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <prvCheckForValidListAndQueue+0x60>)
 8005b9e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <prvCheckForValidListAndQueue+0x60>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ba8:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <prvCheckForValidListAndQueue+0x60>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	490b      	ldr	r1, [pc, #44]	; (8005bdc <prvCheckForValidListAndQueue+0x7c>)
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe fdcc 	bl	800474c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bb4:	f7fd feb6 	bl	8003924 <vPortExitCritical>
}
 8005bb8:	bf00      	nop
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20001838 	.word	0x20001838
 8005bc4:	20001808 	.word	0x20001808
 8005bc8:	2000181c 	.word	0x2000181c
 8005bcc:	20001830 	.word	0x20001830
 8005bd0:	20001834 	.word	0x20001834
 8005bd4:	200018e4 	.word	0x200018e4
 8005bd8:	20001844 	.word	0x20001844
 8005bdc:	08005cf0 	.word	0x08005cf0

08005be0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005be0:	480c      	ldr	r0, [pc, #48]	; (8005c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005be2:	490d      	ldr	r1, [pc, #52]	; (8005c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005be4:	4a0d      	ldr	r2, [pc, #52]	; (8005c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005be8:	e002      	b.n	8005bf0 <LoopCopyDataInit>

08005bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005bee:	3304      	adds	r3, #4

08005bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005bf4:	d3f9      	bcc.n	8005bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005bf6:	4a0a      	ldr	r2, [pc, #40]	; (8005c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005bf8:	4c0a      	ldr	r4, [pc, #40]	; (8005c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005bfc:	e001      	b.n	8005c02 <LoopFillZerobss>

08005bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c00:	3204      	adds	r2, #4

08005c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c04:	d3fb      	bcc.n	8005bfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005c06:	f7fa fe77 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c0a:	f000 f80f 	bl	8005c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005c0e:	f7fa fa9f 	bl	8000150 <main>
  bx lr
 8005c12:	4770      	bx	lr
  ldr r0, =_sdata
 8005c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c18:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8005c1c:	08005d60 	.word	0x08005d60
  ldr r2, =_sbss
 8005c20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8005c24:	20001a84 	.word	0x20001a84

08005c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005c28:	e7fe      	b.n	8005c28 <ADC1_2_IRQHandler>
	...

08005c2c <__libc_init_array>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	2500      	movs	r5, #0
 8005c30:	4e0c      	ldr	r6, [pc, #48]	; (8005c64 <__libc_init_array+0x38>)
 8005c32:	4c0d      	ldr	r4, [pc, #52]	; (8005c68 <__libc_init_array+0x3c>)
 8005c34:	1ba4      	subs	r4, r4, r6
 8005c36:	10a4      	asrs	r4, r4, #2
 8005c38:	42a5      	cmp	r5, r4
 8005c3a:	d109      	bne.n	8005c50 <__libc_init_array+0x24>
 8005c3c:	f000 f82e 	bl	8005c9c <_init>
 8005c40:	2500      	movs	r5, #0
 8005c42:	4e0a      	ldr	r6, [pc, #40]	; (8005c6c <__libc_init_array+0x40>)
 8005c44:	4c0a      	ldr	r4, [pc, #40]	; (8005c70 <__libc_init_array+0x44>)
 8005c46:	1ba4      	subs	r4, r4, r6
 8005c48:	10a4      	asrs	r4, r4, #2
 8005c4a:	42a5      	cmp	r5, r4
 8005c4c:	d105      	bne.n	8005c5a <__libc_init_array+0x2e>
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c54:	4798      	blx	r3
 8005c56:	3501      	adds	r5, #1
 8005c58:	e7ee      	b.n	8005c38 <__libc_init_array+0xc>
 8005c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c5e:	4798      	blx	r3
 8005c60:	3501      	adds	r5, #1
 8005c62:	e7f2      	b.n	8005c4a <__libc_init_array+0x1e>
 8005c64:	08005d58 	.word	0x08005d58
 8005c68:	08005d58 	.word	0x08005d58
 8005c6c:	08005d58 	.word	0x08005d58
 8005c70:	08005d5c 	.word	0x08005d5c

08005c74 <memcpy>:
 8005c74:	b510      	push	{r4, lr}
 8005c76:	1e43      	subs	r3, r0, #1
 8005c78:	440a      	add	r2, r1
 8005c7a:	4291      	cmp	r1, r2
 8005c7c:	d100      	bne.n	8005c80 <memcpy+0xc>
 8005c7e:	bd10      	pop	{r4, pc}
 8005c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c88:	e7f7      	b.n	8005c7a <memcpy+0x6>

08005c8a <memset>:
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4402      	add	r2, r0
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d100      	bne.n	8005c94 <memset+0xa>
 8005c92:	4770      	bx	lr
 8005c94:	f803 1b01 	strb.w	r1, [r3], #1
 8005c98:	e7f9      	b.n	8005c8e <memset+0x4>
	...

08005c9c <_init>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	bf00      	nop
 8005ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca2:	bc08      	pop	{r3}
 8005ca4:	469e      	mov	lr, r3
 8005ca6:	4770      	bx	lr

08005ca8 <_fini>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	bf00      	nop
 8005cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cae:	bc08      	pop	{r3}
 8005cb0:	469e      	mov	lr, r3
 8005cb2:	4770      	bx	lr
