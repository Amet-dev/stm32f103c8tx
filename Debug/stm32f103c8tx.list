
stm32f103c8tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008174  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008400  08008400  00018400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008404  08008404  00018404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08008408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001bdc  20000010  08008418  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001bec  08008418  00021bec  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b4d9  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000366f  00000000  00000000  0003b512  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000015d8  00000000  00000000  0003eb88  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c465  00000000  00000000  00040160  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00007592  00000000  00000000  0004c5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  00053b57  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00001468  00000000  00000000  00053bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005b1c  00000000  00000000  00055040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	0800826c 	.word	0x0800826c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	0800826c 	.word	0x0800826c

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fc20 	bl	8000998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f852 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f996 	bl	800048c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000160:	f000 f8e8 	bl	8000334 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f968 	bl	8000438 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000168:	f000 f8a6 	bl	80002b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ModbusH.uiModbusType = SLAVE_RTU;
 800016c:	4b1b      	ldr	r3, [pc, #108]	; (80001dc <main+0x8c>)
 800016e:	2203      	movs	r2, #3
 8000170:	701a      	strb	r2, [r3, #0]
  ModbusH.port =  &huart1;
 8000172:	4b1a      	ldr	r3, [pc, #104]	; (80001dc <main+0x8c>)
 8000174:	4a1a      	ldr	r2, [pc, #104]	; (80001e0 <main+0x90>)
 8000176:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 01; //Modbus slave ID
 8000178:	4b18      	ldr	r3, [pc, #96]	; (80001dc <main+0x8c>)
 800017a:	2201      	movs	r2, #1
 800017c:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 800017e:	4b17      	ldr	r3, [pc, #92]	; (80001dc <main+0x8c>)
 8000180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000184:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
  ModbusH.EN_Port = NULL;
 8000188:	4b14      	ldr	r3, [pc, #80]	; (80001dc <main+0x8c>)
 800018a:	2200      	movs	r2, #0
 800018c:	60da      	str	r2, [r3, #12]
  ModbusH.u32overTime = 0;
 800018e:	4b13      	ldr	r3, [pc, #76]	; (80001dc <main+0x8c>)
 8000190:	2200      	movs	r2, #0
 8000192:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  ModbusH.au16regs = ModbusDATA;
 8000196:	4b11      	ldr	r3, [pc, #68]	; (80001dc <main+0x8c>)
 8000198:	4a12      	ldr	r2, [pc, #72]	; (80001e4 <main+0x94>)
 800019a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 800019e:	4b0f      	ldr	r3, [pc, #60]	; (80001dc <main+0x8c>)
 80001a0:	2208      	movs	r2, #8
 80001a2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  //Initialize Modbus library
  ModbusInit(&ModbusH);
 80001a6:	480d      	ldr	r0, [pc, #52]	; (80001dc <main+0x8c>)
 80001a8:	f003 fa44 	bl	8003634 <ModbusInit>
  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 80001ac:	480b      	ldr	r0, [pc, #44]	; (80001dc <main+0x8c>)
 80001ae:	f003 fae5 	bl	800377c <ModbusStart>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001b2:	f004 fd17 	bl	8004be4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001b6:	4a0c      	ldr	r2, [pc, #48]	; (80001e8 <main+0x98>)
 80001b8:	2100      	movs	r1, #0
 80001ba:	480c      	ldr	r0, [pc, #48]	; (80001ec <main+0x9c>)
 80001bc:	f004 fd78 	bl	8004cb0 <osThreadNew>
 80001c0:	4602      	mov	r2, r0
 80001c2:	4b0b      	ldr	r3, [pc, #44]	; (80001f0 <main+0xa0>)
 80001c4:	601a      	str	r2, [r3, #0]

  /* creation of myTaskGpio */
  myTaskGpioHandle = osThreadNew(StartTask02, NULL, &myTaskGpio_attributes);
 80001c6:	4a0b      	ldr	r2, [pc, #44]	; (80001f4 <main+0xa4>)
 80001c8:	2100      	movs	r1, #0
 80001ca:	480b      	ldr	r0, [pc, #44]	; (80001f8 <main+0xa8>)
 80001cc:	f004 fd70 	bl	8004cb0 <osThreadNew>
 80001d0:	4602      	mov	r2, r0
 80001d2:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <main+0xac>)
 80001d4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001d6:	f004 fd37 	bl	8004c48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001da:	e7fe      	b.n	80001da <main+0x8a>
 80001dc:	20001944 	.word	0x20001944
 80001e0:	20001b18 	.word	0x20001b18
 80001e4:	20001ad8 	.word	0x20001ad8
 80001e8:	08008328 	.word	0x08008328
 80001ec:	080005c9 	.word	0x080005c9
 80001f0:	20001940 	.word	0x20001940
 80001f4:	0800834c 	.word	0x0800834c
 80001f8:	080005d9 	.word	0x080005d9
 80001fc:	20001b5c 	.word	0x20001b5c

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b094      	sub	sp, #80	; 0x50
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f008 f823 	bl	800825a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000230:	2301      	movs	r3, #1
 8000232:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000250:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000256:	4618      	mov	r0, r3
 8000258:	f001 f8e8 	bl	800142c <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000262:	f000 f9f2 	bl	800064a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026a:	2302      	movs	r3, #2
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000276:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	2102      	movs	r1, #2
 8000282:	4618      	mov	r0, r3
 8000284:	f001 fb52 	bl	800192c <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800028e:	f000 f9dc 	bl	800064a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000292:	2302      	movs	r3, #2
 8000294:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800029a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fd10 	bl	8001cc4 <HAL_RCCEx_PeriphCLKConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002aa:	f000 f9ce 	bl	800064a <Error_Handler>
  }
}
 80002ae:	bf00      	nop
 80002b0:	3750      	adds	r7, #80	; 0x50
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_ADC1_Init+0x74>)
 80002ca:	4a19      	ldr	r2, [pc, #100]	; (8000330 <MX_ADC1_Init+0x78>)
 80002cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_ADC1_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <MX_ADC1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002da:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_ADC1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <MX_ADC1_Init+0x74>)
 80002e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e8:	4b10      	ldr	r3, [pc, #64]	; (800032c <MX_ADC1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_ADC1_Init+0x74>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002f4:	480d      	ldr	r0, [pc, #52]	; (800032c <MX_ADC1_Init+0x74>)
 80002f6:	f000 fb81 	bl	80009fc <HAL_ADC_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000300:	f000 f9a3 	bl	800064a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000304:	2300      	movs	r3, #0
 8000306:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000308:	2301      	movs	r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4619      	mov	r1, r3
 8000314:	4805      	ldr	r0, [pc, #20]	; (800032c <MX_ADC1_Init+0x74>)
 8000316:	f000 fc49 	bl	8000bac <HAL_ADC_ConfigChannel>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000320:	f000 f993 	bl	800064a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20001ae8 	.word	0x20001ae8
 8000330:	40012400 	.word	0x40012400

08000334 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b08e      	sub	sp, #56	; 0x38
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800033a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000348:	f107 0320 	add.w	r3, r7, #32
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
 8000360:	615a      	str	r2, [r3, #20]
 8000362:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000364:	4b32      	ldr	r3, [pc, #200]	; (8000430 <MX_TIM4_Init+0xfc>)
 8000366:	4a33      	ldr	r2, [pc, #204]	; (8000434 <MX_TIM4_Init+0x100>)
 8000368:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800036a:	4b31      	ldr	r3, [pc, #196]	; (8000430 <MX_TIM4_Init+0xfc>)
 800036c:	2200      	movs	r2, #0
 800036e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000370:	4b2f      	ldr	r3, [pc, #188]	; (8000430 <MX_TIM4_Init+0xfc>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000376:	4b2e      	ldr	r3, [pc, #184]	; (8000430 <MX_TIM4_Init+0xfc>)
 8000378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800037c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037e:	4b2c      	ldr	r3, [pc, #176]	; (8000430 <MX_TIM4_Init+0xfc>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000384:	4b2a      	ldr	r3, [pc, #168]	; (8000430 <MX_TIM4_Init+0xfc>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800038a:	4829      	ldr	r0, [pc, #164]	; (8000430 <MX_TIM4_Init+0xfc>)
 800038c:	f001 fd50 	bl	8001e30 <HAL_TIM_Base_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000396:	f000 f958 	bl	800064a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800039e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80003a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003a4:	4619      	mov	r1, r3
 80003a6:	4822      	ldr	r0, [pc, #136]	; (8000430 <MX_TIM4_Init+0xfc>)
 80003a8:	f002 f802 	bl	80023b0 <HAL_TIM_ConfigClockSource>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80003b2:	f000 f94a 	bl	800064a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80003b6:	481e      	ldr	r0, [pc, #120]	; (8000430 <MX_TIM4_Init+0xfc>)
 80003b8:	f001 fddc 	bl	8001f74 <HAL_TIM_PWM_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80003c2:	f000 f942 	bl	800064a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c6:	2300      	movs	r3, #0
 80003c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80003ce:	f107 0320 	add.w	r3, r7, #32
 80003d2:	4619      	mov	r1, r3
 80003d4:	4816      	ldr	r0, [pc, #88]	; (8000430 <MX_TIM4_Init+0xfc>)
 80003d6:	f002 fb47 	bl	8002a68 <HAL_TIMEx_MasterConfigSynchronization>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80003e0:	f000 f933 	bl	800064a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003e4:	2360      	movs	r3, #96	; 0x60
 80003e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2204      	movs	r2, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	480d      	ldr	r0, [pc, #52]	; (8000430 <MX_TIM4_Init+0xfc>)
 80003fc:	f001 ff1a 	bl	8002234 <HAL_TIM_PWM_ConfigChannel>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000406:	f000 f920 	bl	800064a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2208      	movs	r2, #8
 800040e:	4619      	mov	r1, r3
 8000410:	4807      	ldr	r0, [pc, #28]	; (8000430 <MX_TIM4_Init+0xfc>)
 8000412:	f001 ff0f 	bl	8002234 <HAL_TIM_PWM_ConfigChannel>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800041c:	f000 f915 	bl	800064a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000420:	4803      	ldr	r0, [pc, #12]	; (8000430 <MX_TIM4_Init+0xfc>)
 8000422:	f000 f9a9 	bl	8000778 <HAL_TIM_MspPostInit>

}
 8000426:	bf00      	nop
 8000428:	3738      	adds	r7, #56	; 0x38
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20001a90 	.word	0x20001a90
 8000434:	40000800 	.word	0x40000800

08000438 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 800043e:	4a12      	ldr	r2, [pc, #72]	; (8000488 <MX_USART1_UART_Init+0x50>)
 8000440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000448:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 800045e:	220c      	movs	r2, #12
 8000460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000470:	f002 fb6a 	bl	8002b48 <HAL_UART_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800047a:	f000 f8e6 	bl	800064a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20001b18 	.word	0x20001b18
 8000488:	40013800 	.word	0x40013800

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a0:	4a45      	ldr	r2, [pc, #276]	; (80005b8 <MX_GPIO_Init+0x12c>)
 80004a2:	4b45      	ldr	r3, [pc, #276]	; (80005b8 <MX_GPIO_Init+0x12c>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f043 0310 	orr.w	r3, r3, #16
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b42      	ldr	r3, [pc, #264]	; (80005b8 <MX_GPIO_Init+0x12c>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0310 	and.w	r3, r3, #16
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b8:	4a3f      	ldr	r2, [pc, #252]	; (80005b8 <MX_GPIO_Init+0x12c>)
 80004ba:	4b3f      	ldr	r3, [pc, #252]	; (80005b8 <MX_GPIO_Init+0x12c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	f043 0320 	orr.w	r3, r3, #32
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b3c      	ldr	r3, [pc, #240]	; (80005b8 <MX_GPIO_Init+0x12c>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0320 	and.w	r3, r3, #32
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d0:	4a39      	ldr	r2, [pc, #228]	; (80005b8 <MX_GPIO_Init+0x12c>)
 80004d2:	4b39      	ldr	r3, [pc, #228]	; (80005b8 <MX_GPIO_Init+0x12c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <MX_GPIO_Init+0x12c>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0304 	and.w	r3, r3, #4
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <MX_GPIO_Init+0x12c>)
 80004ea:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <MX_GPIO_Init+0x12c>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	f043 0308 	orr.w	r3, r3, #8
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <MX_GPIO_Init+0x12c>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0308 	and.w	r3, r3, #8
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000506:	482d      	ldr	r0, [pc, #180]	; (80005bc <MX_GPIO_Init+0x130>)
 8000508:	f000 ff78 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO7_GPIO_Port, DO7_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000512:	482b      	ldr	r0, [pc, #172]	; (80005c0 <MX_GPIO_Init+0x134>)
 8000514:	f000 ff72 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2108      	movs	r1, #8
 800051c:	4829      	ldr	r0, [pc, #164]	; (80005c4 <MX_GPIO_Init+0x138>)
 800051e:	f000 ff6d 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2302      	movs	r3, #2
 8000532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	4619      	mov	r1, r3
 800053a:	4820      	ldr	r0, [pc, #128]	; (80005bc <MX_GPIO_Init+0x130>)
 800053c:	f000 fe04 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI5_Pin DI6_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8000540:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000544:	613b      	str	r3, [r7, #16]
                          |DI5_Pin|DI6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	4619      	mov	r1, r3
 8000554:	481b      	ldr	r0, [pc, #108]	; (80005c4 <MX_GPIO_Init+0x138>)
 8000556:	f000 fdf7 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : DI7_Pin */
  GPIO_InitStruct.Pin = DI7_Pin;
 800055a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DI7_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4814      	ldr	r0, [pc, #80]	; (80005c0 <MX_GPIO_Init+0x134>)
 8000570:	f000 fdea 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : DO7_Pin */
  GPIO_InitStruct.Pin = DO7_Pin;
 8000574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2302      	movs	r3, #2
 8000584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DO7_GPIO_Port, &GPIO_InitStruct);
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	4619      	mov	r1, r3
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <MX_GPIO_Init+0x134>)
 800058e:	f000 fddb 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : DO1_Pin */
  GPIO_InitStruct.Pin = DO1_Pin;
 8000592:	2308      	movs	r3, #8
 8000594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2302      	movs	r3, #2
 80005a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DO1_GPIO_Port, &GPIO_InitStruct);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	4806      	ldr	r0, [pc, #24]	; (80005c4 <MX_GPIO_Init+0x138>)
 80005aa:	f000 fdcd 	bl	8001148 <HAL_GPIO_Init>

}
 80005ae:	bf00      	nop
 80005b0:	3720      	adds	r7, #32
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40011000 	.word	0x40011000
 80005c0:	40010800 	.word	0x40010800
 80005c4:	40010c00 	.word	0x40010c00

080005c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d0:	2001      	movs	r0, #1
 80005d2:	f004 fc17 	bl	8004e04 <osDelay>
 80005d6:	e7fb      	b.n	80005d0 <StartDefaultTask+0x8>

080005d8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    xSemaphoreTake(ModbusH.ModBusSphrHandle , 100);
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <StartTask02+0x4c>)
 80005e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80005e6:	2164      	movs	r1, #100	; 0x64
 80005e8:	4618      	mov	r0, r3
 80005ea:	f005 fe01 	bl	80061f0 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ModbusH.au16regs[0] & 0x1);
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <StartTask02+0x4c>)
 80005f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000604:	4808      	ldr	r0, [pc, #32]	; (8000628 <StartTask02+0x50>)
 8000606:	f000 fef9 	bl	80013fc <HAL_GPIO_WritePin>
	xSemaphoreGive(ModbusH.ModBusSphrHandle);
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <StartTask02+0x4c>)
 800060c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8000610:	2300      	movs	r3, #0
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	f005 fb81 	bl	8005d1c <xQueueGenericSend>
    osDelay(200);
 800061a:	20c8      	movs	r0, #200	; 0xc8
 800061c:	f004 fbf2 	bl	8004e04 <osDelay>
    xSemaphoreTake(ModbusH.ModBusSphrHandle , 100);
 8000620:	e7de      	b.n	80005e0 <StartTask02+0x8>
 8000622:	bf00      	nop
 8000624:	20001944 	.word	0x20001944
 8000628:	40011000 	.word	0x40011000

0800062c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800063c:	d101      	bne.n	8000642 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800063e:	f000 f9c1 	bl	80009c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	e7fe      	b.n	8000650 <Error_Handler+0x6>
	...

08000654 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800065a:	4a18      	ldr	r2, [pc, #96]	; (80006bc <HAL_MspInit+0x68>)
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <HAL_MspInit+0x68>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6193      	str	r3, [r2, #24]
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <HAL_MspInit+0x68>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <HAL_MspInit+0x68>)
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_MspInit+0x68>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067c:	61d3      	str	r3, [r2, #28]
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <HAL_MspInit+0x68>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	210f      	movs	r1, #15
 800068e:	f06f 0001 	mvn.w	r0, #1
 8000692:	f000 fc78 	bl	8000f86 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_MspInit+0x6c>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_MspInit+0x6c>)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010000 	.word	0x40010000

080006c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a14      	ldr	r2, [pc, #80]	; (8000730 <HAL_ADC_MspInit+0x6c>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d121      	bne.n	8000728 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006e4:	4a13      	ldr	r2, [pc, #76]	; (8000734 <HAL_ADC_MspInit+0x70>)
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <HAL_ADC_MspInit+0x70>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_ADC_MspInit+0x70>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <HAL_ADC_MspInit+0x70>)
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <HAL_ADC_MspInit+0x70>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_ADC_MspInit+0x70>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = AI1_Pin|AI2_Pin|AI3_Pin|AI4_Pin
 8000714:	231f      	movs	r3, #31
 8000716:	613b      	str	r3, [r7, #16]
                          |AI5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000718:	2303      	movs	r3, #3
 800071a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <HAL_ADC_MspInit+0x74>)
 8000724:	f000 fd10 	bl	8001148 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40012400 	.word	0x40012400
 8000734:	40021000 	.word	0x40021000
 8000738:	40010800 	.word	0x40010800

0800073c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a09      	ldr	r2, [pc, #36]	; (8000770 <HAL_TIM_Base_MspInit+0x34>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d10b      	bne.n	8000766 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800074e:	4a09      	ldr	r2, [pc, #36]	; (8000774 <HAL_TIM_Base_MspInit+0x38>)
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_TIM_Base_MspInit+0x38>)
 8000752:	69db      	ldr	r3, [r3, #28]
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_TIM_Base_MspInit+0x38>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000766:	bf00      	nop
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	40000800 	.word	0x40000800
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <HAL_TIM_MspPostInit+0x5c>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d118      	bne.n	80007ca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000798:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <HAL_TIM_MspPostInit+0x60>)
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_TIM_MspPostInit+0x60>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f043 0308 	orr.w	r3, r3, #8
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_TIM_MspPostInit+0x60>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = TIM4_DO4_Pin|TIM4_DO5_Pin;
 80007b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <HAL_TIM_MspPostInit+0x64>)
 80007c6:	f000 fcbf 	bl	8001148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80007ca:	bf00      	nop
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40000800 	.word	0x40000800
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010c00 	.word	0x40010c00

080007e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a20      	ldr	r2, [pc, #128]	; (800087c <HAL_UART_MspInit+0x9c>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d139      	bne.n	8000874 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000800:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <HAL_UART_MspInit+0xa0>)
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <HAL_UART_MspInit+0xa0>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <HAL_UART_MspInit+0xa0>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4a19      	ldr	r2, [pc, #100]	; (8000880 <HAL_UART_MspInit+0xa0>)
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <HAL_UART_MspInit+0xa0>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <HAL_UART_MspInit+0xa0>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000834:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	4619      	mov	r1, r3
 8000844:	480f      	ldr	r0, [pc, #60]	; (8000884 <HAL_UART_MspInit+0xa4>)
 8000846:	f000 fc7f 	bl	8001148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800084a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	4619      	mov	r1, r3
 800085e:	4809      	ldr	r0, [pc, #36]	; (8000884 <HAL_UART_MspInit+0xa4>)
 8000860:	f000 fc72 	bl	8001148 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2105      	movs	r1, #5
 8000868:	2025      	movs	r0, #37	; 0x25
 800086a:	f000 fb8c 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800086e:	2025      	movs	r0, #37	; 0x25
 8000870:	f000 fba5 	bl	8000fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000874:	bf00      	nop
 8000876:	3720      	adds	r7, #32
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40013800 	.word	0x40013800
 8000880:	40021000 	.word	0x40021000
 8000884:	40010800 	.word	0x40010800

08000888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	; 0x30
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	201c      	movs	r0, #28
 800089e:	f000 fb72 	bl	8000f86 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008a2:	201c      	movs	r0, #28
 80008a4:	f000 fb8b 	bl	8000fbe <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008a8:	4a20      	ldr	r2, [pc, #128]	; (800092c <HAL_InitTick+0xa4>)
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <HAL_InitTick+0xa4>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	61d3      	str	r3, [r2, #28]
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <HAL_InitTick+0xa4>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c0:	f107 0210 	add.w	r2, r7, #16
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 f9ac 	bl	8001c28 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008d0:	f001 f982 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 80008d4:	4603      	mov	r3, r0
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <HAL_InitTick+0xa8>)
 80008de:	fba2 2303 	umull	r2, r3, r2, r3
 80008e2:	0c9b      	lsrs	r3, r3, #18
 80008e4:	3b01      	subs	r3, #1
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0xac>)
 80008ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <HAL_InitTick+0xac>)
 80008f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008f6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80008f8:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <HAL_InitTick+0xac>)
 80008fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <HAL_InitTick+0xac>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <HAL_InitTick+0xac>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <HAL_InitTick+0xac>)
 800090c:	f001 fa90 	bl	8001e30 <HAL_TIM_Base_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d104      	bne.n	8000920 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000916:	4807      	ldr	r0, [pc, #28]	; (8000934 <HAL_InitTick+0xac>)
 8000918:	f001 fada 	bl	8001ed0 <HAL_TIM_Base_Start_IT>
 800091c:	4603      	mov	r3, r0
 800091e:	e000      	b.n	8000922 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000920:	2301      	movs	r3, #1
}
 8000922:	4618      	mov	r0, r3
 8000924:	3730      	adds	r7, #48	; 0x30
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000
 8000930:	431bde83 	.word	0x431bde83
 8000934:	20001b60 	.word	0x20001b60

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
	...

08000964 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <TIM2_IRQHandler+0x10>)
 800096a:	f001 fb5b 	bl	8002024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20001b60 	.word	0x20001b60

08000978 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <USART1_IRQHandler+0x10>)
 800097e:	f002 f9a5 	bl	8002ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20001b18 	.word	0x20001b18

0800098c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_Init+0x28>)
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_Init+0x28>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 fae1 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff ff6a 	bl	8000888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff fe4e 	bl	8000654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40022000 	.word	0x40022000

080009c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x1c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_IncTick+0x20>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a03      	ldr	r2, [pc, #12]	; (80009e4 <HAL_IncTick+0x20>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20001ba8 	.word	0x20001ba8

080009e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b02      	ldr	r3, [pc, #8]	; (80009f8 <HAL_GetTick+0x10>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	20001ba8 	.word	0x20001ba8

080009fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a04:	2300      	movs	r3, #0
 8000a06:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e0be      	b.n	8000b9c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d109      	bne.n	8000a40 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fe42 	bl	80006c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f9ab 	bl	8000d9c <ADC_ConversionStop_Disable>
 8000a46:	4603      	mov	r3, r0
 8000a48:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a4e:	f003 0310 	and.w	r3, r3, #16
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f040 8099 	bne.w	8000b8a <HAL_ADC_Init+0x18e>
 8000a58:	7dfb      	ldrb	r3, [r7, #23]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f040 8095 	bne.w	8000b8a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a68:	f023 0302 	bic.w	r3, r3, #2
 8000a6c:	f043 0202 	orr.w	r2, r3, #2
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a7c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7b1b      	ldrb	r3, [r3, #12]
 8000a82:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a84:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a94:	d003      	beq.n	8000a9e <HAL_ADC_Init+0xa2>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d102      	bne.n	8000aa4 <HAL_ADC_Init+0xa8>
 8000a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa2:	e000      	b.n	8000aa6 <HAL_ADC_Init+0xaa>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7d1b      	ldrb	r3, [r3, #20]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d119      	bne.n	8000ae8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	7b1b      	ldrb	r3, [r3, #12]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d109      	bne.n	8000ad0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	035a      	lsls	r2, r3, #13
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	e00b      	b.n	8000ae8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad4:	f043 0220 	orr.w	r2, r3, #32
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae0:	f043 0201 	orr.w	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	6852      	ldr	r2, [r2, #4]
 8000af2:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	6899      	ldr	r1, [r3, #8]
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <HAL_ADC_Init+0x1a8>)
 8000b08:	400b      	ands	r3, r1
 8000b0a:	68b9      	ldr	r1, [r7, #8]
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b18:	d003      	beq.n	8000b22 <HAL_ADC_Init+0x126>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d104      	bne.n	8000b2c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	691b      	ldr	r3, [r3, #16]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	051b      	lsls	r3, r3, #20
 8000b2a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b36:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <HAL_ADC_Init+0x1ac>)
 8000b48:	4013      	ands	r3, r2
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d10b      	bne.n	8000b68 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5a:	f023 0303 	bic.w	r3, r3, #3
 8000b5e:	f043 0201 	orr.w	r2, r3, #1
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b66:	e018      	b.n	8000b9a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6c:	f023 0312 	bic.w	r3, r3, #18
 8000b70:	f043 0210 	orr.w	r2, r3, #16
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7c:	f043 0201 	orr.w	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b88:	e007      	b.n	8000b9a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8e:	f043 0210 	orr.w	r2, r3, #16
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	ffe1f7fd 	.word	0xffe1f7fd
 8000ba8:	ff1f0efe 	.word	0xff1f0efe

08000bac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000bac:	b490      	push	{r4, r7}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d101      	bne.n	8000bcc <HAL_ADC_ConfigChannel+0x20>
 8000bc8:	2302      	movs	r3, #2
 8000bca:	e0dc      	b.n	8000d86 <HAL_ADC_ConfigChannel+0x1da>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b06      	cmp	r3, #6
 8000bda:	d81c      	bhi.n	8000c16 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6819      	ldr	r1, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	3b05      	subs	r3, #5
 8000bf2:	221f      	movs	r2, #31
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	4018      	ands	r0, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681c      	ldr	r4, [r3, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	3b05      	subs	r3, #5
 8000c0c:	fa04 f303 	lsl.w	r3, r4, r3
 8000c10:	4303      	orrs	r3, r0
 8000c12:	634b      	str	r3, [r1, #52]	; 0x34
 8000c14:	e03c      	b.n	8000c90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b0c      	cmp	r3, #12
 8000c1c:	d81c      	bhi.n	8000c58 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6819      	ldr	r1, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	3b23      	subs	r3, #35	; 0x23
 8000c34:	221f      	movs	r2, #31
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	4018      	ands	r0, r3
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681c      	ldr	r4, [r3, #0]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3b23      	subs	r3, #35	; 0x23
 8000c4e:	fa04 f303 	lsl.w	r3, r4, r3
 8000c52:	4303      	orrs	r3, r0
 8000c54:	630b      	str	r3, [r1, #48]	; 0x30
 8000c56:	e01b      	b.n	8000c90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6819      	ldr	r1, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3b41      	subs	r3, #65	; 0x41
 8000c6e:	221f      	movs	r2, #31
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	4018      	ands	r0, r3
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681c      	ldr	r4, [r3, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3b41      	subs	r3, #65	; 0x41
 8000c88:	fa04 f303 	lsl.w	r3, r4, r3
 8000c8c:	4303      	orrs	r3, r0
 8000c8e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b09      	cmp	r3, #9
 8000c96:	d91c      	bls.n	8000cd2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6819      	ldr	r1, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	68d8      	ldr	r0, [r3, #12]
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	4413      	add	r3, r2
 8000cac:	3b1e      	subs	r3, #30
 8000cae:	2207      	movs	r2, #7
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4018      	ands	r0, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689c      	ldr	r4, [r3, #8]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3b1e      	subs	r3, #30
 8000cc8:	fa04 f303 	lsl.w	r3, r4, r3
 8000ccc:	4303      	orrs	r3, r0
 8000cce:	60cb      	str	r3, [r1, #12]
 8000cd0:	e019      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6819      	ldr	r1, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6918      	ldr	r0, [r3, #16]
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	2207      	movs	r2, #7
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	4018      	ands	r0, r3
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689c      	ldr	r4, [r3, #8]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	fa04 f303 	lsl.w	r3, r4, r3
 8000d02:	4303      	orrs	r3, r0
 8000d04:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b10      	cmp	r3, #16
 8000d0c:	d003      	beq.n	8000d16 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d12:	2b11      	cmp	r3, #17
 8000d14:	d132      	bne.n	8000d7c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a1d      	ldr	r2, [pc, #116]	; (8000d90 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d125      	bne.n	8000d6c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d126      	bne.n	8000d7c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	6812      	ldr	r2, [r2, #0]
 8000d36:	6892      	ldr	r2, [r2, #8]
 8000d38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d3c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b10      	cmp	r3, #16
 8000d44:	d11a      	bne.n	8000d7c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <HAL_ADC_ConfigChannel+0x1ec>)
 8000d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d50:	0c9a      	lsrs	r2, r3, #18
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d5c:	e002      	b.n	8000d64 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f9      	bne.n	8000d5e <HAL_ADC_ConfigChannel+0x1b2>
 8000d6a:	e007      	b.n	8000d7c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	f043 0220 	orr.w	r2, r3, #32
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc90      	pop	{r4, r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40012400 	.word	0x40012400
 8000d94:	20000000 	.word	0x20000000
 8000d98:	431bde83 	.word	0x431bde83

08000d9c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d12e      	bne.n	8000e14 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	6892      	ldr	r2, [r2, #8]
 8000dc0:	f022 0201 	bic.w	r2, r2, #1
 8000dc4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000dc6:	f7ff fe0f 	bl	80009e8 <HAL_GetTick>
 8000dca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000dcc:	e01b      	b.n	8000e06 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000dce:	f7ff fe0b 	bl	80009e8 <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d914      	bls.n	8000e06 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d10d      	bne.n	8000e06 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dee:	f043 0210 	orr.w	r2, r3, #16
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	f043 0201 	orr.w	r2, r3, #1
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e007      	b.n	8000e16 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d0dc      	beq.n	8000dce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <__NVIC_EnableIRQ+0x34>)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	095b      	lsrs	r3, r3, #5
 8000e9e:	79fa      	ldrb	r2, [r7, #7]
 8000ea0:	f002 021f 	and.w	r2, r2, #31
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	490d      	ldr	r1, [pc, #52]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	4909      	ldr	r1, [pc, #36]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	2201      	movs	r2, #1
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	1e5a      	subs	r2, r3, #1
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	401a      	ands	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f56:	2101      	movs	r1, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	1e59      	subs	r1, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff51 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff66 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ffb4 	bl	8000f10 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff83 	bl	8000ebc <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff59 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d008      	beq.n	8001002 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e020      	b.n	8001044 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	f022 020e 	bic.w	r2, r2, #14
 8001010:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	6812      	ldr	r2, [r2, #0]
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	f022 0201 	bic.w	r2, r2, #1
 8001020:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800102a:	2101      	movs	r1, #1
 800102c:	fa01 f202 	lsl.w	r2, r1, r2
 8001030:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001042:	7bfb      	ldrb	r3, [r7, #15]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
	...

08001050 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001062:	2b02      	cmp	r3, #2
 8001064:	d005      	beq.n	8001072 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2204      	movs	r2, #4
 800106a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	e057      	b.n	8001122 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	f022 020e 	bic.w	r2, r2, #14
 8001080:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	f022 0201 	bic.w	r2, r2, #1
 8001090:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001092:	4a26      	ldr	r2, [pc, #152]	; (800112c <HAL_DMA_Abort_IT+0xdc>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <HAL_DMA_Abort_IT+0xe0>)
 800109c:	4299      	cmp	r1, r3
 800109e:	d02e      	beq.n	80010fe <HAL_DMA_Abort_IT+0xae>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	4b23      	ldr	r3, [pc, #140]	; (8001134 <HAL_DMA_Abort_IT+0xe4>)
 80010a8:	4299      	cmp	r1, r3
 80010aa:	d026      	beq.n	80010fa <HAL_DMA_Abort_IT+0xaa>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <HAL_DMA_Abort_IT+0xe8>)
 80010b4:	4299      	cmp	r1, r3
 80010b6:	d01d      	beq.n	80010f4 <HAL_DMA_Abort_IT+0xa4>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <HAL_DMA_Abort_IT+0xec>)
 80010c0:	4299      	cmp	r1, r3
 80010c2:	d014      	beq.n	80010ee <HAL_DMA_Abort_IT+0x9e>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <HAL_DMA_Abort_IT+0xf0>)
 80010cc:	4299      	cmp	r1, r3
 80010ce:	d00b      	beq.n	80010e8 <HAL_DMA_Abort_IT+0x98>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <HAL_DMA_Abort_IT+0xf4>)
 80010d8:	4299      	cmp	r1, r3
 80010da:	d102      	bne.n	80010e2 <HAL_DMA_Abort_IT+0x92>
 80010dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010e0:	e00e      	b.n	8001100 <HAL_DMA_Abort_IT+0xb0>
 80010e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010e6:	e00b      	b.n	8001100 <HAL_DMA_Abort_IT+0xb0>
 80010e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ec:	e008      	b.n	8001100 <HAL_DMA_Abort_IT+0xb0>
 80010ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f2:	e005      	b.n	8001100 <HAL_DMA_Abort_IT+0xb0>
 80010f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f8:	e002      	b.n	8001100 <HAL_DMA_Abort_IT+0xb0>
 80010fa:	2310      	movs	r3, #16
 80010fc:	e000      	b.n	8001100 <HAL_DMA_Abort_IT+0xb0>
 80010fe:	2301      	movs	r3, #1
 8001100:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	4798      	blx	r3
    } 
  }
  return status;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40020000 	.word	0x40020000
 8001130:	40020008 	.word	0x40020008
 8001134:	4002001c 	.word	0x4002001c
 8001138:	40020030 	.word	0x40020030
 800113c:	40020044 	.word	0x40020044
 8001140:	40020058 	.word	0x40020058
 8001144:	4002006c 	.word	0x4002006c

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b08b      	sub	sp, #44	; 0x2c
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	e127      	b.n	80013ac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800115c:	2201      	movs	r2, #1
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8116 	bne.w	80013a6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b12      	cmp	r3, #18
 8001180:	d034      	beq.n	80011ec <HAL_GPIO_Init+0xa4>
 8001182:	2b12      	cmp	r3, #18
 8001184:	d80d      	bhi.n	80011a2 <HAL_GPIO_Init+0x5a>
 8001186:	2b02      	cmp	r3, #2
 8001188:	d02b      	beq.n	80011e2 <HAL_GPIO_Init+0x9a>
 800118a:	2b02      	cmp	r3, #2
 800118c:	d804      	bhi.n	8001198 <HAL_GPIO_Init+0x50>
 800118e:	2b00      	cmp	r3, #0
 8001190:	d031      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
 8001192:	2b01      	cmp	r3, #1
 8001194:	d01c      	beq.n	80011d0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001196:	e048      	b.n	800122a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001198:	2b03      	cmp	r3, #3
 800119a:	d043      	beq.n	8001224 <HAL_GPIO_Init+0xdc>
 800119c:	2b11      	cmp	r3, #17
 800119e:	d01b      	beq.n	80011d8 <HAL_GPIO_Init+0x90>
          break;
 80011a0:	e043      	b.n	800122a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011a2:	4a89      	ldr	r2, [pc, #548]	; (80013c8 <HAL_GPIO_Init+0x280>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d026      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
 80011a8:	4a87      	ldr	r2, [pc, #540]	; (80013c8 <HAL_GPIO_Init+0x280>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d806      	bhi.n	80011bc <HAL_GPIO_Init+0x74>
 80011ae:	4a87      	ldr	r2, [pc, #540]	; (80013cc <HAL_GPIO_Init+0x284>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d020      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
 80011b4:	4a86      	ldr	r2, [pc, #536]	; (80013d0 <HAL_GPIO_Init+0x288>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01d      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
          break;
 80011ba:	e036      	b.n	800122a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011bc:	4a85      	ldr	r2, [pc, #532]	; (80013d4 <HAL_GPIO_Init+0x28c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
 80011c2:	4a85      	ldr	r2, [pc, #532]	; (80013d8 <HAL_GPIO_Init+0x290>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d016      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
 80011c8:	4a84      	ldr	r2, [pc, #528]	; (80013dc <HAL_GPIO_Init+0x294>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
          break;
 80011ce:	e02c      	b.n	800122a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	623b      	str	r3, [r7, #32]
          break;
 80011d6:	e028      	b.n	800122a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	3304      	adds	r3, #4
 80011de:	623b      	str	r3, [r7, #32]
          break;
 80011e0:	e023      	b.n	800122a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	3308      	adds	r3, #8
 80011e8:	623b      	str	r3, [r7, #32]
          break;
 80011ea:	e01e      	b.n	800122a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	330c      	adds	r3, #12
 80011f2:	623b      	str	r3, [r7, #32]
          break;
 80011f4:	e019      	b.n	800122a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fe:	2304      	movs	r3, #4
 8001200:	623b      	str	r3, [r7, #32]
          break;
 8001202:	e012      	b.n	800122a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d105      	bne.n	8001218 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800120c:	2308      	movs	r3, #8
 800120e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	611a      	str	r2, [r3, #16]
          break;
 8001216:	e008      	b.n	800122a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001218:	2308      	movs	r3, #8
 800121a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	615a      	str	r2, [r3, #20]
          break;
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
          break;
 8001228:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2bff      	cmp	r3, #255	; 0xff
 800122e:	d801      	bhi.n	8001234 <HAL_GPIO_Init+0xec>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	e001      	b.n	8001238 <HAL_GPIO_Init+0xf0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3304      	adds	r3, #4
 8001238:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2bff      	cmp	r3, #255	; 0xff
 800123e:	d802      	bhi.n	8001246 <HAL_GPIO_Init+0xfe>
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	e002      	b.n	800124c <HAL_GPIO_Init+0x104>
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	3b08      	subs	r3, #8
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	210f      	movs	r1, #15
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	401a      	ands	r2, r3
 800125e:	6a39      	ldr	r1, [r7, #32]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	431a      	orrs	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 8096 	beq.w	80013a6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800127a:	4a59      	ldr	r2, [pc, #356]	; (80013e0 <HAL_GPIO_Init+0x298>)
 800127c:	4b58      	ldr	r3, [pc, #352]	; (80013e0 <HAL_GPIO_Init+0x298>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b56      	ldr	r3, [pc, #344]	; (80013e0 <HAL_GPIO_Init+0x298>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001292:	4a54      	ldr	r2, [pc, #336]	; (80013e4 <HAL_GPIO_Init+0x29c>)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	4013      	ands	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4b      	ldr	r2, [pc, #300]	; (80013e8 <HAL_GPIO_Init+0x2a0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_GPIO_Init+0x19e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4a      	ldr	r2, [pc, #296]	; (80013ec <HAL_GPIO_Init+0x2a4>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00d      	beq.n	80012e2 <HAL_GPIO_Init+0x19a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a49      	ldr	r2, [pc, #292]	; (80013f0 <HAL_GPIO_Init+0x2a8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0x196>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a48      	ldr	r2, [pc, #288]	; (80013f4 <HAL_GPIO_Init+0x2ac>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_GPIO_Init+0x192>
 80012d6:	2303      	movs	r3, #3
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x1a0>
 80012da:	2304      	movs	r3, #4
 80012dc:	e004      	b.n	80012e8 <HAL_GPIO_Init+0x1a0>
 80012de:	2302      	movs	r3, #2
 80012e0:	e002      	b.n	80012e8 <HAL_GPIO_Init+0x1a0>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <HAL_GPIO_Init+0x1a0>
 80012e6:	2300      	movs	r3, #0
 80012e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ea:	f002 0203 	and.w	r2, r2, #3
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	4093      	lsls	r3, r2
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f8:	493a      	ldr	r1, [pc, #232]	; (80013e4 <HAL_GPIO_Init+0x29c>)
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001312:	4939      	ldr	r1, [pc, #228]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 8001314:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
 800131e:	e006      	b.n	800132e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001320:	4935      	ldr	r1, [pc, #212]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 8001322:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	43db      	mvns	r3, r3
 800132a:	4013      	ands	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d006      	beq.n	8001348 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800133a:	492f      	ldr	r1, [pc, #188]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 800133c:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
 8001346:	e006      	b.n	8001356 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001348:	492b      	ldr	r1, [pc, #172]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 800134a:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	43db      	mvns	r3, r3
 8001352:	4013      	ands	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001362:	4925      	ldr	r1, [pc, #148]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	608b      	str	r3, [r1, #8]
 800136e:	e006      	b.n	800137e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001370:	4921      	ldr	r1, [pc, #132]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	43db      	mvns	r3, r3
 800137a:	4013      	ands	r3, r2
 800137c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800138a:	491b      	ldr	r1, [pc, #108]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	60cb      	str	r3, [r1, #12]
 8001396:	e006      	b.n	80013a6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001398:	4917      	ldr	r1, [pc, #92]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4013      	ands	r3, r2
 80013a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	3301      	adds	r3, #1
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	fa22 f303 	lsr.w	r3, r2, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f47f aed0 	bne.w	800115c <HAL_GPIO_Init+0x14>
  }
}
 80013bc:	bf00      	nop
 80013be:	372c      	adds	r7, #44	; 0x2c
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	10210000 	.word	0x10210000
 80013cc:	10110000 	.word	0x10110000
 80013d0:	10120000 	.word	0x10120000
 80013d4:	10310000 	.word	0x10310000
 80013d8:	10320000 	.word	0x10320000
 80013dc:	10220000 	.word	0x10220000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000
 80013e8:	40010800 	.word	0x40010800
 80013ec:	40010c00 	.word	0x40010c00
 80013f0:	40011000 	.word	0x40011000
 80013f4:	40011400 	.word	0x40011400
 80013f8:	40010400 	.word	0x40010400

080013fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
 8001408:	4613      	mov	r3, r2
 800140a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001418:	e003      	b.n	8001422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	041a      	lsls	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	611a      	str	r2, [r3, #16]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e26c      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8087 	beq.w	800155a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800144c:	4b92      	ldr	r3, [pc, #584]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	2b04      	cmp	r3, #4
 8001456:	d00c      	beq.n	8001472 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001458:	4b8f      	ldr	r3, [pc, #572]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b08      	cmp	r3, #8
 8001462:	d112      	bne.n	800148a <HAL_RCC_OscConfig+0x5e>
 8001464:	4b8c      	ldr	r3, [pc, #560]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001470:	d10b      	bne.n	800148a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001472:	4b89      	ldr	r3, [pc, #548]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d06c      	beq.n	8001558 <HAL_RCC_OscConfig+0x12c>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d168      	bne.n	8001558 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e246      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x76>
 8001494:	4a80      	ldr	r2, [pc, #512]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001496:	4b80      	ldr	r3, [pc, #512]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	e02e      	b.n	8001500 <HAL_RCC_OscConfig+0xd4>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x98>
 80014aa:	4a7b      	ldr	r2, [pc, #492]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	4b7a      	ldr	r3, [pc, #488]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4a78      	ldr	r2, [pc, #480]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	4b77      	ldr	r3, [pc, #476]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e01d      	b.n	8001500 <HAL_RCC_OscConfig+0xd4>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0xbc>
 80014ce:	4a72      	ldr	r2, [pc, #456]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	4b71      	ldr	r3, [pc, #452]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4a6f      	ldr	r2, [pc, #444]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	4b6e      	ldr	r3, [pc, #440]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0xd4>
 80014e8:	4a6b      	ldr	r2, [pc, #428]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	4b6b      	ldr	r3, [pc, #428]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4a68      	ldr	r2, [pc, #416]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	4b68      	ldr	r3, [pc, #416]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d013      	beq.n	8001530 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fa6e 	bl	80009e8 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fa6a 	bl	80009e8 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e1fa      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0xe4>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fa5a 	bl	80009e8 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fa56 	bl	80009e8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e1e6      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x10c>
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d063      	beq.n	800162e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001566:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00b      	beq.n	800158a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001572:	4b49      	ldr	r3, [pc, #292]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b08      	cmp	r3, #8
 800157c:	d11c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x18c>
 800157e:	4b46      	ldr	r3, [pc, #280]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <HAL_RCC_OscConfig+0x176>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d001      	beq.n	80015a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e1ba      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a2:	493d      	ldr	r1, [pc, #244]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b6:	e03a      	b.n	800162e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fa0f 	bl	80009e8 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff fa0b 	bl	80009e8 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e19b      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ec:	492a      	ldr	r1, [pc, #168]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]
 8001600:	e015      	b.n	800162e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff f9ee 	bl	80009e8 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001610:	f7ff f9ea 	bl	80009e8 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e17a      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d03a      	beq.n	80016b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d019      	beq.n	8001676 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_RCC_OscConfig+0x274>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001648:	f7ff f9ce 	bl	80009e8 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001650:	f7ff f9ca 	bl	80009e8 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e15a      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800166e:	2001      	movs	r0, #1
 8001670:	f000 fb0a 	bl	8001c88 <RCC_Delay>
 8001674:	e01c      	b.n	80016b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_RCC_OscConfig+0x274>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167c:	f7ff f9b4 	bl	80009e8 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001682:	e00f      	b.n	80016a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff f9b0 	bl	80009e8 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d908      	bls.n	80016a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e140      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	42420000 	.word	0x42420000
 80016a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a4:	4b9e      	ldr	r3, [pc, #632]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1e9      	bne.n	8001684 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80a6 	beq.w	800180a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c2:	4b97      	ldr	r3, [pc, #604]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10d      	bne.n	80016ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4a94      	ldr	r2, [pc, #592]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	4b93      	ldr	r3, [pc, #588]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b91      	ldr	r3, [pc, #580]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	4b8e      	ldr	r3, [pc, #568]	; (8001924 <HAL_RCC_OscConfig+0x4f8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d118      	bne.n	8001728 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f6:	4a8b      	ldr	r2, [pc, #556]	; (8001924 <HAL_RCC_OscConfig+0x4f8>)
 80016f8:	4b8a      	ldr	r3, [pc, #552]	; (8001924 <HAL_RCC_OscConfig+0x4f8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001702:	f7ff f971 	bl	80009e8 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170a:	f7ff f96d 	bl	80009e8 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b64      	cmp	r3, #100	; 0x64
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0fd      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	4b81      	ldr	r3, [pc, #516]	; (8001924 <HAL_RCC_OscConfig+0x4f8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x312>
 8001730:	4a7b      	ldr	r2, [pc, #492]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001732:	4b7b      	ldr	r3, [pc, #492]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6213      	str	r3, [r2, #32]
 800173c:	e02d      	b.n	800179a <HAL_RCC_OscConfig+0x36e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x334>
 8001746:	4a76      	ldr	r2, [pc, #472]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001748:	4b75      	ldr	r3, [pc, #468]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	6213      	str	r3, [r2, #32]
 8001752:	4a73      	ldr	r2, [pc, #460]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	4b72      	ldr	r3, [pc, #456]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	f023 0304 	bic.w	r3, r3, #4
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	e01c      	b.n	800179a <HAL_RCC_OscConfig+0x36e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b05      	cmp	r3, #5
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0x356>
 8001768:	4a6d      	ldr	r2, [pc, #436]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	4b6d      	ldr	r3, [pc, #436]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6213      	str	r3, [r2, #32]
 8001774:	4a6a      	ldr	r2, [pc, #424]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	e00b      	b.n	800179a <HAL_RCC_OscConfig+0x36e>
 8001782:	4a67      	ldr	r2, [pc, #412]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001784:	4b66      	ldr	r3, [pc, #408]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6213      	str	r3, [r2, #32]
 800178e:	4a64      	ldr	r2, [pc, #400]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d015      	beq.n	80017ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff f921 	bl	80009e8 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f7ff f91d 	bl	80009e8 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0ab      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c0:	4b57      	ldr	r3, [pc, #348]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0ee      	beq.n	80017aa <HAL_RCC_OscConfig+0x37e>
 80017cc:	e014      	b.n	80017f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff f90b 	bl	80009e8 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff f907 	bl	80009e8 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e095      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	4b4c      	ldr	r3, [pc, #304]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1ee      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d105      	bne.n	800180a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fe:	4a48      	ldr	r2, [pc, #288]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001808:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8081 	beq.w	8001916 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001814:	4b42      	ldr	r3, [pc, #264]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b08      	cmp	r3, #8
 800181e:	d061      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d146      	bne.n	80018b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001828:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <HAL_RCC_OscConfig+0x4fc>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff f8db 	bl	80009e8 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff f8d7 	bl	80009e8 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e067      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001848:	4b35      	ldr	r3, [pc, #212]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f0      	bne.n	8001836 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d108      	bne.n	8001870 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800185e:	4930      	ldr	r1, [pc, #192]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001870:	482b      	ldr	r0, [pc, #172]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a19      	ldr	r1, [r3, #32]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	430b      	orrs	r3, r1
 8001884:	4313      	orrs	r3, r2
 8001886:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <HAL_RCC_OscConfig+0x4fc>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff f8ab 	bl	80009e8 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001896:	f7ff f8a7 	bl	80009e8 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e037      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x46a>
 80018b4:	e02f      	b.n	8001916 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <HAL_RCC_OscConfig+0x4fc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff f894 	bl	80009e8 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff f890 	bl	80009e8 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e020      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x498>
 80018e2:	e018      	b.n	8001916 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e013      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	429a      	cmp	r2, r3
 8001902:	d106      	bne.n	8001912 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	40007000 	.word	0x40007000
 8001928:	42420060 	.word	0x42420060

0800192c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0d0      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0207 	and.w	r2, r3, #7
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d210      	bcs.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4967      	ldr	r1, [pc, #412]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	4b66      	ldr	r3, [pc, #408]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 0207 	bic.w	r2, r3, #7
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b63      	ldr	r3, [pc, #396]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0207 	and.w	r2, r3, #7
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0b8      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001988:	4a59      	ldr	r2, [pc, #356]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001992:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a0:	4a53      	ldr	r2, [pc, #332]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4950      	ldr	r1, [pc, #320]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d040      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d115      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e07f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e073      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e06b      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0a:	4939      	ldr	r1, [pc, #228]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f023 0203 	bic.w	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a1c:	f7fe ffe4 	bl	80009e8 <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7fe ffe0 	bl	80009e8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e053      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 020c 	and.w	r2, r3, #12
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1eb      	bne.n	8001a24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0207 	and.w	r2, r3, #7
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d910      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4924      	ldr	r1, [pc, #144]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	4b23      	ldr	r3, [pc, #140]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 0207 	bic.w	r2, r3, #7
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0207 	and.w	r2, r3, #7
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e032      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a88:	4919      	ldr	r1, [pc, #100]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aa6:	4912      	ldr	r1, [pc, #72]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aba:	f000 f821 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001abe:	4601      	mov	r1, r0
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001acc:	5cd3      	ldrb	r3, [r2, r3]
 8001ace:	fa21 f303 	lsr.w	r3, r1, r3
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_RCC_ClockConfig+0x1d0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fed4 	bl	8000888 <HAL_InitTick>

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	40021000 	.word	0x40021000
 8001af4:	08008370 	.word	0x08008370
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000004 	.word	0x20000004

08001b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	b490      	push	{r4, r7}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b06:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b08:	1d3c      	adds	r4, r7, #4
 8001b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d002      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x40>
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0x46>
 8001b3e:	e02d      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b42:	623b      	str	r3, [r7, #32]
      break;
 8001b44:	e02d      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	0c9b      	lsrs	r3, r3, #18
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b52:	4413      	add	r3, r2
 8001b54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	0c5b      	lsrs	r3, r3, #17
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b72:	4413      	add	r3, r2
 8001b74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	4a0f      	ldr	r2, [pc, #60]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b7e:	fb02 f203 	mul.w	r2, r2, r3
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8a:	e004      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b90:	fb02 f303 	mul.w	r3, r2, r3
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	623b      	str	r3, [r7, #32]
      break;
 8001b9a:	e002      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b9e:	623b      	str	r3, [r7, #32]
      break;
 8001ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc90      	pop	{r4, r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	0800829c 	.word	0x0800829c
 8001bb4:	080082ac 	.word	0x080082ac
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	007a1200 	.word	0x007a1200
 8001bc0:	003d0900 	.word	0x003d0900

08001bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc8:	4b02      	ldr	r3, [pc, #8]	; (8001bd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bdc:	f7ff fff2 	bl	8001bc4 <HAL_RCC_GetHCLKFreq>
 8001be0:	4601      	mov	r1, r0
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	4a03      	ldr	r2, [pc, #12]	; (8001bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	08008380 	.word	0x08008380

08001c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_RCC_GetHCLKFreq>
 8001c08:	4601      	mov	r1, r0
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	0adb      	lsrs	r3, r3, #11
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	4a03      	ldr	r2, [pc, #12]	; (8001c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	08008380 	.word	0x08008380

08001c28 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	220f      	movs	r2, #15
 8001c36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_RCC_GetClockConfig+0x58>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <HAL_RCC_GetClockConfig+0x58>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_GetClockConfig+0x58>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_RCC_GetClockConfig+0x58>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	08db      	lsrs	r3, r3, #3
 8001c62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0207 	and.w	r2, r3, #7
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40022000 	.word	0x40022000

08001c88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <RCC_Delay+0x34>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <RCC_Delay+0x38>)
 8001c96:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9a:	0a5b      	lsrs	r3, r3, #9
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ca4:	bf00      	nop
  }
  while (Delay --);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1e5a      	subs	r2, r3, #1
 8001caa:	60fa      	str	r2, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f9      	bne.n	8001ca4 <RCC_Delay+0x1c>
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	10624dd3 	.word	0x10624dd3

08001cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d07d      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce4:	4b4f      	ldr	r3, [pc, #316]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10d      	bne.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	4a4c      	ldr	r2, [pc, #304]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf2:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	61d3      	str	r3, [r2, #28]
 8001cfc:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	4b46      	ldr	r3, [pc, #280]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d118      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d18:	4a43      	ldr	r2, [pc, #268]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d1a:	4b43      	ldr	r3, [pc, #268]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d24:	f7fe fe60 	bl	80009e8 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	e008      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2c:	f7fe fe5c 	bl	80009e8 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e06d      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d4a:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d02e      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d027      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d68:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d7e:	4a29      	ldr	r2, [pc, #164]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d014      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7fe fe2b 	bl	80009e8 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7fe fe27 	bl	80009e8 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e036      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ee      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001db8:	491a      	ldr	r1, [pc, #104]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001de8:	490e      	ldr	r1, [pc, #56]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d008      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e06:	4907      	ldr	r1, [pc, #28]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	42420440 	.word	0x42420440

08001e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e041      	b.n	8001ec6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fc70 	bl	800073c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4610      	mov	r0, r2
 8001e70:	f000 fb7a 	bl	8002568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d001      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e03a      	b.n	8001f5e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	68d2      	ldr	r2, [r2, #12]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a18      	ldr	r2, [pc, #96]	; (8001f68 <HAL_TIM_Base_Start_IT+0x98>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00e      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x58>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f12:	d009      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x58>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <HAL_TIM_Base_Start_IT+0x9c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x58>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a13      	ldr	r2, [pc, #76]	; (8001f70 <HAL_TIM_Base_Start_IT+0xa0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d111      	bne.n	8001f4c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d010      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4a:	e007      	b.n	8001f5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	40012c00 	.word	0x40012c00
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	40000800 	.word	0x40000800

08001f74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e041      	b.n	800200a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f839 	bl	8002012 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f000 fad8 	bl	8002568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b02      	cmp	r3, #2
 8002038:	d122      	bne.n	8002080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b02      	cmp	r3, #2
 8002046:	d11b      	bne.n	8002080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0202 	mvn.w	r2, #2
 8002050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fa62 	bl	8002530 <HAL_TIM_IC_CaptureCallback>
 800206c:	e005      	b.n	800207a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fa55 	bl	800251e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fa64 	bl	8002542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b04      	cmp	r3, #4
 800208c:	d122      	bne.n	80020d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b04      	cmp	r3, #4
 800209a:	d11b      	bne.n	80020d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0204 	mvn.w	r2, #4
 80020a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2202      	movs	r2, #2
 80020aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fa38 	bl	8002530 <HAL_TIM_IC_CaptureCallback>
 80020c0:	e005      	b.n	80020ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fa2b 	bl	800251e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fa3a 	bl	8002542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d122      	bne.n	8002128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d11b      	bne.n	8002128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0208 	mvn.w	r2, #8
 80020f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2204      	movs	r2, #4
 80020fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fa0e 	bl	8002530 <HAL_TIM_IC_CaptureCallback>
 8002114:	e005      	b.n	8002122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fa01 	bl	800251e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fa10 	bl	8002542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b10      	cmp	r3, #16
 8002134:	d122      	bne.n	800217c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b10      	cmp	r3, #16
 8002142:	d11b      	bne.n	800217c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0210 	mvn.w	r2, #16
 800214c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2208      	movs	r2, #8
 8002152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f9e4 	bl	8002530 <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f9d7 	bl	800251e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f9e6 	bl	8002542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d10e      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d107      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0201 	mvn.w	r2, #1
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe fa42 	bl	800062c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	2b80      	cmp	r3, #128	; 0x80
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c0:	2b80      	cmp	r3, #128	; 0x80
 80021c2:	d107      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fcb1 	bl	8002b36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d10e      	bne.n	8002200 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ec:	2b40      	cmp	r3, #64	; 0x40
 80021ee:	d107      	bne.n	8002200 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f9aa 	bl	8002554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b20      	cmp	r3, #32
 800220c:	d10e      	bne.n	800222c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b20      	cmp	r3, #32
 800221a:	d107      	bne.n	800222c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0220 	mvn.w	r2, #32
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fc7c 	bl	8002b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800224a:	2302      	movs	r3, #2
 800224c:	e0ac      	b.n	80023a8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b0c      	cmp	r3, #12
 800225a:	f200 809f 	bhi.w	800239c <HAL_TIM_PWM_ConfigChannel+0x168>
 800225e:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002264:	08002299 	.word	0x08002299
 8002268:	0800239d 	.word	0x0800239d
 800226c:	0800239d 	.word	0x0800239d
 8002270:	0800239d 	.word	0x0800239d
 8002274:	080022d9 	.word	0x080022d9
 8002278:	0800239d 	.word	0x0800239d
 800227c:	0800239d 	.word	0x0800239d
 8002280:	0800239d 	.word	0x0800239d
 8002284:	0800231b 	.word	0x0800231b
 8002288:	0800239d 	.word	0x0800239d
 800228c:	0800239d 	.word	0x0800239d
 8002290:	0800239d 	.word	0x0800239d
 8002294:	0800235b 	.word	0x0800235b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f9c4 	bl	800262c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	6992      	ldr	r2, [r2, #24]
 80022ae:	f042 0208 	orr.w	r2, r2, #8
 80022b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	6992      	ldr	r2, [r2, #24]
 80022be:	f022 0204 	bic.w	r2, r2, #4
 80022c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	6991      	ldr	r1, [r2, #24]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	6912      	ldr	r2, [r2, #16]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	619a      	str	r2, [r3, #24]
      break;
 80022d6:	e062      	b.n	800239e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fa0a 	bl	80026f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	6992      	ldr	r2, [r2, #24]
 80022ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	6992      	ldr	r2, [r2, #24]
 80022fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	6991      	ldr	r1, [r2, #24]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	6912      	ldr	r2, [r2, #16]
 8002312:	0212      	lsls	r2, r2, #8
 8002314:	430a      	orrs	r2, r1
 8002316:	619a      	str	r2, [r3, #24]
      break;
 8002318:	e041      	b.n	800239e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fa53 	bl	80027cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	69d2      	ldr	r2, [r2, #28]
 8002330:	f042 0208 	orr.w	r2, r2, #8
 8002334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	69d2      	ldr	r2, [r2, #28]
 8002340:	f022 0204 	bic.w	r2, r2, #4
 8002344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	69d1      	ldr	r1, [r2, #28]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	6912      	ldr	r2, [r2, #16]
 8002354:	430a      	orrs	r2, r1
 8002356:	61da      	str	r2, [r3, #28]
      break;
 8002358:	e021      	b.n	800239e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fa9d 	bl	80028a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	69d2      	ldr	r2, [r2, #28]
 8002370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	69d2      	ldr	r2, [r2, #28]
 8002380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	69d1      	ldr	r1, [r2, #28]
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	6912      	ldr	r2, [r2, #16]
 8002394:	0212      	lsls	r2, r2, #8
 8002396:	430a      	orrs	r2, r1
 8002398:	61da      	str	r2, [r3, #28]
      break;
 800239a:	e000      	b.n	800239e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800239c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_TIM_ConfigClockSource+0x18>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e0a6      	b.n	8002516 <HAL_TIM_ConfigClockSource+0x166>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d067      	beq.n	80024d0 <HAL_TIM_ConfigClockSource+0x120>
 8002400:	2b40      	cmp	r3, #64	; 0x40
 8002402:	d80b      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x6c>
 8002404:	2b10      	cmp	r3, #16
 8002406:	d073      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0x140>
 8002408:	2b10      	cmp	r3, #16
 800240a:	d802      	bhi.n	8002412 <HAL_TIM_ConfigClockSource+0x62>
 800240c:	2b00      	cmp	r3, #0
 800240e:	d06f      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002410:	e078      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002412:	2b20      	cmp	r3, #32
 8002414:	d06c      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0x140>
 8002416:	2b30      	cmp	r3, #48	; 0x30
 8002418:	d06a      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800241a:	e073      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800241c:	2b70      	cmp	r3, #112	; 0x70
 800241e:	d00d      	beq.n	800243c <HAL_TIM_ConfigClockSource+0x8c>
 8002420:	2b70      	cmp	r3, #112	; 0x70
 8002422:	d804      	bhi.n	800242e <HAL_TIM_ConfigClockSource+0x7e>
 8002424:	2b50      	cmp	r3, #80	; 0x50
 8002426:	d033      	beq.n	8002490 <HAL_TIM_ConfigClockSource+0xe0>
 8002428:	2b60      	cmp	r3, #96	; 0x60
 800242a:	d041      	beq.n	80024b0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800242c:	e06a      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800242e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002432:	d066      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0x152>
 8002434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002438:	d017      	beq.n	800246a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800243a:	e063      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6899      	ldr	r1, [r3, #8]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f000 faed 	bl	8002a2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800245e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	609a      	str	r2, [r3, #8]
      break;
 8002468:	e04c      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6899      	ldr	r1, [r3, #8]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f000 fad6 	bl	8002a2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	6892      	ldr	r2, [r2, #8]
 8002488:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800248c:	609a      	str	r2, [r3, #8]
      break;
 800248e:	e039      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	461a      	mov	r2, r3
 800249e:	f000 fa4d 	bl	800293c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2150      	movs	r1, #80	; 0x50
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 faa4 	bl	80029f6 <TIM_ITRx_SetConfig>
      break;
 80024ae:	e029      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	461a      	mov	r2, r3
 80024be:	f000 fa6b 	bl	8002998 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2160      	movs	r1, #96	; 0x60
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fa94 	bl	80029f6 <TIM_ITRx_SetConfig>
      break;
 80024ce:	e019      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	461a      	mov	r2, r3
 80024de:	f000 fa2d 	bl	800293c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2140      	movs	r1, #64	; 0x40
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fa84 	bl	80029f6 <TIM_ITRx_SetConfig>
      break;
 80024ee:	e009      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f000 fa7b 	bl	80029f6 <TIM_ITRx_SetConfig>
        break;
 8002500:	e000      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
	...

08002568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a29      	ldr	r2, [pc, #164]	; (8002620 <TIM_Base_SetConfig+0xb8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d00b      	beq.n	8002598 <TIM_Base_SetConfig+0x30>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002586:	d007      	beq.n	8002598 <TIM_Base_SetConfig+0x30>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a26      	ldr	r2, [pc, #152]	; (8002624 <TIM_Base_SetConfig+0xbc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d003      	beq.n	8002598 <TIM_Base_SetConfig+0x30>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a25      	ldr	r2, [pc, #148]	; (8002628 <TIM_Base_SetConfig+0xc0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d108      	bne.n	80025aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800259e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <TIM_Base_SetConfig+0xb8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00b      	beq.n	80025ca <TIM_Base_SetConfig+0x62>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b8:	d007      	beq.n	80025ca <TIM_Base_SetConfig+0x62>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a19      	ldr	r2, [pc, #100]	; (8002624 <TIM_Base_SetConfig+0xbc>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d003      	beq.n	80025ca <TIM_Base_SetConfig+0x62>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a18      	ldr	r2, [pc, #96]	; (8002628 <TIM_Base_SetConfig+0xc0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d108      	bne.n	80025dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a07      	ldr	r2, [pc, #28]	; (8002620 <TIM_Base_SetConfig+0xb8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d103      	bne.n	8002610 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	615a      	str	r2, [r3, #20]
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	40012c00 	.word	0x40012c00
 8002624:	40000400 	.word	0x40000400
 8002628:	40000800 	.word	0x40000800

0800262c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	f023 0201 	bic.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f023 0303 	bic.w	r3, r3, #3
 8002662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f023 0302 	bic.w	r3, r3, #2
 8002674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <TIM_OC1_SetConfig+0xc8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d10c      	bne.n	80026a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f023 0308 	bic.w	r3, r3, #8
 800268e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	4313      	orrs	r3, r2
 8002698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f023 0304 	bic.w	r3, r3, #4
 80026a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <TIM_OC1_SetConfig+0xc8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d111      	bne.n	80026ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	621a      	str	r2, [r3, #32]
}
 80026e8:	bf00      	nop
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40012c00 	.word	0x40012c00

080026f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f023 0210 	bic.w	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0320 	bic.w	r3, r3, #32
 8002742:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <TIM_OC2_SetConfig+0xd0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d10d      	bne.n	8002774 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800275e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <TIM_OC2_SetConfig+0xd0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d113      	bne.n	80027a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002782:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800278a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	621a      	str	r2, [r3, #32]
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	40012c00 	.word	0x40012c00

080027cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0303 	bic.w	r3, r3, #3
 8002802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a1d      	ldr	r2, [pc, #116]	; (800289c <TIM_OC3_SetConfig+0xd0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10d      	bne.n	8002846 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <TIM_OC3_SetConfig+0xd0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d113      	bne.n	8002876 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800285c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	621a      	str	r2, [r3, #32]
}
 8002890:	bf00      	nop
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40012c00 	.word	0x40012c00

080028a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	031b      	lsls	r3, r3, #12
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <TIM_OC4_SetConfig+0x98>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d109      	bne.n	8002914 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	019b      	lsls	r3, r3, #6
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	621a      	str	r2, [r3, #32]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	40012c00 	.word	0x40012c00

0800293c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f023 0201 	bic.w	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f023 030a 	bic.w	r3, r3, #10
 8002978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	621a      	str	r2, [r3, #32]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f023 0210 	bic.w	r2, r3, #16
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	031b      	lsls	r3, r3, #12
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	621a      	str	r2, [r3, #32]
}
 80029ec:	bf00      	nop
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b085      	sub	sp, #20
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f043 0307 	orr.w	r3, r3, #7
 8002a18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	609a      	str	r2, [r3, #8]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b087      	sub	sp, #28
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	021a      	lsls	r2, r3, #8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	609a      	str	r2, [r3, #8]
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e046      	b.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d10c      	bne.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40000800 	.word	0x40000800

08002b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e03f      	b.n	8002bda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fd fe36 	bl	80007e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2224      	movs	r2, #36	; 0x24
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	68d2      	ldr	r2, [r2, #12]
 8002b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fc03 	bl	8003398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	6912      	ldr	r2, [r2, #16]
 8002b9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	6952      	ldr	r2, [r2, #20]
 8002bac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	68d2      	ldr	r2, [r2, #12]
 8002bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	4613      	mov	r3, r2
 8002bee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d130      	bne.n	8002c5e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_UART_Transmit_IT+0x26>
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e029      	b.n	8002c60 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_UART_Transmit_IT+0x38>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e022      	b.n	8002c60 <HAL_UART_Transmit_IT+0x7e>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	88fa      	ldrh	r2, [r7, #6]
 8002c2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2221      	movs	r2, #33	; 0x21
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	68d2      	ldr	r2, [r2, #12]
 8002c54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c58:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e000      	b.n	8002c60 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
  }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	4613      	mov	r3, r2
 8002c76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d11d      	bne.n	8002cc0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_UART_Receive_IT+0x26>
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e016      	b.n	8002cc2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Receive_IT+0x38>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e00f      	b.n	8002cc2 <HAL_UART_Receive_IT+0x58>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f9e5 	bl	8003086 <UART_Start_Receive_IT>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	e000      	b.n	8002cc2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	; 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10d      	bne.n	8002d1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_UART_IRQHandler+0x52>
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fa94 	bl	8003244 <UART_Receive_IT>
      return;
 8002d1c:	e17c      	b.n	8003018 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80b1 	beq.w	8002e88 <HAL_UART_IRQHandler+0x1bc>
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d105      	bne.n	8002d3c <HAL_UART_IRQHandler+0x70>
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80a6 	beq.w	8002e88 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <HAL_UART_IRQHandler+0x90>
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0201 	orr.w	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_UART_IRQHandler+0xb0>
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f043 0202 	orr.w	r2, r3, #2
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_UART_IRQHandler+0xd0>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f043 0204 	orr.w	r2, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00f      	beq.n	8002dc6 <HAL_UART_IRQHandler+0xfa>
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d104      	bne.n	8002dba <HAL_UART_IRQHandler+0xee>
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f043 0208 	orr.w	r2, r3, #8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 811f 	beq.w	800300e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <HAL_UART_IRQHandler+0x11e>
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fa2d 	bl	8003244 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <HAL_UART_IRQHandler+0x146>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d031      	beq.n	8002e76 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f970 	bl	80030f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d023      	beq.n	8002e6e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	6952      	ldr	r2, [r2, #20]
 8002e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e34:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d013      	beq.n	8002e66 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	4a77      	ldr	r2, [pc, #476]	; (8003020 <HAL_UART_IRQHandler+0x354>)
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe f900 	bl	8001050 <HAL_DMA_Abort_IT>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d016      	beq.n	8002e84 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e60:	4610      	mov	r0, r2
 8002e62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e64:	e00e      	b.n	8002e84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f8dc 	bl	8003024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e00a      	b.n	8002e84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f8d8 	bl	8003024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	e006      	b.n	8002e84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f8d4 	bl	8003024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e82:	e0c4      	b.n	800300e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e84:	bf00      	nop
    return;
 8002e86:	e0c2      	b.n	800300e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	f040 80a1 	bne.w	8002fd4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 809b 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8095 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d04e      	beq.n	8002f6c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 8002ed8:	8a7b      	ldrh	r3, [r7, #18]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8099 	beq.w	8003012 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ee4:	8a7a      	ldrh	r2, [r7, #18]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	f080 8093 	bcs.w	8003012 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8a7a      	ldrh	r2, [r7, #18]
 8002ef0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d02b      	beq.n	8002f54 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	68d2      	ldr	r2, [r2, #12]
 8002f06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f0a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	6952      	ldr	r2, [r2, #20]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	6952      	ldr	r2, [r2, #20]
 8002f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f2a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	68d2      	ldr	r2, [r2, #12]
 8002f44:	f022 0210 	bic.w	r2, r2, #16
 8002f48:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe f843 	bl	8000fda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	4619      	mov	r1, r3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f866 	bl	8003036 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f6a:	e052      	b.n	8003012 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d048      	beq.n	8003016 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002f84:	8a3b      	ldrh	r3, [r7, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d045      	beq.n	8003016 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	68d2      	ldr	r2, [r2, #12]
 8002f94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f98:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	6952      	ldr	r2, [r2, #20]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	f022 0210 	bic.w	r2, r2, #16
 8002fc6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fc8:	8a3b      	ldrh	r3, [r7, #16]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f832 	bl	8003036 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002fd2:	e020      	b.n	8003016 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x324>
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f8c5 	bl	8003178 <UART_Transmit_IT>
    return;
 8002fee:	e013      	b.n	8003018 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00e      	beq.n	8003018 <HAL_UART_IRQHandler+0x34c>
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d009      	beq.n	8003018 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f905 	bl	8003214 <UART_EndTransmit_IT>
    return;
 800300a:	bf00      	nop
 800300c:	e004      	b.n	8003018 <HAL_UART_IRQHandler+0x34c>
    return;
 800300e:	bf00      	nop
 8003010:	e002      	b.n	8003018 <HAL_UART_IRQHandler+0x34c>
      return;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <HAL_UART_IRQHandler+0x34c>
      return;
 8003016:	bf00      	nop
  }
}
 8003018:	3728      	adds	r7, #40	; 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	08003151 	.word	0x08003151

08003024 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	2300      	movs	r3, #0
 800305a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003062:	b2db      	uxtb	r3, r3
 8003064:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800306c:	b2db      	uxtb	r3, r3
 800306e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	4313      	orrs	r3, r2
 800307a:	b2db      	uxtb	r3, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	4613      	mov	r3, r2
 8003092:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	88fa      	ldrh	r2, [r7, #6]
 800309e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2222      	movs	r2, #34	; 0x22
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	68d2      	ldr	r2, [r2, #12]
 80030c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ca:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	6952      	ldr	r2, [r2, #20]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	68d2      	ldr	r2, [r2, #12]
 80030e6:	f042 0220 	orr.w	r2, r2, #32
 80030ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	68d2      	ldr	r2, [r2, #12]
 800310a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800310e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	6952      	ldr	r2, [r2, #20]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	2b01      	cmp	r3, #1
 8003126:	d107      	bne.n	8003138 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	68d2      	ldr	r2, [r2, #12]
 8003132:	f022 0210 	bic.w	r2, r2, #16
 8003136:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f7ff ff5a 	bl	8003024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b21      	cmp	r3, #33	; 0x21
 800318a:	d13d      	bne.n	8003208 <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003194:	d113      	bne.n	80031be <UART_Transmit_IT+0x46>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	8812      	ldrh	r2, [r2, #0]
 80031ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	1c9a      	adds	r2, r3, #2
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	621a      	str	r2, [r3, #32]
 80031bc:	e008      	b.n	80031d0 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	1c58      	adds	r0, r3, #1
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	6208      	str	r0, [r1, #32]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29b      	uxth	r3, r3
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4619      	mov	r1, r3
 80031de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10f      	bne.n	8003204 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	68d2      	ldr	r2, [r2, #12]
 80031ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	68d2      	ldr	r2, [r2, #12]
 80031fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003202:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	68d2      	ldr	r2, [r2, #12]
 8003226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800322a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f001 fc37 	bl	8004aa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b22      	cmp	r3, #34	; 0x22
 8003256:	f040 8099 	bne.w	800338c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003262:	d117      	bne.n	8003294 <UART_Receive_IT+0x50>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d113      	bne.n	8003294 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003282:	b29a      	uxth	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	1c9a      	adds	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	629a      	str	r2, [r3, #40]	; 0x28
 8003292:	e026      	b.n	80032e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	d007      	beq.n	80032b8 <UART_Receive_IT+0x74>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <UART_Receive_IT+0x82>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d106      	bne.n	80032c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e008      	b.n	80032d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4619      	mov	r1, r3
 80032f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d148      	bne.n	8003388 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	68d2      	ldr	r2, [r2, #12]
 8003300:	f022 0220 	bic.w	r2, r2, #32
 8003304:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	68d2      	ldr	r2, [r2, #12]
 8003310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003314:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	6952      	ldr	r2, [r2, #20]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	2b01      	cmp	r3, #1
 8003334:	d123      	bne.n	800337e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	68d2      	ldr	r2, [r2, #12]
 8003346:	f022 0210 	bic.w	r2, r2, #16
 800334a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b10      	cmp	r3, #16
 8003358:	d10a      	bne.n	8003370 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003374:	4619      	mov	r1, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff fe5d 	bl	8003036 <HAL_UARTEx_RxEventCallback>
 800337c:	e002      	b.n	8003384 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f001 fbd0 	bl	8004b24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e002      	b.n	800338e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	6912      	ldr	r2, [r2, #16]
 80033aa:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68d2      	ldr	r2, [r2, #12]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033d6:	f023 030c 	bic.w	r3, r3, #12
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	430b      	orrs	r3, r1
 80033de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	6952      	ldr	r2, [r2, #20]
 80033ea:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6992      	ldr	r2, [r2, #24]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2c      	ldr	r2, [pc, #176]	; (80034ac <UART_SetConfig+0x114>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d103      	bne.n	8003408 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003400:	f7fe fbfe 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	e002      	b.n	800340e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003408:	f7fe fbe6 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 800340c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6819      	ldr	r1, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009a      	lsls	r2, r3, #2
 800341c:	441a      	add	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	4a21      	ldr	r2, [pc, #132]	; (80034b0 <UART_SetConfig+0x118>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	0118      	lsls	r0, r3, #4
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009a      	lsls	r2, r3, #2
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	fbb2 f2f3 	udiv	r2, r2, r3
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <UART_SetConfig+0x118>)
 800344a:	fba3 4302 	umull	r4, r3, r3, r2
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2464      	movs	r4, #100	; 0x64
 8003452:	fb04 f303 	mul.w	r3, r4, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	3332      	adds	r3, #50	; 0x32
 800345c:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <UART_SetConfig+0x118>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003468:	4418      	add	r0, r3
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	009a      	lsls	r2, r3, #2
 8003474:	441a      	add	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <UART_SetConfig+0x118>)
 8003482:	fba3 4302 	umull	r4, r3, r3, r2
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2464      	movs	r4, #100	; 0x64
 800348a:	fb04 f303 	mul.w	r3, r4, r3
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	3332      	adds	r3, #50	; 0x32
 8003494:	4a06      	ldr	r2, [pc, #24]	; (80034b0 <UART_SetConfig+0x118>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	4403      	add	r3, r0
 80034a2:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd90      	pop	{r4, r7, pc}
 80034ac:	40013800 	.word	0x40013800
 80034b0:	51eb851f 	.word	0x51eb851f

080034b4 <RingAdd>:




void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80034c6:	4619      	mov	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80034d4:	3301      	adds	r3, #1
 80034d6:	425a      	negs	r2, r3
 80034d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034e0:	bf58      	it	pl
 80034e2:	4253      	negpl	r3, r2
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d10f      	bne.n	8003516 <RingAdd+0x62>
	{
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034fc:	3301      	adds	r3, #1
 80034fe:	425a      	negs	r2, r3
 8003500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003504:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003508:	bf58      	it	pl
 800350a:	4253      	negpl	r3, r2
 800350c:	b2da      	uxtb	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	else
	{
		xRingBuffer->u8available++;
	}

}
 8003514:	e007      	b.n	8003526 <RingAdd+0x72>
		xRingBuffer->u8available++;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800351c:	3301      	adds	r3, #1
 800351e:	b2da      	uxtb	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <RingGetAllBytes>:

uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003540:	461a      	mov	r2, r3
 8003542:	6839      	ldr	r1, [r7, #0]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f805 	bl	8003554 <RingGetNBytes>
 800354a:	4603      	mov	r3, r0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <RingGetNBytes>:

uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	4613      	mov	r3, r2
 8003560:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <RingGetNBytes+0x1e>
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <RingGetNBytes+0x22>
 8003572:	2300      	movs	r3, #0
 8003574:	e037      	b.n	80035e6 <RingGetNBytes+0x92>
	if(uNumber > MAX_BUFFER) return 0;
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d901      	bls.n	8003580 <RingGetNBytes+0x2c>
 800357c:	2300      	movs	r3, #0
 800357e:	e032      	b.n	80035e6 <RingGetNBytes+0x92>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8003580:	2300      	movs	r3, #0
 8003582:	75fb      	strb	r3, [r7, #23]
 8003584:	e01b      	b.n	80035be <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	4413      	add	r3, r2
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8003592:	4611      	mov	r1, r2
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	5c52      	ldrb	r2, [r2, r1]
 8003598:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80035a0:	3301      	adds	r3, #1
 80035a2:	425a      	negs	r2, r3
 80035a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035ac:	bf58      	it	pl
 80035ae:	4253      	negpl	r3, r2
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	3301      	adds	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]
 80035be:	7dfa      	ldrb	r2, [r7, #23]
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d205      	bcs.n	80035d2 <RingGetNBytes+0x7e>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80035cc:	7dfa      	ldrb	r2, [r7, #23]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d3d9      	bcc.n	8003586 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

	return uCounter;
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr

080035f0 <RingCountBytes>:

uint8_t RingCountBytes(modbusRingBuffer_t *xRingBuffer)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
return xRingBuffer->u8available;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <RingClear>:

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
	...

08003634 <ModbusInit>:
 * @param EN_Port_v port for txen RS-485
 * @param EN_Pin_v pin for txen RS-485 (NULL means RS232C mode)
 * @ingroup setup
 */
void ModbusInit(modbusHandler_t * modH)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af02      	add	r7, sp, #8
 800363a:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800363c:	4b43      	ldr	r3, [pc, #268]	; (800374c <ModbusInit+0x118>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d87f      	bhi.n	8003744 <ModbusInit+0x110>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	33c8      	adds	r3, #200	; 0xc8
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ffdd 	bl	8003608 <RingClear>

	  if(modH->uiModbusType == SLAVE_RTU)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d109      	bne.n	800366a <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
	  	  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8003656:	4a3e      	ldr	r2, [pc, #248]	; (8003750 <ModbusInit+0x11c>)
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	483e      	ldr	r0, [pc, #248]	; (8003754 <ModbusInit+0x120>)
 800365c:	f001 fb28 	bl	8004cb0 <osThreadNew>
 8003660:	4602      	mov	r2, r0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003668:	e034      	b.n	80036d4 <ModbusInit+0xa0>
	  }
	  else if (modH->uiModbusType == MASTER_RTU)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b04      	cmp	r3, #4
 8003670:	d12f      	bne.n	80036d2 <ModbusInit+0x9e>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8003672:	4a39      	ldr	r2, [pc, #228]	; (8003758 <ModbusInit+0x124>)
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4839      	ldr	r0, [pc, #228]	; (800375c <ModbusInit+0x128>)
 8003678:	f001 fb1a 	bl	8004cb0 <osThreadNew>
 800367c:	4602      	mov	r2, r0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800368a:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8003692:	4b33      	ldr	r3, [pc, #204]	; (8003760 <ModbusInit+0x12c>)
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	2200      	movs	r2, #0
 800369a:	4832      	ldr	r0, [pc, #200]	; (8003764 <ModbusInit+0x130>)
 800369c:	f004 fa74 	bl	8007b88 <xTimerCreate>
 80036a0:	4602      	mov	r2, r0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d100      	bne.n	80036b4 <ModbusInit+0x80>
		  {
			  while(1); //error creating timer, check heap and stack size
 80036b2:	e7fe      	b.n	80036b2 <ModbusInit+0x7e>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 80036b4:	4a2c      	ldr	r2, [pc, #176]	; (8003768 <ModbusInit+0x134>)
 80036b6:	2110      	movs	r1, #16
 80036b8:	2002      	movs	r0, #2
 80036ba:	f001 fc6f 	bl	8004f9c <osMessageQueueNew>
 80036be:	4602      	mov	r2, r0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

		  if(modH->QueueTelegramHandle == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <ModbusInit+0xa0>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 80036d0:	e7fe      	b.n	80036d0 <ModbusInit+0x9c>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 80036d2:	e7fe      	b.n	80036d2 <ModbusInit+0x9e>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d100      	bne.n	80036e0 <ModbusInit+0xac>
	  {
		  while(1); //Error creating modbus task, check heap and stack size
 80036de:	e7fe      	b.n	80036de <ModbusInit+0xaa>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	5 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 80036e6:	4b21      	ldr	r3, [pc, #132]	; (800376c <ModbusInit+0x138>)
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	4613      	mov	r3, r2
 80036ec:	2200      	movs	r2, #0
 80036ee:	2105      	movs	r1, #5
 80036f0:	481f      	ldr	r0, [pc, #124]	; (8003770 <ModbusInit+0x13c>)
 80036f2:	f004 fa49 	bl	8007b88 <xTimerCreate>
 80036f6:	4602      	mov	r2, r0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003704:	2b00      	cmp	r3, #0
 8003706:	d100      	bne.n	800370a <ModbusInit+0xd6>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8003708:	e7fe      	b.n	8003708 <ModbusInit+0xd4>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800370a:	4a1a      	ldr	r2, [pc, #104]	; (8003774 <ModbusInit+0x140>)
 800370c:	2101      	movs	r1, #1
 800370e:	2001      	movs	r0, #1
 8003710:	f001 fba6 	bl	8004e60 <osSemaphoreNew>
 8003714:	4602      	mov	r2, r0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	  if(modH->ModBusSphrHandle == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003722:	2b00      	cmp	r3, #0
 8003724:	d100      	bne.n	8003728 <ModbusInit+0xf4>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8003726:	e7fe      	b.n	8003726 <ModbusInit+0xf2>
	  }

	  mHandlers[numberHandlers] = modH;
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <ModbusInit+0x118>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	4619      	mov	r1, r3
 800372e:	4a12      	ldr	r2, [pc, #72]	; (8003778 <ModbusInit+0x144>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <ModbusInit+0x118>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4b03      	ldr	r3, [pc, #12]	; (800374c <ModbusInit+0x118>)
 8003740:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8003742:	e000      	b.n	8003746 <ModbusInit+0x112>
	  while(1); //error no more Modbus handlers supported
 8003744:	e7fe      	b.n	8003744 <ModbusInit+0x110>
}
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	2000002c 	.word	0x2000002c
 8003750:	080083a0 	.word	0x080083a0
 8003754:	080038f1 	.word	0x080038f1
 8003758:	080083c4 	.word	0x080083c4
 800375c:	08003d65 	.word	0x08003d65
 8003760:	08003899 	.word	0x08003899
 8003764:	080082f4 	.word	0x080082f4
 8003768:	08008388 	.word	0x08008388
 800376c:	08003819 	.word	0x08003819
 8003770:	08008304 	.word	0x08008304
 8003774:	080083e8 	.word	0x080083e8
 8003778:	20001938 	.word	0x20001938

0800377c <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

	if (modH->EN_Port != NULL )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <ModbusStart+0x20>
    {
        // return RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68d8      	ldr	r0, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8a1b      	ldrh	r3, [r3, #16]
 8003794:	2200      	movs	r2, #0
 8003796:	4619      	mov	r1, r3
 8003798:	f7fd fe30 	bl	80013fc <HAL_GPIO_WritePin>
    }

    if (modH->uiModbusType == SLAVE_RTU &&  modH->au16regs == NULL )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d105      	bne.n	80037b0 <ModbusStart+0x34>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d100      	bne.n	80037b0 <ModbusStart+0x34>
    {
    	while(1); //ERROR define the DATA pointer shared through Modbus
 80037ae:	e7fe      	b.n	80037ae <ModbusStart+0x32>
    }

    //check that port is initialized
    while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 80037b0:	bf00      	nop
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff fc48 	bl	800304c <HAL_UART_GetState>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d1f7      	bne.n	80037b2 <ModbusStart+0x36>
    {
    }
    // Receive data from serial port for Modbus using interrupt
    if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6858      	ldr	r0, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	33b2      	adds	r3, #178	; 0xb2
 80037ca:	2201      	movs	r2, #1
 80037cc:	4619      	mov	r1, r3
 80037ce:	f7ff fa4c 	bl	8002c6a <HAL_UART_Receive_IT>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d000      	beq.n	80037da <ModbusStart+0x5e>
    {
        while(1)
 80037d8:	e7fe      	b.n	80037d8 <ModbusStart+0x5c>
        {
        }
    }

    modH->u8lastRec = modH->u8BufferSize = 0;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
#if ENABLE_USB_CDC ==1
    modH->u8TypeHW = USART_HW;
#endif
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af02      	add	r7, sp, #8
 800381e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e02a      	b.n	800387c <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8003826:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <vTimerCallbackT35+0x78>)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	429a      	cmp	r2, r3
 8003836:	d11e      	bne.n	8003876 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uiModbusType == MASTER_RTU)
 8003838:	4a15      	ldr	r2, [pc, #84]	; (8003890 <vTimerCallbackT35+0x78>)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b04      	cmp	r3, #4
 8003844:	d10c      	bne.n	8003860 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8003846:	4a12      	ldr	r2, [pc, #72]	; (8003890 <vTimerCallbackT35+0x78>)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8003852:	2300      	movs	r3, #0
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	2300      	movs	r3, #0
 8003858:	2200      	movs	r2, #0
 800385a:	2103      	movs	r1, #3
 800385c:	f004 f9e6 	bl	8007c2c <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8003860:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <vTimerCallbackT35+0x78>)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003868:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800386c:	2300      	movs	r3, #0
 800386e:	2203      	movs	r2, #3
 8003870:	2100      	movs	r1, #0
 8003872:	f003 ff83 	bl	800777c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3301      	adds	r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <vTimerCallbackT35+0x7c>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	429a      	cmp	r2, r3
 8003886:	dcce      	bgt.n	8003826 <vTimerCallbackT35+0xe>
		}

	}
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20001938 	.word	0x20001938
 8003894:	2000002c 	.word	0x2000002c

08003898 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e016      	b.n	80038d4 <vTimerCallbackTimeout+0x3c>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 80038a6:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <vTimerCallbackTimeout+0x50>)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d10a      	bne.n	80038ce <vTimerCallbackTimeout+0x36>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
 80038b8:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <vTimerCallbackTimeout+0x50>)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c0:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80038c4:	2300      	movs	r3, #0
 80038c6:	2203      	movs	r2, #3
 80038c8:	21ff      	movs	r1, #255	; 0xff
 80038ca:	f003 ff57 	bl	800777c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	3301      	adds	r3, #1
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <vTimerCallbackTimeout+0x54>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	429a      	cmp	r2, r3
 80038de:	dce2      	bgt.n	80038a6 <vTimerCallbackTimeout+0xe>
		}

	}

}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20001938 	.word	0x20001938
 80038ec:	2000002c 	.word	0x2000002c

080038f0 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	60fb      	str	r3, [r7, #12]
  int8_t i8state;

  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block indefinitely until a Modbus Frame arrives */
 80038fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003900:	2001      	movs	r0, #1
 8003902:	f003 fef3 	bl	80076ec <ulTaskNotifyTake>

	  modH->i8lastError = 0;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	749a      	strb	r2, [r3, #18]
	  }


#else

	  modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	33c8      	adds	r3, #200	; 0xc8
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff fe6d 	bl	80035f0 <RingCountBytes>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	  if (modH->EN_Port != NULL )
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <StartTaskModbusSlave+0x48>
	  {
	   	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET); // is this required?
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	68d8      	ldr	r0, [r3, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8a1b      	ldrh	r3, [r3, #16]
 8003930:	2200      	movs	r2, #0
 8003932:	4619      	mov	r1, r3
 8003934:	f7fd fd62 	bl	80013fc <HAL_GPIO_WritePin>
	  }
 	  i8state = getRxBuffer(modH);
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fbdd 	bl	80040f8 <getRxBuffer>
 800393e:	4603      	mov	r3, r0
 8003940:	72fb      	strb	r3, [r7, #11]

#endif


	  if (i8state < 7){
 8003942:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003946:	2b06      	cmp	r3, #6
 8003948:	dc0b      	bgt.n	8003962 <StartTaskModbusSlave+0x72>
		  //The size of the frame is invalid
		  modH->i8lastError = ERR_BAD_SIZE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	22fa      	movs	r2, #250	; 0xfa
 800394e:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8003956:	3301      	adds	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  //RingClear(modH->xBufferRX); //this is not necessary the ring buffer is cleaned by the read operation
		  continue;
 8003960:	e093      	b.n	8003a8a <StartTaskModbusSlave+0x19a>
	  }


		// check slave id
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	7cda      	ldrb	r2, [r3, #19]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	7a1b      	ldrb	r3, [r3, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	f040 808c 	bne.w	8003a88 <StartTaskModbusSlave+0x198>

	  // validate message: CRC, FCT, address and size
	  uint8_t u8exception = validateRequest(modH);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fc05 	bl	8004180 <validateRequest>
 8003976:	4603      	mov	r3, r0
 8003978:	72bb      	strb	r3, [r7, #10]
	  if (u8exception > 0)
 800397a:	7abb      	ldrb	r3, [r7, #10]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00f      	beq.n	80039a0 <StartTaskModbusSlave+0xb0>
	  {
		  if (u8exception != NO_REPLY)
 8003980:	7abb      	ldrb	r3, [r7, #10]
 8003982:	2bff      	cmp	r3, #255	; 0xff
 8003984:	d007      	beq.n	8003996 <StartTaskModbusSlave+0xa6>
		  {
			  buildException( u8exception, modH);
 8003986:	7abb      	ldrb	r3, [r7, #10]
 8003988:	68f9      	ldr	r1, [r7, #12]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fd48 	bl	8004420 <buildException>
			  sendTxBuffer(modH);
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fd63 	bl	800445c <sendTxBuffer>
		  }
		  modH->i8lastError = u8exception;
 8003996:	f997 200a 	ldrsb.w	r2, [r7, #10]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	749a      	strb	r2, [r3, #18]
		  //return u8exception
		  continue;
 800399e:	e074      	b.n	8003a8a <StartTaskModbusSlave+0x19a>
	  }

	  //u32timeOut = millis(); TODO is this really need?
	  modH->i8lastError = 0;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	749a      	strb	r2, [r3, #18]


	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80039ac:	f04f 31ff 	mov.w	r1, #4294967295
 80039b0:	4618      	mov	r0, r3
 80039b2:	f002 fc1d 	bl	80061f0 <xQueueSemaphoreTake>

	  // process message
	    switch(modH->au8Buffer[ FUNC ] )
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	7d1b      	ldrb	r3, [r3, #20]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	2b0f      	cmp	r3, #15
 80039be:	d859      	bhi.n	8003a74 <StartTaskModbusSlave+0x184>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <StartTaskModbusSlave+0xd8>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	08003a09 	.word	0x08003a09
 80039cc:	08003a09 	.word	0x08003a09
 80039d0:	08003a1b 	.word	0x08003a1b
 80039d4:	08003a1b 	.word	0x08003a1b
 80039d8:	08003a2d 	.word	0x08003a2d
 80039dc:	08003a3f 	.word	0x08003a3f
 80039e0:	08003a75 	.word	0x08003a75
 80039e4:	08003a75 	.word	0x08003a75
 80039e8:	08003a75 	.word	0x08003a75
 80039ec:	08003a75 	.word	0x08003a75
 80039f0:	08003a75 	.word	0x08003a75
 80039f4:	08003a75 	.word	0x08003a75
 80039f8:	08003a75 	.word	0x08003a75
 80039fc:	08003a75 	.word	0x08003a75
 8003a00:	08003a51 	.word	0x08003a51
 8003a04:	08003a63 	.word	0x08003a63
	    {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 fdb9 	bl	8004580 <process_FC1>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 8003a18:	e02d      	b.n	8003a76 <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fe68 	bl	80046f0 <process_FC3>
 8003a20:	4603      	mov	r3, r0
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 8003a2a:	e024      	b.n	8003a76 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 feca 	bl	80047c6 <process_FC5>
 8003a32:	4603      	mov	r3, r0
 8003a34:	461a      	mov	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 8003a3c:	e01b      	b.n	8003a76 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 ff1b 	bl	800487a <process_FC6>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461a      	mov	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 8003a4e:	e012      	b.n	8003a76 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 ff44 	bl	80048de <process_FC15>
 8003a56:	4603      	mov	r3, r0
 8003a58:	461a      	mov	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 8003a60:	e009      	b.n	8003a76 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 ffca 	bl	80049fc <process_FC16>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 8003a72:	e000      	b.n	8003a76 <StartTaskModbusSlave+0x186>
			default:
				break;
 8003a74:	bf00      	nop
	    }

	    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2100      	movs	r1, #0
 8003a82:	f002 f94b 	bl	8005d1c <xQueueGenericSend>
	    //return i8state;
	    continue;
 8003a86:	e000      	b.n	8003a8a <StartTaskModbusSlave+0x19a>
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 8003a88:	bf00      	nop
  {
 8003a8a:	e737      	b.n	80038fc <StartTaskModbusSlave+0xc>

08003a8c <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	f107 001c 	add.w	r0, r7, #28
 8003a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8003aac:	4618      	mov	r0, r3
 8003aae:	f002 fb9f 	bl	80061f0 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7a1b      	ldrb	r3, [r3, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <SendQuery+0x32>
 8003aba:	23ff      	movs	r3, #255	; 0xff
 8003abc:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f993 30b3 	ldrsb.w	r3, [r3, #179]	; 0xb3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <SendQuery+0x40>
 8003ac8:	23fe      	movs	r3, #254	; 0xfe
 8003aca:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8003acc:	7f3b      	ldrb	r3, [r7, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <SendQuery+0x4c>
 8003ad2:	7f3b      	ldrb	r3, [r7, #28]
 8003ad4:	2bf7      	cmp	r3, #247	; 0xf7
 8003ad6:	d901      	bls.n	8003adc <SendQuery+0x50>
 8003ad8:	23f7      	movs	r3, #247	; 0xf7
 8003ada:	73bb      	strb	r3, [r7, #14]

	if(error)
 8003adc:	7bbb      	ldrb	r3, [r7, #14]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00e      	beq.n	8003b00 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 8003ae2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8003af0:	2300      	movs	r3, #0
 8003af2:	2200      	movs	r2, #0
 8003af4:	2100      	movs	r1, #0
 8003af6:	f002 f911 	bl	8005d1c <xQueueGenericSend>
		 return error;
 8003afa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003afe:	e129      	b.n	8003d54 <SendQuery+0x2c8>
	}


	modH->au16regs = telegram.au16reg;
 8003b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->au8Buffer[ ID ]         = telegram.u8id;
 8003b08:	7f3a      	ldrb	r2, [r7, #28]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	74da      	strb	r2, [r3, #19]
	modH->au8Buffer[ FUNC ]       = telegram.u8fct;
 8003b0e:	7f7a      	ldrb	r2, [r7, #29]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	751a      	strb	r2, [r3, #20]
	modH->au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8003b14:	8bfb      	ldrh	r3, [r7, #30]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	755a      	strb	r2, [r3, #21]
	modH->au8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8003b20:	8bfb      	ldrh	r3, [r7, #30]
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8003b28:	7f7b      	ldrb	r3, [r7, #29]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	2b0f      	cmp	r3, #15
 8003b2e:	f200 80fe 	bhi.w	8003d2e <SendQuery+0x2a2>
 8003b32:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <SendQuery+0xac>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b79 	.word	0x08003b79
 8003b3c:	08003b79 	.word	0x08003b79
 8003b40:	08003b79 	.word	0x08003b79
 8003b44:	08003b79 	.word	0x08003b79
 8003b48:	08003b97 	.word	0x08003b97
 8003b4c:	08003bb9 	.word	0x08003bb9
 8003b50:	08003d2f 	.word	0x08003d2f
 8003b54:	08003d2f 	.word	0x08003d2f
 8003b58:	08003d2f 	.word	0x08003d2f
 8003b5c:	08003d2f 	.word	0x08003d2f
 8003b60:	08003d2f 	.word	0x08003d2f
 8003b64:	08003d2f 	.word	0x08003d2f
 8003b68:	08003d2f 	.word	0x08003d2f
 8003b6c:	08003d2f 	.word	0x08003d2f
 8003b70:	08003bdb 	.word	0x08003bdb
 8003b74:	08003c99 	.word	0x08003c99
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8003b78:	8c3b      	ldrh	r3, [r7, #32]
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8003b84:	8c3b      	ldrh	r3, [r7, #32]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2206      	movs	r2, #6
 8003b90:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8003b94:	e0cb      	b.n	8003d2e <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->au8Buffer[ NB_HI ]      = (( telegram.au16reg[0]> 0) ? 0xff : 0);
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <SendQuery+0x116>
 8003b9e:	22ff      	movs	r2, #255	; 0xff
 8003ba0:	e000      	b.n	8003ba4 <SendQuery+0x118>
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = 0;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2206      	movs	r2, #6
 8003bb2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8003bb6:	e0ba      	b.n	8003d2e <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte( telegram.au16reg[0]);
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.au16reg[0]);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2206      	movs	r2, #6
 8003bd4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8003bd8:	e0a9      	b.n	8003d2e <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8003bda:	8c3b      	ldrh	r3, [r7, #32]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 8003be2:	7a7b      	ldrb	r3, [r7, #9]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8003be8:	8c3b      	ldrh	r3, [r7, #32]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <SendQuery+0x174>
	    {
	        u8bytesno++;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 8003bfa:	7a7b      	ldrb	r3, [r7, #9]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	727b      	strb	r3, [r7, #9]
	    }

	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8003c00:	8c3b      	ldrh	r3, [r7, #32]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8003c0c:	8c3b      	ldrh	r3, [r7, #32]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = u8bytesno;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7bfa      	ldrb	r2, [r7, #15]
 8003c18:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2207      	movs	r2, #7
 8003c1e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	81bb      	strh	r3, [r7, #12]
 8003c26:	e031      	b.n	8003c8c <SendQuery+0x200>
	    {
	        if(i%2)
 8003c28:	89bb      	ldrh	r3, [r7, #12]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00f      	beq.n	8003c54 <SendQuery+0x1c8>
	        {
	        	modH->au8Buffer[ modH->u8BufferSize ] = lowByte( telegram.au16reg[ i/2 ] );
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3e:	89bb      	ldrh	r3, [r7, #12]
 8003c40:	085b      	lsrs	r3, r3, #1
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	440b      	add	r3, r1
 8003c50:	74da      	strb	r2, [r3, #19]
 8003c52:	e010      	b.n	8003c76 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->au8Buffer[  modH->u8BufferSize ] = highByte( telegram.au16reg[ i/2 ] );
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5e:	89bb      	ldrh	r3, [r7, #12]
 8003c60:	085b      	lsrs	r3, r3, #1
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	4413      	add	r3, r2
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	440b      	add	r3, r1
 8003c74:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8003c86:	89bb      	ldrh	r3, [r7, #12]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	81bb      	strh	r3, [r7, #12]
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	89ba      	ldrh	r2, [r7, #12]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d3c8      	bcc.n	8003c28 <SendQuery+0x19c>
	    }
	    break;
 8003c96:	e04a      	b.n	8003d2e <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8003c98:	8c3b      	ldrh	r3, [r7, #32]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8003ca4:	8c3b      	ldrh	r3, [r7, #32]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8003cac:	8c3b      	ldrh	r3, [r7, #32]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2207      	movs	r2, #7
 8003cbc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	817b      	strh	r3, [r7, #10]
 8003cc4:	e02e      	b.n	8003d24 <SendQuery+0x298>
	    {

	        modH->au8Buffer[  modH->u8BufferSize ] = highByte(  telegram.au16reg[ i ] );
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003ccc:	4619      	mov	r1, r3
 8003cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd0:	897b      	ldrh	r3, [r7, #10]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4413      	add	r3, r2
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	440b      	add	r3, r1
 8003ce2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003cea:	3301      	adds	r3, #1
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte( telegram.au16reg[ i ] );
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfe:	897b      	ldrh	r3, [r7, #10]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4413      	add	r3, r2
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	440b      	add	r3, r1
 8003d0c:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003d14:	3301      	adds	r3, #1
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8003d1e:	897b      	ldrh	r3, [r7, #10]
 8003d20:	3301      	adds	r3, #1
 8003d22:	817b      	strh	r3, [r7, #10]
 8003d24:	8c3b      	ldrh	r3, [r7, #32]
 8003d26:	897a      	ldrh	r2, [r7, #10]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d3cc      	bcc.n	8003cc6 <SendQuery+0x23a>
	    }
	    break;
 8003d2c:	bf00      	nop
	}

	xSemaphoreGive(modH->ModBusSphrHandle);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8003d34:	2300      	movs	r3, #0
 8003d36:	2200      	movs	r2, #0
 8003d38:	2100      	movs	r1, #0
 8003d3a:	f001 ffef 	bl	8005d1c <xQueueGenericSend>

	sendTxBuffer(modH);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fb8c 	bl	800445c <sendTxBuffer>
	modH->i8state = COM_WAITING;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	modH->i8lastError = 0;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	749a      	strb	r2, [r3, #18]
	return 0;
 8003d52:	2300      	movs	r3, #0


}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d5e:	b004      	add	sp, #16
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop

08003d64 <StartTaskModbusMaster>:




void StartTaskModbusMaster(void *argument)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08c      	sub	sp, #48	; 0x30
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
  int8_t i8state;

  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d76:	f107 010c 	add.w	r1, r7, #12
 8003d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 f95a 	bl	8006038 <xQueueReceive>

	  /*Format and Send query */
	  SendQuery(modH, telegram);
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	f107 030c 	add.w	r3, r7, #12
 8003d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d90:	f7ff fe7c 	bl	8003a8c <SendQuery>

	  /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
	  ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8003d94:	f04f 31ff 	mov.w	r1, #4294967295
 8003d98:	2001      	movs	r0, #1
 8003d9a:	f003 fca7 	bl	80076ec <ulTaskNotifyTake>
 8003d9e:	6238      	str	r0, [r7, #32]
	  modH->i8lastError = 0;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	2200      	movs	r2, #0
 8003da4:	749a      	strb	r2, [r3, #18]

      if(ulNotificationValue == NO_REPLY)
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	2bff      	cmp	r3, #255	; 0xff
 8003daa:	d118      	bne.n	8003dde <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    	  modH->i8lastError = NO_REPLY;
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	22ff      	movs	r2, #255	; 0xff
 8003db8:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8003dca:	69b8      	ldr	r0, [r7, #24]
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	f003 fcd0 	bl	800777c <xTaskGenericNotify>
    	  continue;
 8003ddc:	e097      	b.n	8003f0e <StartTaskModbusMaster+0x1aa>
      {
    	  i8state = getRxBuffer(modH);
      }

#else
      i8state = getRxBuffer(modH);
 8003dde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003de0:	f000 f98a 	bl	80040f8 <getRxBuffer>
 8003de4:	4603      	mov	r3, r0
 8003de6:	77fb      	strb	r3, [r7, #31]
#endif

	  //modH->u8lastError = i8state;

	  if (i8state < 6){
 8003de8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	dc18      	bgt.n	8003e22 <StartTaskModbusMaster+0xbe>

		  modH->i8state = COM_IDLE;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
		  modH->i8lastError = ERR_BAD_SIZE;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	22fa      	movs	r2, #250	; 0xfa
 8003dfc:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8003e04:	3301      	adds	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8003e0e:	69b8      	ldr	r0, [r7, #24]
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003e16:	4619      	mov	r1, r3
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	f003 fcae 	bl	800777c <xTaskGenericNotify>
		  continue;
 8003e20:	e075      	b.n	8003f0e <StartTaskModbusMaster+0x1aa>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8003e28:	2300      	movs	r3, #0
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2103      	movs	r1, #3
 8003e32:	f003 fefb 	bl	8007c2c <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8003e36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e38:	f000 f8f0 	bl	800401c <validateAnswer>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	77bb      	strb	r3, [r7, #30]
	  if (u8exception != 0)
 8003e40:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d010      	beq.n	8003e6a <StartTaskModbusMaster+0x106>
	  {
		 modH->i8state = COM_IDLE;
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
         modH->i8lastError = u8exception;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	7fba      	ldrb	r2, [r7, #30]
 8003e54:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8003e56:	69b8      	ldr	r0, [r7, #24]
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	2300      	movs	r3, #0
 8003e62:	2203      	movs	r2, #3
 8003e64:	f003 fc8a 	bl	800777c <xTaskGenericNotify>
	     continue;
 8003e68:	e051      	b.n	8003f0e <StartTaskModbusMaster+0x1aa>
	  }



	  modH->i8lastError = u8exception;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	7fba      	ldrb	r2, [r7, #30]
 8003e6e:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003e76:	f04f 31ff 	mov.w	r1, #4294967295
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f002 f9b8 	bl	80061f0 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->au8Buffer[ FUNC ] )
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	7d1b      	ldrb	r3, [r3, #20]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	2b0f      	cmp	r3, #15
 8003e88:	d82a      	bhi.n	8003ee0 <StartTaskModbusMaster+0x17c>
 8003e8a:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <StartTaskModbusMaster+0x12c>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003ed1 	.word	0x08003ed1
 8003e94:	08003ed1 	.word	0x08003ed1
 8003e98:	08003ed9 	.word	0x08003ed9
 8003e9c:	08003ed9 	.word	0x08003ed9
 8003ea0:	08003ee1 	.word	0x08003ee1
 8003ea4:	08003ee1 	.word	0x08003ee1
 8003ea8:	08003ee1 	.word	0x08003ee1
 8003eac:	08003ee1 	.word	0x08003ee1
 8003eb0:	08003ee1 	.word	0x08003ee1
 8003eb4:	08003ee1 	.word	0x08003ee1
 8003eb8:	08003ee1 	.word	0x08003ee1
 8003ebc:	08003ee1 	.word	0x08003ee1
 8003ec0:	08003ee1 	.word	0x08003ee1
 8003ec4:	08003ee1 	.word	0x08003ee1
 8003ec8:	08003ee1 	.word	0x08003ee1
 8003ecc:	08003ee1 	.word	0x08003ee1
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to au16regs buffer
	      get_FC1(modH);
 8003ed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ed2:	f000 f81d 	bl	8003f10 <get_FC1>
	      break;
 8003ed6:	e004      	b.n	8003ee2 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to au16regs buffer
	      get_FC3(modH);
 8003ed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eda:	f000 f871 	bl	8003fc0 <get_FC3>
	      break;
 8003ede:	e000      	b.n	8003ee2 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8003ee0:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	f001 ff11 	bl	8005d1c <xQueueGenericSend>
	  //return i8state;
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8003efa:	69b8      	ldr	r0, [r7, #24]
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003f02:	4619      	mov	r1, r3
 8003f04:	2300      	movs	r3, #0
 8003f06:	2203      	movs	r2, #3
 8003f08:	f003 fc38 	bl	800777c <xTaskGenericNotify>
	  continue;
 8003f0c:	bf00      	nop
  {
 8003f0e:	e72f      	b.n	8003d70 <StartTaskModbusMaster+0xc>

08003f10 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	73fb      	strb	r3, [r7, #15]
 8003f20:	e045      	b.n	8003fae <get_FC1+0x9e>

        if(i%2)
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d01d      	beq.n	8003f6a <get_FC1+0x5a>
        {
        	modH->au16regs[i/2]= word(modH->au8Buffer[i+u8byte], lowByte(modH->au16regs[i/2]));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	18d4      	adds	r4, r2, r3
 8003f3e:	7bfa      	ldrb	r2, [r7, #15]
 8003f40:	7bbb      	ldrb	r3, [r7, #14]
 8003f42:	4413      	add	r3, r2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	4413      	add	r3, r2
 8003f48:	7cd8      	ldrb	r0, [r3, #19]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f000 fa06 	bl	8004370 <word>
 8003f64:	4603      	mov	r3, r0
 8003f66:	8023      	strh	r3, [r4, #0]
 8003f68:	e01e      	b.n	8003fa8 <get_FC1+0x98>
        }
        else
        {

        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	18d4      	adds	r4, r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	0a1b      	lsrs	r3, r3, #8
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	b2d8      	uxtb	r0, r3
 8003f92:	7bfa      	ldrb	r2, [r7, #15]
 8003f94:	7bbb      	ldrb	r3, [r7, #14]
 8003f96:	4413      	add	r3, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	7cdb      	ldrb	r3, [r3, #19]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	f000 f9e6 	bl	8004370 <word>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	3301      	adds	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	7d5b      	ldrb	r3, [r3, #21]
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d3b4      	bcc.n	8003f22 <get_FC1+0x12>
        }

     }
}
 8003fb8:	bf00      	nop
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd90      	pop	{r4, r7, pc}

08003fc0 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73bb      	strb	r3, [r7, #14]
 8003fd0:	e019      	b.n	8004006 <get_FC3+0x46>
    {
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003fd8:	7bbb      	ldrb	r3, [r7, #14]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	18d4      	adds	r4, r2, r3
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	7cd8      	ldrb	r0, [r3, #19]
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	7cdb      	ldrb	r3, [r3, #19]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	f000 f9bd 	bl	8004370 <word>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8004000:	7bbb      	ldrb	r3, [r7, #14]
 8004002:	3301      	adds	r3, #1
 8004004:	73bb      	strb	r3, [r7, #14]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7d5b      	ldrb	r3, [r3, #21]
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	b2db      	uxtb	r3, r3
 800400e:	7bba      	ldrb	r2, [r7, #14]
 8004010:	429a      	cmp	r2, r3
 8004012:	d3de      	bcc.n	8003fd2 <get_FC3+0x12>
    }
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	bd90      	pop	{r4, r7, pc}

0800401c <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc
    uint16_t u16MsgCRC =
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800402a:	3b02      	subs	r3, #2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4413      	add	r3, r2
 8004030:	7cdb      	ldrb	r3, [r3, #19]
 8004032:	021b      	lsls	r3, r3, #8
         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8004034:	b21a      	sxth	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800403c:	3b01      	subs	r3, #1
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	440b      	add	r3, r1
 8004042:	7cdb      	ldrb	r3, [r3, #19]
 8004044:	b21b      	sxth	r3, r3
 8004046:	4313      	orrs	r3, r2
 8004048:	b21b      	sxth	r3, r3
    uint16_t u16MsgCRC =
 800404a:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f103 0213 	add.w	r2, r3, #19
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004058:	3b02      	subs	r3, #2
 800405a:	b2db      	uxtb	r3, r3
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 f998 	bl	8004394 <calcCRC>
 8004064:	4603      	mov	r3, r0
 8004066:	461a      	mov	r2, r3
 8004068:	89bb      	ldrh	r3, [r7, #12]
 800406a:	4293      	cmp	r3, r2
 800406c:	d009      	beq.n	8004082 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004074:	3301      	adds	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 800407e:	23fc      	movs	r3, #252	; 0xfc
 8004080:	e034      	b.n	80040ec <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->au8Buffer[ FUNC ] & 0x80) != 0)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	7d1b      	ldrb	r3, [r3, #20]
 8004086:	b25b      	sxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	da09      	bge.n	80040a0 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004092:	3301      	adds	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 800409c:	23fb      	movs	r3, #251	; 0xfb
 800409e:	e025      	b.n	80040ec <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 80040a0:	2300      	movs	r3, #0
 80040a2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80040a4:	2300      	movs	r3, #0
 80040a6:	73bb      	strb	r3, [r7, #14]
 80040a8:	e00c      	b.n	80040c4 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->au8Buffer[FUNC])
 80040aa:	7bbb      	ldrb	r3, [r7, #14]
 80040ac:	4a11      	ldr	r2, [pc, #68]	; (80040f4 <validateAnswer+0xd8>)
 80040ae:	5cd2      	ldrb	r2, [r2, r3]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7d1b      	ldrb	r3, [r3, #20]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d102      	bne.n	80040be <validateAnswer+0xa2>
        {
            isSupported = 1;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
            break;
 80040bc:	e005      	b.n	80040ca <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80040be:	7bbb      	ldrb	r3, [r7, #14]
 80040c0:	3301      	adds	r3, #1
 80040c2:	73bb      	strb	r3, [r7, #14]
 80040c4:	7bbb      	ldrb	r3, [r7, #14]
 80040c6:	2b07      	cmp	r3, #7
 80040c8:	d9ef      	bls.n	80040aa <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	f083 0301 	eor.w	r3, r3, #1
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80040dc:	3301      	adds	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	080083f8 	.word	0x080083f8

080040f8 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int8_t getRxBuffer(modbusHandler_t *modH)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    bool bBuffOverflow = false;
 8004100:	2300      	movs	r3, #0
 8004102:	73fb      	strb	r3, [r7, #15]

    if (modH->EN_Port)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <getRxBuffer+0x24>
    {
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68d8      	ldr	r0, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8a1b      	ldrh	r3, [r3, #16]
 8004114:	2200      	movs	r2, #0
 8004116:	4619      	mov	r1, r3
 8004118:	f7fd f970 	bl	80013fc <HAL_GPIO_WritePin>
    }

    modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	33c8      	adds	r3, #200	; 0xc8
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fa65 	bl	80035f0 <RingCountBytes>
 8004126:	4603      	mov	r3, r0
 8004128:	461a      	mov	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    RingGetAllBytes(&modH->xBufferRX, modH->au8Buffer);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3313      	adds	r3, #19
 800413a:	4619      	mov	r1, r3
 800413c:	4610      	mov	r0, r2
 800413e:	f7ff f9f7 	bl	8003530 <RingGetAllBytes>

    modH->u16InCnt++;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004148:	3301      	adds	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c


    if (bBuffOverflow)
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <getRxBuffer+0x76>
    {
    	modH->u16errCnt++;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800415e:	3301      	adds	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BUFF_OVERFLOW;  //using queues this will not happen
 8004168:	f06f 0302 	mvn.w	r3, #2
 800416c:	e003      	b.n	8004176 <getRxBuffer+0x7e>
    }
    return modH->u8BufferSize;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004174:	b25b      	sxtb	r3, r3
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc
	    uint16_t u16MsgCRC =
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800418e:	3b02      	subs	r3, #2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	4413      	add	r3, r2
 8004194:	7cdb      	ldrb	r3, [r3, #19]
 8004196:	021b      	lsls	r3, r3, #8
	         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8004198:	b21a      	sxth	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80041a0:	3b01      	subs	r3, #1
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	440b      	add	r3, r1
 80041a6:	7cdb      	ldrb	r3, [r3, #19]
 80041a8:	b21b      	sxth	r3, r3
 80041aa:	4313      	orrs	r3, r2
 80041ac:	b21b      	sxth	r3, r3
	    uint16_t u16MsgCRC =
 80041ae:	81bb      	strh	r3, [r7, #12]
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f103 0213 	add.w	r2, r3, #19
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80041bc:	3b02      	subs	r3, #2
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f000 f8e6 	bl	8004394 <calcCRC>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	89bb      	ldrh	r3, [r7, #12]
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d009      	beq.n	80041e6 <validateRequest+0x66>
	    {
	    	modH->u16errCnt ++;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80041d8:	3301      	adds	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return NO_REPLY;
 80041e2:	23ff      	movs	r3, #255	; 0xff
 80041e4:	e0be      	b.n	8004364 <validateRequest+0x1e4>
	    }

	    // check fct code
	    bool isSupported = false;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80041ea:	2300      	movs	r3, #0
 80041ec:	73bb      	strb	r3, [r7, #14]
 80041ee:	e00c      	b.n	800420a <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->au8Buffer[FUNC])
 80041f0:	7bbb      	ldrb	r3, [r7, #14]
 80041f2:	4a5e      	ldr	r2, [pc, #376]	; (800436c <validateRequest+0x1ec>)
 80041f4:	5cd2      	ldrb	r2, [r2, r3]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	7d1b      	ldrb	r3, [r3, #20]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d102      	bne.n	8004204 <validateRequest+0x84>
	        {
	            isSupported = 1;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
	            break;
 8004202:	e005      	b.n	8004210 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8004204:	7bbb      	ldrb	r3, [r7, #14]
 8004206:	3301      	adds	r3, #1
 8004208:	73bb      	strb	r3, [r7, #14]
 800420a:	7bbb      	ldrb	r3, [r7, #14]
 800420c:	2b07      	cmp	r3, #7
 800420e:	d9ef      	bls.n	80041f0 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	f083 0301 	eor.w	r3, r3, #1
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d009      	beq.n	8004230 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004222:	3301      	adds	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 800422c:	2301      	movs	r3, #1
 800422e:	e099      	b.n	8004364 <validateRequest+0x1e4>
	    }

	    // check start address & nb range
	    uint16_t u16regs = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	817b      	strh	r3, [r7, #10]
	    //uint8_t u8regs;
	    switch ( modH->au8Buffer[ FUNC ] )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	7d1b      	ldrb	r3, [r3, #20]
 8004238:	3b01      	subs	r3, #1
 800423a:	2b0f      	cmp	r3, #15
 800423c:	f200 8091 	bhi.w	8004362 <validateRequest+0x1e2>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <validateRequest+0xc8>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	08004289 	.word	0x08004289
 800424c:	08004289 	.word	0x08004289
 8004250:	08004317 	.word	0x08004317
 8004254:	08004317 	.word	0x08004317
 8004258:	080042cd 	.word	0x080042cd
 800425c:	080042f3 	.word	0x080042f3
 8004260:	08004363 	.word	0x08004363
 8004264:	08004363 	.word	0x08004363
 8004268:	08004363 	.word	0x08004363
 800426c:	08004363 	.word	0x08004363
 8004270:	08004363 	.word	0x08004363
 8004274:	08004363 	.word	0x08004363
 8004278:	08004363 	.word	0x08004363
 800427c:	08004363 	.word	0x08004363
 8004280:	08004289 	.word	0x08004289
 8004284:	08004317 	.word	0x08004317
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	7d5a      	ldrb	r2, [r3, #21]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	7d9b      	ldrb	r3, [r3, #22]
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f000 f86c 	bl	8004370 <word>
 8004298:	4603      	mov	r3, r0
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	7dda      	ldrb	r2, [r3, #23]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	7e1b      	ldrb	r3, [r3, #24]
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f000 f861 	bl	8004370 <word>
 80042ae:	4603      	mov	r3, r0
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	897b      	ldrh	r3, [r7, #10]
 80042b8:	4413      	add	r3, r2
 80042ba:	817b      	strh	r3, [r7, #10]
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80042c2:	897a      	ldrh	r2, [r7, #10]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d945      	bls.n	8004354 <validateRequest+0x1d4>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e04b      	b.n	8004364 <validateRequest+0x1e4>
	        break;
	    case MB_FC_WRITE_COIL:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7d5a      	ldrb	r2, [r3, #21]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	7d9b      	ldrb	r3, [r3, #22]
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f000 f84a 	bl	8004370 <word>
 80042dc:	4603      	mov	r3, r0
 80042de:	091b      	lsrs	r3, r3, #4
 80042e0:	817b      	strh	r3, [r7, #10]
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80042e8:	897a      	ldrh	r2, [r7, #10]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d934      	bls.n	8004358 <validateRequest+0x1d8>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e038      	b.n	8004364 <validateRequest+0x1e4>
	        break;
	    case MB_FC_WRITE_REGISTER :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	7d5a      	ldrb	r2, [r3, #21]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	7d9b      	ldrb	r3, [r3, #22]
 80042fa:	4619      	mov	r1, r3
 80042fc:	4610      	mov	r0, r2
 80042fe:	f000 f837 	bl	8004370 <word>
 8004302:	4603      	mov	r3, r0
 8004304:	817b      	strh	r3, [r7, #10]
	        if (u16regs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800430c:	897a      	ldrh	r2, [r7, #10]
 800430e:	429a      	cmp	r2, r3
 8004310:	d924      	bls.n	800435c <validateRequest+0x1dc>
 8004312:	2302      	movs	r3, #2
 8004314:	e026      	b.n	8004364 <validateRequest+0x1e4>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	7d5a      	ldrb	r2, [r3, #21]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	7d9b      	ldrb	r3, [r3, #22]
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f000 f825 	bl	8004370 <word>
 8004326:	4603      	mov	r3, r0
 8004328:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	7dda      	ldrb	r2, [r3, #23]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	7e1b      	ldrb	r3, [r3, #24]
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f000 f81b 	bl	8004370 <word>
 800433a:	4603      	mov	r3, r0
 800433c:	461a      	mov	r2, r3
 800433e:	897b      	ldrh	r3, [r7, #10]
 8004340:	4413      	add	r3, r2
 8004342:	817b      	strh	r3, [r7, #10]
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800434a:	897a      	ldrh	r2, [r7, #10]
 800434c:	429a      	cmp	r2, r3
 800434e:	d907      	bls.n	8004360 <validateRequest+0x1e0>
 8004350:	2302      	movs	r3, #2
 8004352:	e007      	b.n	8004364 <validateRequest+0x1e4>
	        break;
 8004354:	bf00      	nop
 8004356:	e004      	b.n	8004362 <validateRequest+0x1e2>
	        break;
 8004358:	bf00      	nop
 800435a:	e002      	b.n	8004362 <validateRequest+0x1e2>
	        break;
 800435c:	bf00      	nop
 800435e:	e000      	b.n	8004362 <validateRequest+0x1e2>
	        break;
 8004360:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8004362:	2300      	movs	r3, #0

}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	080083f8 	.word	0x080083f8

08004370 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	460a      	mov	r2, r1
 800437a:	71fb      	strb	r3, [r7, #7]
 800437c:	4613      	mov	r3, r2
 800437e:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8004380:	79bb      	ldrb	r3, [r7, #6]
 8004382:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8004388:	89bb      	ldrh	r3, [r7, #12]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 80043a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043a4:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 80043a6:	2300      	movs	r3, #0
 80043a8:	74fb      	strb	r3, [r7, #19]
 80043aa:	e023      	b.n	80043f4 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 80043ac:	7cfb      	ldrb	r3, [r7, #19]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	4053      	eors	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 80043bc:	2301      	movs	r3, #1
 80043be:	74bb      	strb	r3, [r7, #18]
 80043c0:	e012      	b.n	80043e8 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]
            temp >>=1;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	617b      	str	r3, [r7, #20]
            if (flag)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <calcCRC+0x4e>
                temp ^= 0xA001;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 80043dc:	f083 0301 	eor.w	r3, r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 80043e2:	7cbb      	ldrb	r3, [r7, #18]
 80043e4:	3301      	adds	r3, #1
 80043e6:	74bb      	strb	r3, [r7, #18]
 80043e8:	7cbb      	ldrb	r3, [r7, #18]
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d9e9      	bls.n	80043c2 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	3301      	adds	r3, #1
 80043f2:	74fb      	strb	r3, [r7, #19]
 80043f4:	7cfa      	ldrb	r2, [r7, #19]
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d3d7      	bcc.n	80043ac <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	60bb      	str	r3, [r7, #8]
    temp = (temp << 8) | temp2;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	021a      	lsls	r2, r3, #8
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	b29b      	uxth	r3, r3
 8004410:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	b29b      	uxth	r3, r3

}
 8004416:	4618      	mov	r0, r3
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	6039      	str	r1, [r7, #0]
 800442a:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->au8Buffer[ FUNC ];  // get the original FUNC code
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	7d1b      	ldrb	r3, [r3, #20]
 8004430:	73fb      	strb	r3, [r7, #15]

    modH->au8Buffer[ ID ]      = modH->u8id;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	7a1a      	ldrb	r2, [r3, #8]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	74da      	strb	r2, [r3, #19]
    modH->au8Buffer[ FUNC ]    = u8func + 0x80;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	3b80      	subs	r3, #128	; 0x80
 800443e:	b2da      	uxtb	r2, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	751a      	strb	r2, [r3, #20]
    modH->au8Buffer[ 2 ]       = u8exception;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	79fa      	ldrb	r2, [r7, #7]
 8004448:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2203      	movs	r2, #3
 800444e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8004452:	bf00      	nop
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
void sendTxBuffer(modbusHandler_t *modH)
{
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b087      	sub	sp, #28
 8004460:	af02      	add	r7, sp, #8
 8004462:	6078      	str	r0, [r7, #4]
    // append CRC to message
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f103 0213 	add.w	r2, r3, #19
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f7ff ff8e 	bl	8004394 <calcCRC>
 8004478:	4603      	mov	r3, r0
 800447a:	81fb      	strh	r3, [r7, #14]
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004482:	4619      	mov	r1, r3
 8004484:	89fb      	ldrh	r3, [r7, #14]
 8004486:	0a1b      	lsrs	r3, r3, #8
 8004488:	b29b      	uxth	r3, r3
 800448a:	b2da      	uxtb	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	440b      	add	r3, r1
 8004490:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004498:	3301      	adds	r3, #1
 800449a:	b2da      	uxtb	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80044a8:	4619      	mov	r1, r3
 80044aa:	89fb      	ldrh	r3, [r7, #14]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	440b      	add	r3, r1
 80044b2:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80044ba:	3301      	adds	r3, #1
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC ==1
    if(modH->u8TypeHW == USART_HW)
    {
#endif
    	if (modH->EN_Port != NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d007      	beq.n	80044dc <sendTxBuffer+0x80>
        {
            // set RS485 transceiver to transmit mode
        	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68d8      	ldr	r0, [r3, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8a1b      	ldrh	r3, [r3, #16]
 80044d4:	2201      	movs	r2, #1
 80044d6:	4619      	mov	r1, r3
 80044d8:	f7fc ff90 	bl	80013fc <HAL_GPIO_WritePin>
        }

        // transfer buffer to serial line
        HAL_UART_Transmit_IT(modH->port, modH->au8Buffer,  modH->u8BufferSize);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6858      	ldr	r0, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f103 0113 	add.w	r1, r3, #19
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	f7fe fb77 	bl	8002be2 <HAL_UART_Transmit_IT>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait notification from TXE interrupt
 80044f4:	f04f 31ff 	mov.w	r1, #4294967295
 80044f8:	2001      	movs	r0, #1
 80044fa:	f003 f8f7 	bl	80076ec <ulTaskNotifyTake>


         if (modH->EN_Port != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d018      	beq.n	8004538 <sendTxBuffer+0xdc>
             //return RS485 transceiver to receive mode

        	 #if defined(STM32H745xx) || defined(STM32H743xx)  || defined(STM32F303xE)
        	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
             #else
        	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8004506:	e007      	b.n	8004518 <sendTxBuffer+0xbc>
	    	 #endif
        	 {
        		taskYIELD();
 8004508:	4b1c      	ldr	r3, [pc, #112]	; (800457c <sendTxBuffer+0x120>)
 800450a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	f3bf 8f6f 	isb	sy
        	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0ef      	beq.n	8004508 <sendTxBuffer+0xac>
        	 }
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68d8      	ldr	r0, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8a1b      	ldrh	r3, [r3, #16]
 8004530:	2200      	movs	r2, #0
 8004532:	4619      	mov	r1, r3
 8004534:	f7fc ff62 	bl	80013fc <HAL_GPIO_WritePin>
         }


         // set timeout for master query
         if(modH->uiModbusType == MASTER_RTU )
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d10c      	bne.n	800455a <sendTxBuffer+0xfe>
         {
 	    	xTimerReset(modH->xTimerTimeout,0);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8004546:	f002 fbff 	bl	8006d48 <xTaskGetTickCount>
 800454a:	4602      	mov	r2, r0
 800454c:	2300      	movs	r3, #0
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	2300      	movs	r3, #0
 8004552:	2102      	movs	r1, #2
 8004554:	4620      	mov	r0, r4
 8004556:	f003 fb69 	bl	8007c2c <xTimerGenericCommand>

	}
#endif


     modH->u8BufferSize = 0;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8004568:	3301      	adds	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

}
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	bd90      	pop	{r4, r7, pc}
 800457a:	bf00      	nop
 800457c:	e000ed04 	.word	0xe000ed04

08004580 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	7d5a      	ldrb	r2, [r3, #21]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	7d9b      	ldrb	r3, [r3, #22]
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f7ff feec 	bl	8004370 <word>
 8004598:	4603      	mov	r3, r0
 800459a:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	7dda      	ldrb	r2, [r3, #23]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	7e1b      	ldrb	r3, [r3, #24]
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f7ff fee2 	bl	8004370 <word>
 80045ac:	4603      	mov	r3, r0
 80045ae:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 80045b0:	8a3b      	ldrh	r3, [r7, #16]
 80045b2:	08db      	lsrs	r3, r3, #3
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 80045b8:	8a3b      	ldrh	r3, [r7, #16]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <process_FC1+0x4a>
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	3301      	adds	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	7dfa      	ldrb	r2, [r7, #23]
 80045ce:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2203      	movs	r2, #3
 80045d4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->au8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80045de:	461a      	mov	r2, r3
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	4413      	add	r3, r2
 80045e4:	3b01      	subs	r3, #1
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	2200      	movs	r2, #0
 80045ec:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	82bb      	strh	r3, [r7, #20]
 80045f6:	e05b      	b.n	80046b0 <process_FC1+0x130>
    {
        u16coil = u16StartCoil + u16currentCoil;
 80045f8:	8a7a      	ldrh	r2, [r7, #18]
 80045fa:	8abb      	ldrh	r3, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	81fb      	strh	r3, [r7, #14]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8004600:	89fb      	ldrh	r3, [r7, #14]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	b29b      	uxth	r3, r3
 8004606:	737b      	strb	r3, [r7, #13]
        u8currentBit = (uint8_t) (u16coil % 16);
 8004608:	89fb      	ldrh	r3, [r7, #14]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	733b      	strb	r3, [r7, #12]

        bitWrite(
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004618:	7b7b      	ldrb	r3, [r7, #13]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	4413      	add	r3, r2
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	7b3b      	ldrb	r3, [r7, #12]
 8004624:	fa42 f303 	asr.w	r3, r2, r3
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d015      	beq.n	800465c <process_FC1+0xdc>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004636:	4618      	mov	r0, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800463e:	461a      	mov	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4413      	add	r3, r2
 8004644:	7cda      	ldrb	r2, [r3, #19]
 8004646:	7dbb      	ldrb	r3, [r7, #22]
 8004648:	2101      	movs	r1, #1
 800464a:	fa01 f303 	lsl.w	r3, r1, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	4313      	orrs	r3, r2
 8004652:	b2da      	uxtb	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4403      	add	r3, r0
 8004658:	74da      	strb	r2, [r3, #19]
 800465a:	e016      	b.n	800468a <process_FC1+0x10a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004662:	4618      	mov	r0, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800466a:	461a      	mov	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4413      	add	r3, r2
 8004670:	7cda      	ldrb	r2, [r3, #19]
 8004672:	7dbb      	ldrb	r3, [r7, #22]
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f303 	lsl.w	r3, r1, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	4013      	ands	r3, r2
 8004682:	b2da      	uxtb	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4403      	add	r3, r0
 8004688:	74da      	strb	r2, [r3, #19]
        	modH->au8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->au16regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800468a:	7dbb      	ldrb	r3, [r7, #22]
 800468c:	3301      	adds	r3, #1
 800468e:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8004690:	7dbb      	ldrb	r3, [r7, #22]
 8004692:	2b07      	cmp	r3, #7
 8004694:	d909      	bls.n	80046aa <process_FC1+0x12a>
        {
            u8bitsno = 0;
 8004696:	2300      	movs	r3, #0
 8004698:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80046a0:	3301      	adds	r3, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80046aa:	8abb      	ldrh	r3, [r7, #20]
 80046ac:	3301      	adds	r3, #1
 80046ae:	82bb      	strh	r3, [r7, #20]
 80046b0:	8aba      	ldrh	r2, [r7, #20]
 80046b2:	8a3b      	ldrh	r3, [r7, #16]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d39f      	bcc.n	80045f8 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 80046b8:	8a3b      	ldrh	r3, [r7, #16]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d007      	beq.n	80046d4 <process_FC1+0x154>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80046ca:	3301      	adds	r3, #1
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80046da:	3302      	adds	r3, #2
 80046dc:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff febc 	bl	800445c <sendTxBuffer>
    return u8CopyBufferSize;
 80046e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]

    uint8_t u8StartAdd = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	7d5a      	ldrb	r2, [r3, #21]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	7d9b      	ldrb	r3, [r3, #22]
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f7ff fe34 	bl	8004370 <word>
 8004708:	4603      	mov	r3, r0
 800470a:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	7dda      	ldrb	r2, [r3, #23]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	7e1b      	ldrb	r3, [r3, #24]
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f7ff fe2a 	bl	8004370 <word>
 800471c:	4603      	mov	r3, r0
 800471e:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;

    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 8004720:	7b7b      	ldrb	r3, [r7, #13]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	b2da      	uxtb	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2203      	movs	r2, #3
 800472e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8004732:	7bbb      	ldrb	r3, [r7, #14]
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e032      	b.n	800479e <process_FC3+0xae>
    {
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800473e:	4619      	mov	r1, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	0a1b      	lsrs	r3, r3, #8
 8004750:	b29b      	uxth	r3, r3
 8004752:	b2da      	uxtb	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	440b      	add	r3, r1
 8004758:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004760:	3301      	adds	r3, #1
 8004762:	b2da      	uxtb	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->au8Buffer[ modH->u8BufferSize ] = lowByte(modH->au16regs[i]);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004770:	4619      	mov	r1, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4413      	add	r3, r2
 800477e:	881b      	ldrh	r3, [r3, #0]
 8004780:	b2da      	uxtb	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	440b      	add	r3, r1
 8004786:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800478e:	3301      	adds	r3, #1
 8004790:	b2da      	uxtb	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	3301      	adds	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
 800479e:	7bfa      	ldrb	r2, [r7, #15]
 80047a0:	7bb9      	ldrb	r1, [r7, #14]
 80047a2:	7b7b      	ldrb	r3, [r7, #13]
 80047a4:	440b      	add	r3, r1
 80047a6:	429a      	cmp	r2, r3
 80047a8:	dbc6      	blt.n	8004738 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80047b0:	3302      	adds	r3, #2
 80047b2:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fe51 	bl	800445c <sendTxBuffer>

    return u8CopyBufferSize;
 80047ba:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	7d5a      	ldrb	r2, [r3, #21]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	7d9b      	ldrb	r3, [r3, #22]
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f7ff fdc9 	bl	8004370 <word>
 80047de:	4603      	mov	r3, r0
 80047e0:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
 80047e2:	89fb      	ldrh	r3, [r7, #14]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	737b      	strb	r3, [r7, #13]
    u8currentBit = (uint8_t) (u16coil % 16);
 80047ea:	89fb      	ldrh	r3, [r7, #14]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	733b      	strb	r3, [r7, #12]

    // write to coil
    bitWrite(
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	7ddb      	ldrb	r3, [r3, #23]
 80047f8:	2bff      	cmp	r3, #255	; 0xff
 80047fa:	d115      	bne.n	8004828 <process_FC5+0x62>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004802:	7b7b      	ldrb	r3, [r7, #13]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4413      	add	r3, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 800480e:	7b7a      	ldrb	r2, [r7, #13]
 8004810:	0052      	lsls	r2, r2, #1
 8004812:	440a      	add	r2, r1
 8004814:	8811      	ldrh	r1, [r2, #0]
 8004816:	7b3a      	ldrb	r2, [r7, #12]
 8004818:	2001      	movs	r0, #1
 800481a:	fa00 f202 	lsl.w	r2, r0, r2
 800481e:	b292      	uxth	r2, r2
 8004820:	430a      	orrs	r2, r1
 8004822:	b292      	uxth	r2, r2
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	e016      	b.n	8004856 <process_FC5+0x90>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800482e:	7b7b      	ldrb	r3, [r7, #13]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 800483a:	7b7a      	ldrb	r2, [r7, #13]
 800483c:	0052      	lsls	r2, r2, #1
 800483e:	440a      	add	r2, r1
 8004840:	8811      	ldrh	r1, [r2, #0]
 8004842:	7b3a      	ldrb	r2, [r7, #12]
 8004844:	2001      	movs	r0, #1
 8004846:	fa00 f202 	lsl.w	r2, r0, r2
 800484a:	b292      	uxth	r2, r2
 800484c:	43d2      	mvns	r2, r2
 800484e:	b292      	uxth	r2, r2
 8004850:	400a      	ands	r2, r1
 8004852:	b292      	uxth	r2, r2
 8004854:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2206      	movs	r2, #6
 800485a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004864:	3302      	adds	r3, #2
 8004866:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff fdf7 	bl	800445c <sendTxBuffer>

    return u8CopyBufferSize;
 800486e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]

    uint8_t u8add = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	7d5a      	ldrb	r2, [r3, #21]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	7d9b      	ldrb	r3, [r3, #22]
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f7ff fd6f 	bl	8004370 <word>
 8004892:	4603      	mov	r3, r0
 8004894:	73fb      	strb	r3, [r7, #15]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7dda      	ldrb	r2, [r3, #23]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	7e1b      	ldrb	r3, [r3, #24]
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f7ff fd65 	bl	8004370 <word>
 80048a6:	4603      	mov	r3, r0
 80048a8:	81bb      	strh	r3, [r7, #12]

    modH->au16regs[ u8add ] = u16val;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	4413      	add	r3, r2
 80048b6:	89ba      	ldrh	r2, [r7, #12]
 80048b8:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2206      	movs	r2, #6
 80048be:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize +2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80048c8:	3302      	adds	r3, #2
 80048ca:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff fdc5 	bl	800445c <sendTxBuffer>

    return u8CopyBufferSize;
 80048d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b086      	sub	sp, #24
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	7d5a      	ldrb	r2, [r3, #21]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7d9b      	ldrb	r3, [r3, #22]
 80048ee:	4619      	mov	r1, r3
 80048f0:	4610      	mov	r0, r2
 80048f2:	f7ff fd3d 	bl	8004370 <word>
 80048f6:	4603      	mov	r3, r0
 80048f8:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7dda      	ldrb	r2, [r3, #23]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	7e1b      	ldrb	r3, [r3, #24]
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f7ff fd33 	bl	8004370 <word>
 800490a:	4603      	mov	r3, r0
 800490c:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800490e:	2300      	movs	r3, #0
 8004910:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8004912:	2307      	movs	r3, #7
 8004914:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8004916:	2300      	movs	r3, #0
 8004918:	82bb      	strh	r3, [r7, #20]
 800491a:	e059      	b.n	80049d0 <process_FC15+0xf2>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800491c:	8a7a      	ldrh	r2, [r7, #18]
 800491e:	8abb      	ldrh	r3, [r7, #20]
 8004920:	4413      	add	r3, r2
 8004922:	81fb      	strh	r3, [r7, #14]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8004924:	89fb      	ldrh	r3, [r7, #14]
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	b29b      	uxth	r3, r3
 800492a:	737b      	strb	r3, [r7, #13]
        u8currentBit = (uint8_t) (u16coil % 16);
 800492c:	89fb      	ldrh	r3, [r7, #14]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	733b      	strb	r3, [r7, #12]

        bTemp = bitRead(
 8004936:	7dfb      	ldrb	r3, [r7, #23]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	4413      	add	r3, r2
 800493c:	7cdb      	ldrb	r3, [r3, #19]
 800493e:	461a      	mov	r2, r3
 8004940:	7dbb      	ldrb	r3, [r7, #22]
 8004942:	fa42 f303 	asr.w	r3, r2, r3
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	bf14      	ite	ne
 800494e:	2301      	movne	r3, #1
 8004950:	2300      	moveq	r3, #0
 8004952:	72fb      	strb	r3, [r7, #11]
        			modH->au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8004954:	7afb      	ldrb	r3, [r7, #11]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d015      	beq.n	8004986 <process_FC15+0xa8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004960:	7b7b      	ldrb	r3, [r7, #13]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	4413      	add	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 800496c:	7b7a      	ldrb	r2, [r7, #13]
 800496e:	0052      	lsls	r2, r2, #1
 8004970:	440a      	add	r2, r1
 8004972:	8811      	ldrh	r1, [r2, #0]
 8004974:	7b3a      	ldrb	r2, [r7, #12]
 8004976:	2001      	movs	r0, #1
 8004978:	fa00 f202 	lsl.w	r2, r0, r2
 800497c:	b292      	uxth	r2, r2
 800497e:	430a      	orrs	r2, r1
 8004980:	b292      	uxth	r2, r2
 8004982:	801a      	strh	r2, [r3, #0]
 8004984:	e016      	b.n	80049b4 <process_FC15+0xd6>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800498c:	7b7b      	ldrb	r3, [r7, #13]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	4413      	add	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 8004998:	7b7a      	ldrb	r2, [r7, #13]
 800499a:	0052      	lsls	r2, r2, #1
 800499c:	440a      	add	r2, r1
 800499e:	8811      	ldrh	r1, [r2, #0]
 80049a0:	7b3a      	ldrb	r2, [r7, #12]
 80049a2:	2001      	movs	r0, #1
 80049a4:	fa00 f202 	lsl.w	r2, r0, r2
 80049a8:	b292      	uxth	r2, r2
 80049aa:	43d2      	mvns	r2, r2
 80049ac:	b292      	uxth	r2, r2
 80049ae:	400a      	ands	r2, r1
 80049b0:	b292      	uxth	r2, r2
 80049b2:	801a      	strh	r2, [r3, #0]
            modH->au16regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 80049b4:	7dbb      	ldrb	r3, [r7, #22]
 80049b6:	3301      	adds	r3, #1
 80049b8:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80049ba:	7dbb      	ldrb	r3, [r7, #22]
 80049bc:	2b07      	cmp	r3, #7
 80049be:	d904      	bls.n	80049ca <process_FC15+0xec>
        {
            u8bitsno = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	3301      	adds	r3, #1
 80049c8:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80049ca:	8abb      	ldrh	r3, [r7, #20]
 80049cc:	3301      	adds	r3, #1
 80049ce:	82bb      	strh	r3, [r7, #20]
 80049d0:	8aba      	ldrh	r2, [r7, #20]
 80049d2:	8a3b      	ldrh	r3, [r7, #16]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d3a1      	bcc.n	800491c <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2206      	movs	r2, #6
 80049dc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80049e6:	3302      	adds	r3, #2
 80049e8:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fd36 	bl	800445c <sendTxBuffer>
    return u8CopyBufferSize;
 80049f0:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
    uint8_t u8StartAdd = modH->au8Buffer[ ADD_HI ] << 8 | modH->au8Buffer[ ADD_LO ];
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	7d5b      	ldrb	r3, [r3, #21]
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	b25a      	sxtb	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	7d9b      	ldrb	r3, [r3, #22]
 8004a10:	b25b      	sxtb	r3, r3
 8004a12:	4313      	orrs	r3, r2
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = modH->au8Buffer[ NB_HI ] << 8 | modH->au8Buffer[ NB_LO ];
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	7ddb      	ldrb	r3, [r3, #23]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	b25a      	sxtb	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	7e1b      	ldrb	r3, [r3, #24]
 8004a24:	b25b      	sxtb	r3, r3
 8004a26:	4313      	orrs	r3, r2
 8004a28:	b25b      	sxtb	r3, r3
 8004a2a:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    modH->au8Buffer[ NB_HI ]   = 0;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	75da      	strb	r2, [r3, #23]
    modH->au8Buffer[ NB_LO ]   = u8regsno;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	7b7a      	ldrb	r2, [r7, #13]
 8004a36:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2206      	movs	r2, #6
 8004a3c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u8regsno; i++)
 8004a40:	2300      	movs	r3, #0
 8004a42:	73fb      	strb	r3, [r7, #15]
 8004a44:	e01d      	b.n	8004a82 <process_FC16+0x86>
    {
        temp = word(
        		modH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	3307      	adds	r3, #7
        temp = word(
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4413      	add	r3, r2
 8004a50:	7cd8      	ldrb	r0, [r3, #19]
				modH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	3304      	adds	r3, #4
 8004a56:	005b      	lsls	r3, r3, #1
        temp = word(
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	7cdb      	ldrb	r3, [r3, #19]
 8004a5e:	4619      	mov	r1, r3
 8004a60:	f7ff fc86 	bl	8004370 <word>
 8004a64:	4603      	mov	r3, r0
 8004a66:	817b      	strh	r3, [r7, #10]

        modH->au16regs[ u8StartAdd + i ] = temp;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004a6e:	7bb9      	ldrb	r1, [r7, #14]
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	440b      	add	r3, r1
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	4413      	add	r3, r2
 8004a78:	897a      	ldrh	r2, [r7, #10]
 8004a7a:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u8regsno; i++)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
 8004a82:	7bfa      	ldrb	r2, [r7, #15]
 8004a84:	7b7b      	ldrb	r3, [r7, #13]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d3dd      	bcc.n	8004a46 <process_FC16+0x4a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004a90:	3302      	adds	r3, #2
 8004a92:	727b      	strb	r3, [r7, #9]
    sendTxBuffer(modH);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff fce1 	bl	800445c <sendTxBuffer>

    return u8CopyBufferSize;
 8004a9a:	f997 3009 	ldrsb.w	r3, [r7, #9]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	e019      	b.n	8004aee <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart )
 8004aba:	4a17      	ldr	r2, [pc, #92]	; (8004b18 <HAL_UART_TxCpltCallback+0x70>)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8004aca:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <HAL_UART_TxCpltCallback+0x70>)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8004ad6:	f107 0308 	add.w	r3, r7, #8
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	2300      	movs	r3, #0
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	f002 feed 	bl	80078c0 <xTaskGenericNotifyFromISR>

	   		break;
 8004ae6:	e008      	b.n	8004afa <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3301      	adds	r3, #1
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_UART_TxCpltCallback+0x74>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	dcdf      	bgt.n	8004aba <HAL_UART_TxCpltCallback+0x12>

	   	}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <HAL_UART_TxCpltCallback+0x68>
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <HAL_UART_TxCpltCallback+0x78>)
 8004b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20001938 	.word	0x20001938
 8004b1c:	2000002c 	.word	0x2000002c
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e03b      	b.n	8004bae <HAL_UART_RxCpltCallback+0x8a>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8004b36:	4a28      	ldr	r2, [pc, #160]	; (8004bd8 <HAL_UART_RxCpltCallback+0xb4>)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d130      	bne.n	8004ba8 <HAL_UART_RxCpltCallback+0x84>
    	{
    		RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8004b46:	4a24      	ldr	r2, [pc, #144]	; (8004bd8 <HAL_UART_RxCpltCallback+0xb4>)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4e:	f103 00c8 	add.w	r0, r3, #200	; 0xc8
 8004b52:	4a21      	ldr	r2, [pc, #132]	; (8004bd8 <HAL_UART_RxCpltCallback+0xb4>)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b5a:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f7fe fca8 	bl	80034b4 <RingAdd>
    		HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8004b64:	4a1c      	ldr	r2, [pc, #112]	; (8004bd8 <HAL_UART_RxCpltCallback+0xb4>)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6c:	6858      	ldr	r0, [r3, #4]
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <HAL_UART_RxCpltCallback+0xb4>)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b76:	33b2      	adds	r3, #178	; 0xb2
 8004b78:	2201      	movs	r2, #1
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	f7fe f875 	bl	8002c6a <HAL_UART_Receive_IT>
    		xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8004b80:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <HAL_UART_RxCpltCallback+0xb4>)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b88:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 8004b8c:	f002 f8ea 	bl	8006d64 <xTaskGetTickCountFromISR>
 8004b90:	4601      	mov	r1, r0
 8004b92:	f107 0208 	add.w	r2, r7, #8
 8004b96:	2300      	movs	r3, #0
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	460a      	mov	r2, r1
 8004b9e:	2107      	movs	r1, #7
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f003 f843 	bl	8007c2c <xTimerGenericCommand>
    		break;
 8004ba6:	e008      	b.n	8004bba <HAL_UART_RxCpltCallback+0x96>
    for (i = 0; i < numberHandlers; i++ )
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_UART_RxCpltCallback+0xb8>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	dcbd      	bgt.n	8004b36 <HAL_UART_RxCpltCallback+0x12>
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <HAL_UART_RxCpltCallback+0xac>
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <HAL_UART_RxCpltCallback+0xbc>)
 8004bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd90      	pop	{r4, r7, pc}
 8004bd8:	20001938 	.word	0x20001938
 8004bdc:	2000002c 	.word	0x2000002c
 8004be0:	e000ed04 	.word	0xe000ed04

08004be4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bea:	f3ef 8305 	mrs	r3, IPSR
 8004bee:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10f      	bne.n	8004c16 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfa:	607b      	str	r3, [r7, #4]
  return(result);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <osKernelInitialize+0x32>
 8004c02:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <osKernelInitialize+0x60>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d109      	bne.n	8004c1e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c0a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c0e:	603b      	str	r3, [r7, #0]
  return(result);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004c16:	f06f 0305 	mvn.w	r3, #5
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	e00c      	b.n	8004c38 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <osKernelInitialize+0x60>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d105      	bne.n	8004c32 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <osKernelInitialize+0x60>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e002      	b.n	8004c38 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004c32:	f04f 33ff 	mov.w	r3, #4294967295
 8004c36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004c38:	68fb      	ldr	r3, [r7, #12]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr
 8004c44:	20000030 	.word	0x20000030

08004c48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c4e:	f3ef 8305 	mrs	r3, IPSR
 8004c52:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10f      	bne.n	8004c7a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c5e:	607b      	str	r3, [r7, #4]
  return(result);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <osKernelStart+0x32>
 8004c66:	4b11      	ldr	r3, [pc, #68]	; (8004cac <osKernelStart+0x64>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d109      	bne.n	8004c82 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c72:	603b      	str	r3, [r7, #0]
  return(result);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004c7a:	f06f 0305 	mvn.w	r3, #5
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e00e      	b.n	8004ca0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c82:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <osKernelStart+0x64>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d107      	bne.n	8004c9a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004c8a:	4b08      	ldr	r3, [pc, #32]	; (8004cac <osKernelStart+0x64>)
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004c90:	f001 ff4c 	bl	8006b2c <vTaskStartScheduler>
      stat = osOK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e002      	b.n	8004ca0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000030 	.word	0x20000030

08004cb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b092      	sub	sp, #72	; 0x48
 8004cb4:	af04      	add	r7, sp, #16
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cc0:	f3ef 8305 	mrs	r3, IPSR
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f040 8094 	bne.w	8004df6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cce:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd2:	623b      	str	r3, [r7, #32]
  return(result);
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f040 808d 	bne.w	8004df6 <osThreadNew+0x146>
 8004cdc:	4b48      	ldr	r3, [pc, #288]	; (8004e00 <osThreadNew+0x150>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d106      	bne.n	8004cf2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ce4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ce8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f040 8082 	bne.w	8004df6 <osThreadNew+0x146>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d07e      	beq.n	8004df6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004cfc:	2318      	movs	r3, #24
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004d00:	2300      	movs	r3, #0
 8004d02:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004d04:	f107 031b 	add.w	r3, r7, #27
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d045      	beq.n	8004da2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <osThreadNew+0x74>
        name = attr->name;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <osThreadNew+0x9a>
 8004d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3a:	2b38      	cmp	r3, #56	; 0x38
 8004d3c:	d805      	bhi.n	8004d4a <osThreadNew+0x9a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <osThreadNew+0x9e>
        return (NULL);
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e054      	b.n	8004df8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	089b      	lsrs	r3, r3, #2
 8004d5c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00e      	beq.n	8004d84 <osThreadNew+0xd4>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2b5b      	cmp	r3, #91	; 0x5b
 8004d6c:	d90a      	bls.n	8004d84 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d006      	beq.n	8004d84 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <osThreadNew+0xd4>
        mem = 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d82:	e010      	b.n	8004da6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10c      	bne.n	8004da6 <osThreadNew+0xf6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d108      	bne.n	8004da6 <osThreadNew+0xf6>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d104      	bne.n	8004da6 <osThreadNew+0xf6>
          mem = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da0:	e001      	b.n	8004da6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d110      	bne.n	8004dce <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004db4:	9202      	str	r2, [sp, #8]
 8004db6:	9301      	str	r3, [sp, #4]
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f001 fcea 	bl	800679c <xTaskCreateStatic>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	e013      	b.n	8004df6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d110      	bne.n	8004df6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	f107 0314 	add.w	r3, r7, #20
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f001 fd31 	bl	800684e <xTaskCreate>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d001      	beq.n	8004df6 <osThreadNew+0x146>
          hTask = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004df6:	697b      	ldr	r3, [r7, #20]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3738      	adds	r7, #56	; 0x38
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000030 	.word	0x20000030

08004e04 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e0c:	f3ef 8305 	mrs	r3, IPSR
 8004e10:	613b      	str	r3, [r7, #16]
  return(result);
 8004e12:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10f      	bne.n	8004e38 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e18:	f3ef 8310 	mrs	r3, PRIMASK
 8004e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d109      	bne.n	8004e38 <osDelay+0x34>
 8004e24:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <osDelay+0x58>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d109      	bne.n	8004e40 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e2c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e30:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <osDelay+0x3c>
    stat = osErrorISR;
 8004e38:	f06f 0305 	mvn.w	r3, #5
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e007      	b.n	8004e50 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f001 fe3a 	bl	8006ac4 <vTaskDelay>
    }
  }

  return (stat);
 8004e50:	697b      	ldr	r3, [r7, #20]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000030 	.word	0x20000030

08004e60 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08c      	sub	sp, #48	; 0x30
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e70:	f3ef 8305 	mrs	r3, IPSR
 8004e74:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e76:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f040 8088 	bne.w	8004f8e <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e82:	617b      	str	r3, [r7, #20]
  return(result);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f040 8081 	bne.w	8004f8e <osSemaphoreNew+0x12e>
 8004e8c:	4b42      	ldr	r3, [pc, #264]	; (8004f98 <osSemaphoreNew+0x138>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d105      	bne.n	8004ea0 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e94:	f3ef 8311 	mrs	r3, BASEPRI
 8004e98:	613b      	str	r3, [r7, #16]
  return(result);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d176      	bne.n	8004f8e <osSemaphoreNew+0x12e>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d073      	beq.n	8004f8e <osSemaphoreNew+0x12e>
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d86f      	bhi.n	8004f8e <osSemaphoreNew+0x12e>
    mem = -1;
 8004eae:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d015      	beq.n	8004ee6 <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d006      	beq.n	8004ed0 <osSemaphoreNew+0x70>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	2b4f      	cmp	r3, #79	; 0x4f
 8004ec8:	d902      	bls.n	8004ed0 <osSemaphoreNew+0x70>
        mem = 1;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	623b      	str	r3, [r7, #32]
 8004ece:	e00c      	b.n	8004eea <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d108      	bne.n	8004eea <osSemaphoreNew+0x8a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d104      	bne.n	8004eea <osSemaphoreNew+0x8a>
          mem = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	623b      	str	r3, [r7, #32]
 8004ee4:	e001      	b.n	8004eea <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d04d      	beq.n	8004f8e <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d129      	bne.n	8004f4c <osSemaphoreNew+0xec>
        if (mem == 1) {
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d10b      	bne.n	8004f16 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	2303      	movs	r3, #3
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	4613      	mov	r3, r2
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	f000 fdcd 	bl	8005aac <xQueueGenericCreateStatic>
 8004f12:	6278      	str	r0, [r7, #36]	; 0x24
 8004f14:	e005      	b.n	8004f22 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004f16:	2203      	movs	r2, #3
 8004f18:	2100      	movs	r1, #0
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	f000 fe38 	bl	8005b90 <xQueueGenericCreate>
 8004f20:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d022      	beq.n	8004f6e <osSemaphoreNew+0x10e>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01f      	beq.n	8004f6e <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2200      	movs	r2, #0
 8004f32:	2100      	movs	r1, #0
 8004f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f36:	f000 fef1 	bl	8005d1c <xQueueGenericSend>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d016      	beq.n	8004f6e <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8004f40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f42:	f001 fa5d 	bl	8006400 <vQueueDelete>
            hSemaphore = NULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4a:	e010      	b.n	8004f6e <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d108      	bne.n	8004f64 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	461a      	mov	r2, r3
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fe78 	bl	8005c50 <xQueueCreateCountingSemaphoreStatic>
 8004f60:	6278      	str	r0, [r7, #36]	; 0x24
 8004f62:	e004      	b.n	8004f6e <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fea7 	bl	8005cba <xQueueCreateCountingSemaphore>
 8004f6c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00c      	beq.n	8004f8e <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <osSemaphoreNew+0x122>
          name = attr->name;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	61fb      	str	r3, [r7, #28]
 8004f80:	e001      	b.n	8004f86 <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004f86:	69f9      	ldr	r1, [r7, #28]
 8004f88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f8a:	f001 fb83 	bl	8006694 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3728      	adds	r7, #40	; 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20000030 	.word	0x20000030

08004f9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08c      	sub	sp, #48	; 0x30
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fac:	f3ef 8305 	mrs	r3, IPSR
 8004fb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fb2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d170      	bne.n	800509a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d16a      	bne.n	800509a <osMessageQueueNew+0xfe>
 8004fc4:	4b37      	ldr	r3, [pc, #220]	; (80050a4 <osMessageQueueNew+0x108>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d105      	bne.n	8004fd8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8004fd0:	613b      	str	r3, [r7, #16]
  return(result);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d160      	bne.n	800509a <osMessageQueueNew+0xfe>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d05d      	beq.n	800509a <osMessageQueueNew+0xfe>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d05a      	beq.n	800509a <osMessageQueueNew+0xfe>
    mem = -1;
 8004fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d029      	beq.n	8005044 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d012      	beq.n	800501e <osMessageQueueNew+0x82>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b4f      	cmp	r3, #79	; 0x4f
 8004ffe:	d90e      	bls.n	800501e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695a      	ldr	r2, [r3, #20]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	429a      	cmp	r2, r3
 8005016:	d302      	bcc.n	800501e <osMessageQueueNew+0x82>
        mem = 1;
 8005018:	2301      	movs	r3, #1
 800501a:	623b      	str	r3, [r7, #32]
 800501c:	e014      	b.n	8005048 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d110      	bne.n	8005048 <osMessageQueueNew+0xac>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10c      	bne.n	8005048 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005032:	2b00      	cmp	r3, #0
 8005034:	d108      	bne.n	8005048 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d104      	bne.n	8005048 <osMessageQueueNew+0xac>
          mem = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	623b      	str	r3, [r7, #32]
 8005042:	e001      	b.n	8005048 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d10c      	bne.n	8005068 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6899      	ldr	r1, [r3, #8]
 8005056:	2300      	movs	r3, #0
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	460b      	mov	r3, r1
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fd24 	bl	8005aac <xQueueGenericCreateStatic>
 8005064:	6278      	str	r0, [r7, #36]	; 0x24
 8005066:	e008      	b.n	800507a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800506e:	2200      	movs	r2, #0
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fd8c 	bl	8005b90 <xQueueGenericCreate>
 8005078:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00c      	beq.n	800509a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <osMessageQueueNew+0xf2>
        name = attr->name;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	e001      	b.n	8005092 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005092:	69f9      	ldr	r1, [r7, #28]
 8005094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005096:	f001 fafd 	bl	8006694 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800509c:	4618      	mov	r0, r3
 800509e:	3728      	adds	r7, #40	; 0x28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20000030 	.word	0x20000030

080050a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a06      	ldr	r2, [pc, #24]	; (80050d0 <vApplicationGetIdleTaskMemory+0x28>)
 80050b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4a05      	ldr	r2, [pc, #20]	; (80050d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80050be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2280      	movs	r2, #128	; 0x80
 80050c4:	601a      	str	r2, [r3, #0]
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr
 80050d0:	20000034 	.word	0x20000034
 80050d4:	20000090 	.word	0x20000090

080050d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4a07      	ldr	r2, [pc, #28]	; (8005104 <vApplicationGetTimerTaskMemory+0x2c>)
 80050e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4a06      	ldr	r2, [pc, #24]	; (8005108 <vApplicationGetTimerTaskMemory+0x30>)
 80050ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050f6:	601a      	str	r2, [r3, #0]
}
 80050f8:	bf00      	nop
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20000290 	.word	0x20000290
 8005108:	200002ec 	.word	0x200002ec

0800510c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f103 0208 	add.w	r2, r3, #8
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f04f 32ff 	mov.w	r2, #4294967295
 8005124:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f103 0208 	add.w	r2, r3, #8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f103 0208 	add.w	r2, r3, #8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr

0800514a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr

08005162 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	601a      	str	r2, [r3, #0]
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051be:	d103      	bne.n	80051c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e00c      	b.n	80051e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3308      	adds	r3, #8
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	e002      	b.n	80051d6 <vListInsert+0x2e>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d9f6      	bls.n	80051d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	601a      	str	r2, [r3, #0]
}
 800520e:	bf00      	nop
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr

08005218 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6892      	ldr	r2, [r2, #8]
 800522e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6852      	ldr	r2, [r2, #4]
 8005238:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d103      	bne.n	800524c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	1e5a      	subs	r2, r3, #1
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr
	...

0800526c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3b04      	subs	r3, #4
 800527c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005284:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3b04      	subs	r3, #4
 800528a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f023 0201 	bic.w	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3b04      	subs	r3, #4
 800529a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800529c:	4a08      	ldr	r2, [pc, #32]	; (80052c0 <pxPortInitialiseStack+0x54>)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3b14      	subs	r3, #20
 80052a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3b20      	subs	r3, #32
 80052b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052b4:	68fb      	ldr	r3, [r7, #12]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr
 80052c0:	080052c5 	.word	0x080052c5

080052c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052ce:	4b10      	ldr	r3, [pc, #64]	; (8005310 <prvTaskExitError+0x4c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d6:	d009      	beq.n	80052ec <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	e7fe      	b.n	80052ea <prvTaskExitError+0x26>
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052fe:	bf00      	nop
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0fc      	beq.n	8005300 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr
 8005310:	2000000c 	.word	0x2000000c
	...

08005320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <pxCurrentTCBConst2>)
 8005322:	6819      	ldr	r1, [r3, #0]
 8005324:	6808      	ldr	r0, [r1, #0]
 8005326:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800532a:	f380 8809 	msr	PSP, r0
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f04f 0000 	mov.w	r0, #0
 8005336:	f380 8811 	msr	BASEPRI, r0
 800533a:	f04e 0e0d 	orr.w	lr, lr, #13
 800533e:	4770      	bx	lr

08005340 <pxCurrentTCBConst2>:
 8005340:	2000130c 	.word	0x2000130c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop

08005348 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005348:	4806      	ldr	r0, [pc, #24]	; (8005364 <prvPortStartFirstTask+0x1c>)
 800534a:	6800      	ldr	r0, [r0, #0]
 800534c:	6800      	ldr	r0, [r0, #0]
 800534e:	f380 8808 	msr	MSP, r0
 8005352:	b662      	cpsie	i
 8005354:	b661      	cpsie	f
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	df00      	svc	0
 8005360:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005362:	bf00      	nop
 8005364:	e000ed08 	.word	0xe000ed08

08005368 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800536e:	4b31      	ldr	r3, [pc, #196]	; (8005434 <xPortStartScheduler+0xcc>)
 8005370:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	22ff      	movs	r2, #255	; 0xff
 800537e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005390:	b2da      	uxtb	r2, r3
 8005392:	4b29      	ldr	r3, [pc, #164]	; (8005438 <xPortStartScheduler+0xd0>)
 8005394:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005396:	4b29      	ldr	r3, [pc, #164]	; (800543c <xPortStartScheduler+0xd4>)
 8005398:	2207      	movs	r2, #7
 800539a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800539c:	e009      	b.n	80053b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800539e:	4b27      	ldr	r3, [pc, #156]	; (800543c <xPortStartScheduler+0xd4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	4a25      	ldr	r2, [pc, #148]	; (800543c <xPortStartScheduler+0xd4>)
 80053a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053b2:	78fb      	ldrb	r3, [r7, #3]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ba:	2b80      	cmp	r3, #128	; 0x80
 80053bc:	d0ef      	beq.n	800539e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053be:	4b1f      	ldr	r3, [pc, #124]	; (800543c <xPortStartScheduler+0xd4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f1c3 0307 	rsb	r3, r3, #7
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d009      	beq.n	80053de <xPortStartScheduler+0x76>
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	60bb      	str	r3, [r7, #8]
 80053dc:	e7fe      	b.n	80053dc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053de:	4b17      	ldr	r3, [pc, #92]	; (800543c <xPortStartScheduler+0xd4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	4a15      	ldr	r2, [pc, #84]	; (800543c <xPortStartScheduler+0xd4>)
 80053e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053e8:	4b14      	ldr	r3, [pc, #80]	; (800543c <xPortStartScheduler+0xd4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053f0:	4a12      	ldr	r2, [pc, #72]	; (800543c <xPortStartScheduler+0xd4>)
 80053f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053fc:	4a10      	ldr	r2, [pc, #64]	; (8005440 <xPortStartScheduler+0xd8>)
 80053fe:	4b10      	ldr	r3, [pc, #64]	; (8005440 <xPortStartScheduler+0xd8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005406:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005408:	4a0d      	ldr	r2, [pc, #52]	; (8005440 <xPortStartScheduler+0xd8>)
 800540a:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <xPortStartScheduler+0xd8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005412:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005414:	f000 f8b0 	bl	8005578 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <xPortStartScheduler+0xdc>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800541e:	f7ff ff93 	bl	8005348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005422:	f001 fd6f 	bl	8006f04 <vTaskSwitchContext>
	prvTaskExitError();
 8005426:	f7ff ff4d 	bl	80052c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	e000e400 	.word	0xe000e400
 8005438:	200006ec 	.word	0x200006ec
 800543c:	200006f0 	.word	0x200006f0
 8005440:	e000ed20 	.word	0xe000ed20
 8005444:	2000000c 	.word	0x2000000c

08005448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005460:	4b0e      	ldr	r3, [pc, #56]	; (800549c <vPortEnterCritical+0x54>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3301      	adds	r3, #1
 8005466:	4a0d      	ldr	r2, [pc, #52]	; (800549c <vPortEnterCritical+0x54>)
 8005468:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800546a:	4b0c      	ldr	r3, [pc, #48]	; (800549c <vPortEnterCritical+0x54>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d10e      	bne.n	8005490 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005472:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <vPortEnterCritical+0x58>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d009      	beq.n	8005490 <vPortEnterCritical+0x48>
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	603b      	str	r3, [r7, #0]
 800548e:	e7fe      	b.n	800548e <vPortEnterCritical+0x46>
	}
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	2000000c 	.word	0x2000000c
 80054a0:	e000ed04 	.word	0xe000ed04

080054a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054aa:	4b10      	ldr	r3, [pc, #64]	; (80054ec <vPortExitCritical+0x48>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d109      	bne.n	80054c6 <vPortExitCritical+0x22>
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	607b      	str	r3, [r7, #4]
 80054c4:	e7fe      	b.n	80054c4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80054c6:	4b09      	ldr	r3, [pc, #36]	; (80054ec <vPortExitCritical+0x48>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	4a07      	ldr	r2, [pc, #28]	; (80054ec <vPortExitCritical+0x48>)
 80054ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054d0:	4b06      	ldr	r3, [pc, #24]	; (80054ec <vPortExitCritical+0x48>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d104      	bne.n	80054e2 <vPortExitCritical+0x3e>
 80054d8:	2300      	movs	r3, #0
 80054da:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bc80      	pop	{r7}
 80054ea:	4770      	bx	lr
 80054ec:	2000000c 	.word	0x2000000c

080054f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054f0:	f3ef 8009 	mrs	r0, PSP
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <pxCurrentTCBConst>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005500:	6010      	str	r0, [r2, #0]
 8005502:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005506:	f04f 0050 	mov.w	r0, #80	; 0x50
 800550a:	f380 8811 	msr	BASEPRI, r0
 800550e:	f001 fcf9 	bl	8006f04 <vTaskSwitchContext>
 8005512:	f04f 0000 	mov.w	r0, #0
 8005516:	f380 8811 	msr	BASEPRI, r0
 800551a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800551e:	6819      	ldr	r1, [r3, #0]
 8005520:	6808      	ldr	r0, [r1, #0]
 8005522:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005526:	f380 8809 	msr	PSP, r0
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	4770      	bx	lr

08005530 <pxCurrentTCBConst>:
 8005530:	2000130c 	.word	0x2000130c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop

08005538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005550:	f001 fc1a 	bl	8006d88 <xTaskIncrementTick>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800555a:	4b06      	ldr	r3, [pc, #24]	; (8005574 <SysTick_Handler+0x3c>)
 800555c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	2300      	movs	r3, #0
 8005564:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	e000ed04 	.word	0xe000ed04

08005578 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <vPortSetupTimerInterrupt+0x30>)
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005582:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <vPortSetupTimerInterrupt+0x34>)
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005588:	4a09      	ldr	r2, [pc, #36]	; (80055b0 <vPortSetupTimerInterrupt+0x38>)
 800558a:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <vPortSetupTimerInterrupt+0x3c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	490a      	ldr	r1, [pc, #40]	; (80055b8 <vPortSetupTimerInterrupt+0x40>)
 8005590:	fba1 1303 	umull	r1, r3, r1, r3
 8005594:	099b      	lsrs	r3, r3, #6
 8005596:	3b01      	subs	r3, #1
 8005598:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800559a:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <vPortSetupTimerInterrupt+0x30>)
 800559c:	2207      	movs	r2, #7
 800559e:	601a      	str	r2, [r3, #0]
}
 80055a0:	bf00      	nop
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr
 80055a8:	e000e010 	.word	0xe000e010
 80055ac:	e000e018 	.word	0xe000e018
 80055b0:	e000e014 	.word	0xe000e014
 80055b4:	20000000 	.word	0x20000000
 80055b8:	10624dd3 	.word	0x10624dd3

080055bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055c2:	f3ef 8305 	mrs	r3, IPSR
 80055c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b0f      	cmp	r3, #15
 80055cc:	d913      	bls.n	80055f6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055ce:	4a15      	ldr	r2, [pc, #84]	; (8005624 <vPortValidateInterruptPriority+0x68>)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055d8:	4b13      	ldr	r3, [pc, #76]	; (8005628 <vPortValidateInterruptPriority+0x6c>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	7afa      	ldrb	r2, [r7, #11]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d209      	bcs.n	80055f6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	e7fe      	b.n	80055f4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055f6:	4b0d      	ldr	r3, [pc, #52]	; (800562c <vPortValidateInterruptPriority+0x70>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055fe:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <vPortValidateInterruptPriority+0x74>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d909      	bls.n	800561a <vPortValidateInterruptPriority+0x5e>
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	e7fe      	b.n	8005618 <vPortValidateInterruptPriority+0x5c>
	}
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr
 8005624:	e000e3f0 	.word	0xe000e3f0
 8005628:	200006ec 	.word	0x200006ec
 800562c:	e000ed0c 	.word	0xe000ed0c
 8005630:	200006f0 	.word	0x200006f0

08005634 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	; 0x28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005640:	f001 fad8 	bl	8006bf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005644:	4b57      	ldr	r3, [pc, #348]	; (80057a4 <pvPortMalloc+0x170>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800564c:	f000 f90c 	bl	8005868 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005650:	4b55      	ldr	r3, [pc, #340]	; (80057a8 <pvPortMalloc+0x174>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4013      	ands	r3, r2
 8005658:	2b00      	cmp	r3, #0
 800565a:	f040 808c 	bne.w	8005776 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01c      	beq.n	800569e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005664:	2208      	movs	r2, #8
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4413      	add	r3, r2
 800566a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	2b00      	cmp	r3, #0
 8005674:	d013      	beq.n	800569e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f023 0307 	bic.w	r3, r3, #7
 800567c:	3308      	adds	r3, #8
 800567e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	2b00      	cmp	r3, #0
 8005688:	d009      	beq.n	800569e <pvPortMalloc+0x6a>
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	e7fe      	b.n	800569c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d068      	beq.n	8005776 <pvPortMalloc+0x142>
 80056a4:	4b41      	ldr	r3, [pc, #260]	; (80057ac <pvPortMalloc+0x178>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d863      	bhi.n	8005776 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056ae:	4b40      	ldr	r3, [pc, #256]	; (80057b0 <pvPortMalloc+0x17c>)
 80056b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056b2:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <pvPortMalloc+0x17c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056b8:	e004      	b.n	80056c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d203      	bcs.n	80056d6 <pvPortMalloc+0xa2>
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f1      	bne.n	80056ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056d6:	4b33      	ldr	r3, [pc, #204]	; (80057a4 <pvPortMalloc+0x170>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056dc:	429a      	cmp	r2, r3
 80056de:	d04a      	beq.n	8005776 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2208      	movs	r2, #8
 80056e6:	4413      	add	r3, r2
 80056e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	1ad2      	subs	r2, r2, r3
 80056fa:	2308      	movs	r3, #8
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	429a      	cmp	r2, r3
 8005700:	d91e      	bls.n	8005740 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4413      	add	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	2b00      	cmp	r3, #0
 8005712:	d009      	beq.n	8005728 <pvPortMalloc+0xf4>
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	e7fe      	b.n	8005726 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800573a:	69b8      	ldr	r0, [r7, #24]
 800573c:	f000 f8f6 	bl	800592c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005740:	4b1a      	ldr	r3, [pc, #104]	; (80057ac <pvPortMalloc+0x178>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	4a18      	ldr	r2, [pc, #96]	; (80057ac <pvPortMalloc+0x178>)
 800574c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800574e:	4b17      	ldr	r3, [pc, #92]	; (80057ac <pvPortMalloc+0x178>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b18      	ldr	r3, [pc, #96]	; (80057b4 <pvPortMalloc+0x180>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d203      	bcs.n	8005762 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800575a:	4b14      	ldr	r3, [pc, #80]	; (80057ac <pvPortMalloc+0x178>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <pvPortMalloc+0x180>)
 8005760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <pvPortMalloc+0x174>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	431a      	orrs	r2, r3
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005776:	f001 fa4b 	bl	8006c10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	2b00      	cmp	r3, #0
 8005782:	d009      	beq.n	8005798 <pvPortMalloc+0x164>
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	e7fe      	b.n	8005796 <pvPortMalloc+0x162>
	return pvReturn;
 8005798:	69fb      	ldr	r3, [r7, #28]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3728      	adds	r7, #40	; 0x28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200012fc 	.word	0x200012fc
 80057a8:	20001308 	.word	0x20001308
 80057ac:	20001300 	.word	0x20001300
 80057b0:	200012f4 	.word	0x200012f4
 80057b4:	20001304 	.word	0x20001304

080057b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d046      	beq.n	8005858 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057ca:	2308      	movs	r3, #8
 80057cc:	425b      	negs	r3, r3
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4413      	add	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	4b20      	ldr	r3, [pc, #128]	; (8005860 <vPortFree+0xa8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4013      	ands	r3, r2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <vPortFree+0x42>
 80057e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	e7fe      	b.n	80057f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d009      	beq.n	8005816 <vPortFree+0x5e>
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	60bb      	str	r3, [r7, #8]
 8005814:	e7fe      	b.n	8005814 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	4b11      	ldr	r3, [pc, #68]	; (8005860 <vPortFree+0xa8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4013      	ands	r3, r2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d019      	beq.n	8005858 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d115      	bne.n	8005858 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <vPortFree+0xa8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	43db      	mvns	r3, r3
 8005836:	401a      	ands	r2, r3
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800583c:	f001 f9da 	bl	8006bf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	4b07      	ldr	r3, [pc, #28]	; (8005864 <vPortFree+0xac>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4413      	add	r3, r2
 800584a:	4a06      	ldr	r2, [pc, #24]	; (8005864 <vPortFree+0xac>)
 800584c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800584e:	6938      	ldr	r0, [r7, #16]
 8005850:	f000 f86c 	bl	800592c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005854:	f001 f9dc 	bl	8006c10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005858:	bf00      	nop
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20001308 	.word	0x20001308
 8005864:	20001300 	.word	0x20001300

08005868 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800586e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005872:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005874:	4b27      	ldr	r3, [pc, #156]	; (8005914 <prvHeapInit+0xac>)
 8005876:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00c      	beq.n	800589c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3307      	adds	r3, #7
 8005886:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0307 	bic.w	r3, r3, #7
 800588e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <prvHeapInit+0xac>)
 8005898:	4413      	add	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058a0:	4a1d      	ldr	r2, [pc, #116]	; (8005918 <prvHeapInit+0xb0>)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058a6:	4b1c      	ldr	r3, [pc, #112]	; (8005918 <prvHeapInit+0xb0>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4413      	add	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058b4:	2208      	movs	r2, #8
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0307 	bic.w	r3, r3, #7
 80058c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4a15      	ldr	r2, [pc, #84]	; (800591c <prvHeapInit+0xb4>)
 80058c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058ca:	4b14      	ldr	r3, [pc, #80]	; (800591c <prvHeapInit+0xb4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2200      	movs	r2, #0
 80058d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058d2:	4b12      	ldr	r3, [pc, #72]	; (800591c <prvHeapInit+0xb4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	1ad2      	subs	r2, r2, r3
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058e8:	4b0c      	ldr	r3, [pc, #48]	; (800591c <prvHeapInit+0xb4>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <prvHeapInit+0xb8>)
 80058f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4a09      	ldr	r2, [pc, #36]	; (8005924 <prvHeapInit+0xbc>)
 80058fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005900:	4b09      	ldr	r3, [pc, #36]	; (8005928 <prvHeapInit+0xc0>)
 8005902:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005906:	601a      	str	r2, [r3, #0]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	200006f4 	.word	0x200006f4
 8005918:	200012f4 	.word	0x200012f4
 800591c:	200012fc 	.word	0x200012fc
 8005920:	20001304 	.word	0x20001304
 8005924:	20001300 	.word	0x20001300
 8005928:	20001308 	.word	0x20001308

0800592c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005934:	4b27      	ldr	r3, [pc, #156]	; (80059d4 <prvInsertBlockIntoFreeList+0xa8>)
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	e002      	b.n	8005940 <prvInsertBlockIntoFreeList+0x14>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	429a      	cmp	r2, r3
 8005948:	d3f7      	bcc.n	800593a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	441a      	add	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d108      	bne.n	800596e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	441a      	add	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	441a      	add	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d118      	bne.n	80059b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <prvInsertBlockIntoFreeList+0xac>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d00d      	beq.n	80059aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	441a      	add	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e008      	b.n	80059bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <prvInsertBlockIntoFreeList+0xac>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	e003      	b.n	80059bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d002      	beq.n	80059ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr
 80059d4:	200012f4 	.word	0x200012f4
 80059d8:	200012fc 	.word	0x200012fc

080059dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d109      	bne.n	8005a04 <xQueueGenericReset+0x28>
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	60bb      	str	r3, [r7, #8]
 8005a02:	e7fe      	b.n	8005a02 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005a04:	f7ff fd20 	bl	8005448 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a10:	68f9      	ldr	r1, [r7, #12]
 8005a12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a14:	fb01 f303 	mul.w	r3, r1, r3
 8005a18:	441a      	add	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a34:	3b01      	subs	r3, #1
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a3a:	fb01 f303 	mul.w	r3, r1, r3
 8005a3e:	441a      	add	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	22ff      	movs	r2, #255	; 0xff
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	22ff      	movs	r2, #255	; 0xff
 8005a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d114      	bne.n	8005a84 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d01a      	beq.n	8005a98 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3310      	adds	r3, #16
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 faf6 	bl	8007058 <xTaskRemoveFromEventList>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d012      	beq.n	8005a98 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a72:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <xQueueGenericReset+0xcc>)
 8005a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	e009      	b.n	8005a98 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3310      	adds	r3, #16
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff fb3f 	bl	800510c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3324      	adds	r3, #36	; 0x24
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff fb3a 	bl	800510c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a98:	f7ff fd04 	bl	80054a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a9c:	2301      	movs	r3, #1
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	e000ed04 	.word	0xe000ed04

08005aac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08e      	sub	sp, #56	; 0x38
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d109      	bne.n	8005ad4 <xQueueGenericCreateStatic+0x28>
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad2:	e7fe      	b.n	8005ad2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <xQueueGenericCreateStatic+0x42>
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
 8005aec:	e7fe      	b.n	8005aec <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <xQueueGenericCreateStatic+0x4e>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <xQueueGenericCreateStatic+0x52>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <xQueueGenericCreateStatic+0x54>
 8005afe:	2300      	movs	r3, #0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d109      	bne.n	8005b18 <xQueueGenericCreateStatic+0x6c>
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	623b      	str	r3, [r7, #32]
 8005b16:	e7fe      	b.n	8005b16 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d102      	bne.n	8005b24 <xQueueGenericCreateStatic+0x78>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <xQueueGenericCreateStatic+0x7c>
 8005b24:	2301      	movs	r3, #1
 8005b26:	e000      	b.n	8005b2a <xQueueGenericCreateStatic+0x7e>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <xQueueGenericCreateStatic+0x96>
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	e7fe      	b.n	8005b40 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b42:	2350      	movs	r3, #80	; 0x50
 8005b44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b50      	cmp	r3, #80	; 0x50
 8005b4a:	d009      	beq.n	8005b60 <xQueueGenericCreateStatic+0xb4>
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	e7fe      	b.n	8005b5e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00d      	beq.n	8005b86 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f842 	bl	8005c0a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3730      	adds	r7, #48	; 0x30
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	; 0x28
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d109      	bne.n	8005bb8 <xQueueGenericCreate+0x28>
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	e7fe      	b.n	8005bb6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d102      	bne.n	8005bc4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	e004      	b.n	8005bce <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	fb02 f303 	mul.w	r3, r2, r3
 8005bcc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	3350      	adds	r3, #80	; 0x50
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff fd2e 	bl	8005634 <pvPortMalloc>
 8005bd8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00f      	beq.n	8005c00 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	3350      	adds	r3, #80	; 0x50
 8005be4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bee:	79fa      	ldrb	r2, [r7, #7]
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 f805 	bl	8005c0a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005c00:	69bb      	ldr	r3, [r7, #24]
	}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	607a      	str	r2, [r7, #4]
 8005c16:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d103      	bne.n	8005c26 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	e002      	b.n	8005c2c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c38:	2101      	movs	r1, #1
 8005c3a:	69b8      	ldr	r0, [r7, #24]
 8005c3c:	f7ff fece 	bl	80059dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	78fa      	ldrb	r2, [r7, #3]
 8005c44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08a      	sub	sp, #40	; 0x28
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d109      	bne.n	8005c76 <xQueueCreateCountingSemaphoreStatic+0x26>
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	61bb      	str	r3, [r7, #24]
 8005c74:	e7fe      	b.n	8005c74 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d909      	bls.n	8005c92 <xQueueCreateCountingSemaphoreStatic+0x42>
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	e7fe      	b.n	8005c90 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c92:	2302      	movs	r3, #2
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f7ff ff05 	bl	8005aac <xQueueGenericCreateStatic>
 8005ca2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
	}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3720      	adds	r7, #32
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b086      	sub	sp, #24
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <xQueueCreateCountingSemaphore+0x24>
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	e7fe      	b.n	8005cdc <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d909      	bls.n	8005cfa <xQueueCreateCountingSemaphore+0x40>
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	e7fe      	b.n	8005cf8 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff ff46 	bl	8005b90 <xQueueGenericCreate>
 8005d04:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d12:	697b      	ldr	r3, [r7, #20]
	}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08e      	sub	sp, #56	; 0x38
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <xQueueGenericSend+0x30>
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d4a:	e7fe      	b.n	8005d4a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d103      	bne.n	8005d5a <xQueueGenericSend+0x3e>
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <xQueueGenericSend+0x42>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <xQueueGenericSend+0x44>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d109      	bne.n	8005d78 <xQueueGenericSend+0x5c>
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
 8005d76:	e7fe      	b.n	8005d76 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d103      	bne.n	8005d86 <xQueueGenericSend+0x6a>
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <xQueueGenericSend+0x6e>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <xQueueGenericSend+0x70>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d109      	bne.n	8005da4 <xQueueGenericSend+0x88>
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	623b      	str	r3, [r7, #32]
 8005da2:	e7fe      	b.n	8005da2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005da4:	f001 fb12 	bl	80073cc <xTaskGetSchedulerState>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d102      	bne.n	8005db4 <xQueueGenericSend+0x98>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <xQueueGenericSend+0x9c>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <xQueueGenericSend+0x9e>
 8005db8:	2300      	movs	r3, #0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d109      	bne.n	8005dd2 <xQueueGenericSend+0xb6>
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	e7fe      	b.n	8005dd0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dd2:	f7ff fb39 	bl	8005448 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d302      	bcc.n	8005de8 <xQueueGenericSend+0xcc>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d129      	bne.n	8005e3c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dee:	f000 fb40 	bl	8006472 <prvCopyDataToQueue>
 8005df2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d010      	beq.n	8005e1e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	3324      	adds	r3, #36	; 0x24
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 f929 	bl	8007058 <xTaskRemoveFromEventList>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d013      	beq.n	8005e34 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e0c:	4b3f      	ldr	r3, [pc, #252]	; (8005f0c <xQueueGenericSend+0x1f0>)
 8005e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	e00a      	b.n	8005e34 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e24:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <xQueueGenericSend+0x1f0>)
 8005e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e34:	f7ff fb36 	bl	80054a4 <vPortExitCritical>
				return pdPASS;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e063      	b.n	8005f04 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d103      	bne.n	8005e4a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e42:	f7ff fb2f 	bl	80054a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e05c      	b.n	8005f04 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d106      	bne.n	8005e5e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e50:	f107 0314 	add.w	r3, r7, #20
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 f961 	bl	800711c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e5e:	f7ff fb21 	bl	80054a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e62:	f000 fec7 	bl	8006bf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e66:	f7ff faef 	bl	8005448 <vPortEnterCritical>
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e70:	b25b      	sxtb	r3, r3
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e76:	d103      	bne.n	8005e80 <xQueueGenericSend+0x164>
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e86:	b25b      	sxtb	r3, r3
 8005e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8c:	d103      	bne.n	8005e96 <xQueueGenericSend+0x17a>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e96:	f7ff fb05 	bl	80054a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e9a:	1d3a      	adds	r2, r7, #4
 8005e9c:	f107 0314 	add.w	r3, r7, #20
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f001 f950 	bl	8007148 <xTaskCheckForTimeOut>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d124      	bne.n	8005ef8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005eae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eb0:	f000 fbd7 	bl	8006662 <prvIsQueueFull>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d018      	beq.n	8005eec <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	3310      	adds	r3, #16
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f001 f87a 	bl	8006fbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eca:	f000 fb62 	bl	8006592 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ece:	f000 fe9f 	bl	8006c10 <xTaskResumeAll>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f47f af7c 	bne.w	8005dd2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005eda:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <xQueueGenericSend+0x1f0>)
 8005edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	e772      	b.n	8005dd2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eee:	f000 fb50 	bl	8006592 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ef2:	f000 fe8d 	bl	8006c10 <xTaskResumeAll>
 8005ef6:	e76c      	b.n	8005dd2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005efa:	f000 fb4a 	bl	8006592 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005efe:	f000 fe87 	bl	8006c10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f02:	2300      	movs	r3, #0
		}
	}
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3738      	adds	r7, #56	; 0x38
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	e000ed04 	.word	0xe000ed04

08005f10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08e      	sub	sp, #56	; 0x38
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d109      	bne.n	8005f3c <xQueueGenericSendFromISR+0x2c>
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3a:	e7fe      	b.n	8005f3a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <xQueueGenericSendFromISR+0x3a>
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <xQueueGenericSendFromISR+0x3e>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <xQueueGenericSendFromISR+0x40>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <xQueueGenericSendFromISR+0x58>
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	623b      	str	r3, [r7, #32]
 8005f66:	e7fe      	b.n	8005f66 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d103      	bne.n	8005f76 <xQueueGenericSendFromISR+0x66>
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <xQueueGenericSendFromISR+0x6a>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <xQueueGenericSendFromISR+0x6c>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <xQueueGenericSendFromISR+0x84>
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	61fb      	str	r3, [r7, #28]
 8005f92:	e7fe      	b.n	8005f92 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f94:	f7ff fb12 	bl	80055bc <vPortValidateInterruptPriority>
	__asm volatile
 8005f98:	f3ef 8211 	mrs	r2, BASEPRI
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	61ba      	str	r2, [r7, #24]
 8005fae:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d302      	bcc.n	8005fc6 <xQueueGenericSendFromISR+0xb6>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d12c      	bne.n	8006020 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fd6:	f000 fa4c 	bl	8006472 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fda:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	d112      	bne.n	800600a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d016      	beq.n	800601a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	3324      	adds	r3, #36	; 0x24
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 f831 	bl	8007058 <xTaskRemoveFromEventList>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00e      	beq.n	800601a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	e007      	b.n	800601a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800600a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800600e:	3301      	adds	r3, #1
 8006010:	b2db      	uxtb	r3, r3
 8006012:	b25a      	sxtb	r2, r3
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800601a:	2301      	movs	r3, #1
 800601c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800601e:	e001      	b.n	8006024 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006020:	2300      	movs	r3, #0
 8006022:	637b      	str	r3, [r7, #52]	; 0x34
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800602e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006030:	4618      	mov	r0, r3
 8006032:	3738      	adds	r7, #56	; 0x38
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08c      	sub	sp, #48	; 0x30
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006044:	2300      	movs	r3, #0
 8006046:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <xQueueReceive+0x2e>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	623b      	str	r3, [r7, #32]
 8006064:	e7fe      	b.n	8006064 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d103      	bne.n	8006074 <xQueueReceive+0x3c>
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <xQueueReceive+0x40>
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <xQueueReceive+0x42>
 8006078:	2300      	movs	r3, #0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <xQueueReceive+0x5a>
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	e7fe      	b.n	8006090 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006092:	f001 f99b 	bl	80073cc <xTaskGetSchedulerState>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d102      	bne.n	80060a2 <xQueueReceive+0x6a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <xQueueReceive+0x6e>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <xQueueReceive+0x70>
 80060a6:	2300      	movs	r3, #0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d109      	bne.n	80060c0 <xQueueReceive+0x88>
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	e7fe      	b.n	80060be <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80060c0:	f7ff f9c2 	bl	8005448 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01f      	beq.n	8006110 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d4:	f000 fa37 	bl	8006546 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	1e5a      	subs	r2, r3, #1
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00f      	beq.n	8006108 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	3310      	adds	r3, #16
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 ffb3 	bl	8007058 <xTaskRemoveFromEventList>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060f8:	4b3c      	ldr	r3, [pc, #240]	; (80061ec <xQueueReceive+0x1b4>)
 80060fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006108:	f7ff f9cc 	bl	80054a4 <vPortExitCritical>
				return pdPASS;
 800610c:	2301      	movs	r3, #1
 800610e:	e069      	b.n	80061e4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d103      	bne.n	800611e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006116:	f7ff f9c5 	bl	80054a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800611a:	2300      	movs	r3, #0
 800611c:	e062      	b.n	80061e4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006124:	f107 0310 	add.w	r3, r7, #16
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fff7 	bl	800711c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800612e:	2301      	movs	r3, #1
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006132:	f7ff f9b7 	bl	80054a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006136:	f000 fd5d 	bl	8006bf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800613a:	f7ff f985 	bl	8005448 <vPortEnterCritical>
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006144:	b25b      	sxtb	r3, r3
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d103      	bne.n	8006154 <xQueueReceive+0x11c>
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800615a:	b25b      	sxtb	r3, r3
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d103      	bne.n	800616a <xQueueReceive+0x132>
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800616a:	f7ff f99b 	bl	80054a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800616e:	1d3a      	adds	r2, r7, #4
 8006170:	f107 0310 	add.w	r3, r7, #16
 8006174:	4611      	mov	r1, r2
 8006176:	4618      	mov	r0, r3
 8006178:	f000 ffe6 	bl	8007148 <xTaskCheckForTimeOut>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d123      	bne.n	80061ca <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006184:	f000 fa57 	bl	8006636 <prvIsQueueEmpty>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d017      	beq.n	80061be <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	3324      	adds	r3, #36	; 0x24
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	4611      	mov	r1, r2
 8006196:	4618      	mov	r0, r3
 8006198:	f000 ff10 	bl	8006fbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800619c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800619e:	f000 f9f8 	bl	8006592 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061a2:	f000 fd35 	bl	8006c10 <xTaskResumeAll>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d189      	bne.n	80060c0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80061ac:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <xQueueReceive+0x1b4>)
 80061ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	e780      	b.n	80060c0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061c0:	f000 f9e7 	bl	8006592 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061c4:	f000 fd24 	bl	8006c10 <xTaskResumeAll>
 80061c8:	e77a      	b.n	80060c0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061cc:	f000 f9e1 	bl	8006592 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061d0:	f000 fd1e 	bl	8006c10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d6:	f000 fa2e 	bl	8006636 <prvIsQueueEmpty>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f43f af6f 	beq.w	80060c0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3730      	adds	r7, #48	; 0x30
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	e000ed04 	.word	0xe000ed04

080061f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08e      	sub	sp, #56	; 0x38
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80061fa:	2300      	movs	r3, #0
 80061fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006202:	2300      	movs	r3, #0
 8006204:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d109      	bne.n	8006220 <xQueueSemaphoreTake+0x30>
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	623b      	str	r3, [r7, #32]
 800621e:	e7fe      	b.n	800621e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <xQueueSemaphoreTake+0x4c>
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	61fb      	str	r3, [r7, #28]
 800623a:	e7fe      	b.n	800623a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800623c:	f001 f8c6 	bl	80073cc <xTaskGetSchedulerState>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d102      	bne.n	800624c <xQueueSemaphoreTake+0x5c>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <xQueueSemaphoreTake+0x60>
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <xQueueSemaphoreTake+0x62>
 8006250:	2300      	movs	r3, #0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d109      	bne.n	800626a <xQueueSemaphoreTake+0x7a>
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	e7fe      	b.n	8006268 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800626a:	f7ff f8ed 	bl	8005448 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	2b00      	cmp	r3, #0
 8006278:	d024      	beq.n	80062c4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	1e5a      	subs	r2, r3, #1
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d104      	bne.n	8006294 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800628a:	f001 fa1b 	bl	80076c4 <pvTaskIncrementMutexHeldCount>
 800628e:	4602      	mov	r2, r0
 8006290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006292:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00f      	beq.n	80062bc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	3310      	adds	r3, #16
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fed9 	bl	8007058 <xTaskRemoveFromEventList>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062ac:	4b53      	ldr	r3, [pc, #332]	; (80063fc <xQueueSemaphoreTake+0x20c>)
 80062ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062bc:	f7ff f8f2 	bl	80054a4 <vPortExitCritical>
				return pdPASS;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e096      	b.n	80063f2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d110      	bne.n	80062ec <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d009      	beq.n	80062e4 <xQueueSemaphoreTake+0xf4>
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	e7fe      	b.n	80062e2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80062e4:	f7ff f8de 	bl	80054a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e082      	b.n	80063f2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062f2:	f107 030c 	add.w	r3, r7, #12
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 ff10 	bl	800711c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006300:	f7ff f8d0 	bl	80054a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006304:	f000 fc76 	bl	8006bf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006308:	f7ff f89e 	bl	8005448 <vPortEnterCritical>
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006312:	b25b      	sxtb	r3, r3
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d103      	bne.n	8006322 <xQueueSemaphoreTake+0x132>
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006328:	b25b      	sxtb	r3, r3
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	d103      	bne.n	8006338 <xQueueSemaphoreTake+0x148>
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006338:	f7ff f8b4 	bl	80054a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800633c:	463a      	mov	r2, r7
 800633e:	f107 030c 	add.w	r3, r7, #12
 8006342:	4611      	mov	r1, r2
 8006344:	4618      	mov	r0, r3
 8006346:	f000 feff 	bl	8007148 <xTaskCheckForTimeOut>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d132      	bne.n	80063b6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006352:	f000 f970 	bl	8006636 <prvIsQueueEmpty>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d026      	beq.n	80063aa <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d109      	bne.n	8006378 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006364:	f7ff f870 	bl	8005448 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	4618      	mov	r0, r3
 800636e:	f001 f84b 	bl	8007408 <xTaskPriorityInherit>
 8006372:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006374:	f7ff f896 	bl	80054a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	3324      	adds	r3, #36	; 0x24
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	4611      	mov	r1, r2
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fe1b 	bl	8006fbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006388:	f000 f903 	bl	8006592 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800638c:	f000 fc40 	bl	8006c10 <xTaskResumeAll>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	f47f af69 	bne.w	800626a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006398:	4b18      	ldr	r3, [pc, #96]	; (80063fc <xQueueSemaphoreTake+0x20c>)
 800639a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	e75f      	b.n	800626a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ac:	f000 f8f1 	bl	8006592 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063b0:	f000 fc2e 	bl	8006c10 <xTaskResumeAll>
 80063b4:	e759      	b.n	800626a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80063b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063b8:	f000 f8eb 	bl	8006592 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063bc:	f000 fc28 	bl	8006c10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063c2:	f000 f938 	bl	8006636 <prvIsQueueEmpty>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f43f af4e 	beq.w	800626a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00d      	beq.n	80063f0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80063d4:	f7ff f838 	bl	8005448 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80063d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063da:	f000 f833 	bl	8006444 <prvGetDisinheritPriorityAfterTimeout>
 80063de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 f8e8 	bl	80075bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80063ec:	f7ff f85a 	bl	80054a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3738      	adds	r7, #56	; 0x38
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	e000ed04 	.word	0xe000ed04

08006400 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <vQueueDelete+0x26>
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	60bb      	str	r3, [r7, #8]
 8006424:	e7fe      	b.n	8006424 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 f95c 	bl	80066e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006432:	2b00      	cmp	r3, #0
 8006434:	d102      	bne.n	800643c <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f7ff f9be 	bl	80057b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800643c:	bf00      	nop
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2b00      	cmp	r3, #0
 8006452:	d006      	beq.n	8006462 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	e001      	b.n	8006466 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006466:	68fb      	ldr	r3, [r7, #12]
	}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr

08006472 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b086      	sub	sp, #24
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10d      	bne.n	80064ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d14d      	bne.n	8006534 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	4618      	mov	r0, r3
 800649e:	f001 f821 	bl	80074e4 <xTaskPriorityDisinherit>
 80064a2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	605a      	str	r2, [r3, #4]
 80064aa:	e043      	b.n	8006534 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d119      	bne.n	80064e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6898      	ldr	r0, [r3, #8]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	461a      	mov	r2, r3
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	f001 fec1 	bl	8008244 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	441a      	add	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d32b      	bcc.n	8006534 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	609a      	str	r2, [r3, #8]
 80064e4:	e026      	b.n	8006534 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	68d8      	ldr	r0, [r3, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	461a      	mov	r2, r3
 80064f0:	68b9      	ldr	r1, [r7, #8]
 80064f2:	f001 fea7 	bl	8008244 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	425b      	negs	r3, r3
 8006500:	441a      	add	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d207      	bcs.n	8006522 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	425b      	negs	r3, r3
 800651c:	441a      	add	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d105      	bne.n	8006534 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	3b01      	subs	r3, #1
 8006532:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800653c:	697b      	ldr	r3, [r7, #20]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d018      	beq.n	800658a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	441a      	add	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	429a      	cmp	r2, r3
 8006570:	d303      	bcc.n	800657a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68d9      	ldr	r1, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	461a      	mov	r2, r3
 8006584:	6838      	ldr	r0, [r7, #0]
 8006586:	f001 fe5d 	bl	8008244 <memcpy>
	}
}
 800658a:	bf00      	nop
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800659a:	f7fe ff55 	bl	8005448 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065a6:	e011      	b.n	80065cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d012      	beq.n	80065d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3324      	adds	r3, #36	; 0x24
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 fd4f 	bl	8007058 <xTaskRemoveFromEventList>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065c0:	f000 fe22 	bl	8007208 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	dce9      	bgt.n	80065a8 <prvUnlockQueue+0x16>
 80065d4:	e000      	b.n	80065d8 <prvUnlockQueue+0x46>
					break;
 80065d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	22ff      	movs	r2, #255	; 0xff
 80065dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80065e0:	f7fe ff60 	bl	80054a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065e4:	f7fe ff30 	bl	8005448 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065f0:	e011      	b.n	8006616 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d012      	beq.n	8006620 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3310      	adds	r3, #16
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fd2a 	bl	8007058 <xTaskRemoveFromEventList>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800660a:	f000 fdfd 	bl	8007208 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	3b01      	subs	r3, #1
 8006612:	b2db      	uxtb	r3, r3
 8006614:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006616:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800661a:	2b00      	cmp	r3, #0
 800661c:	dce9      	bgt.n	80065f2 <prvUnlockQueue+0x60>
 800661e:	e000      	b.n	8006622 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006620:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	22ff      	movs	r2, #255	; 0xff
 8006626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800662a:	f7fe ff3b 	bl	80054a4 <vPortExitCritical>
}
 800662e:	bf00      	nop
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800663e:	f7fe ff03 	bl	8005448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800664a:	2301      	movs	r3, #1
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	e001      	b.n	8006654 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006654:	f7fe ff26 	bl	80054a4 <vPortExitCritical>

	return xReturn;
 8006658:	68fb      	ldr	r3, [r7, #12]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800666a:	f7fe feed 	bl	8005448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	429a      	cmp	r2, r3
 8006678:	d102      	bne.n	8006680 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800667a:	2301      	movs	r3, #1
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	e001      	b.n	8006684 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006684:	f7fe ff0e 	bl	80054a4 <vPortExitCritical>

	return xReturn;
 8006688:	68fb      	ldr	r3, [r7, #12]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	e014      	b.n	80066ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066a4:	4a0e      	ldr	r2, [pc, #56]	; (80066e0 <vQueueAddToRegistry+0x4c>)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066b0:	490b      	ldr	r1, [pc, #44]	; (80066e0 <vQueueAddToRegistry+0x4c>)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80066ba:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <vQueueAddToRegistry+0x4c>)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	4413      	add	r3, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80066c6:	e005      	b.n	80066d4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3301      	adds	r3, #1
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b07      	cmp	r3, #7
 80066d2:	d9e7      	bls.n	80066a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066d4:	bf00      	nop
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20001bac 	.word	0x20001bac

080066e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e016      	b.n	8006720 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80066f2:	4a0f      	ldr	r2, [pc, #60]	; (8006730 <vQueueUnregisterQueue+0x4c>)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4413      	add	r3, r2
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d10b      	bne.n	800671a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006702:	4a0b      	ldr	r2, [pc, #44]	; (8006730 <vQueueUnregisterQueue+0x4c>)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2100      	movs	r1, #0
 8006708:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800670c:	4a08      	ldr	r2, [pc, #32]	; (8006730 <vQueueUnregisterQueue+0x4c>)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	4413      	add	r3, r2
 8006714:	2200      	movs	r2, #0
 8006716:	605a      	str	r2, [r3, #4]
				break;
 8006718:	e005      	b.n	8006726 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3301      	adds	r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b07      	cmp	r3, #7
 8006724:	d9e5      	bls.n	80066f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006726:	bf00      	nop
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr
 8006730:	20001bac 	.word	0x20001bac

08006734 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006744:	f7fe fe80 	bl	8005448 <vPortEnterCritical>
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800674e:	b25b      	sxtb	r3, r3
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006754:	d103      	bne.n	800675e <vQueueWaitForMessageRestricted+0x2a>
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006764:	b25b      	sxtb	r3, r3
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d103      	bne.n	8006774 <vQueueWaitForMessageRestricted+0x40>
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006774:	f7fe fe96 	bl	80054a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	2b00      	cmp	r3, #0
 800677e:	d106      	bne.n	800678e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	3324      	adds	r3, #36	; 0x24
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	4618      	mov	r0, r3
 800678a:	f000 fc3b 	bl	8007004 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800678e:	6978      	ldr	r0, [r7, #20]
 8006790:	f7ff feff 	bl	8006592 <prvUnlockQueue>
	}
 8006794:	bf00      	nop
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08e      	sub	sp, #56	; 0x38
 80067a0:	af04      	add	r7, sp, #16
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d109      	bne.n	80067c4 <xTaskCreateStatic+0x28>
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	623b      	str	r3, [r7, #32]
 80067c2:	e7fe      	b.n	80067c2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80067c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d109      	bne.n	80067de <xTaskCreateStatic+0x42>
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	e7fe      	b.n	80067dc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067de:	235c      	movs	r3, #92	; 0x5c
 80067e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b5c      	cmp	r3, #92	; 0x5c
 80067e6:	d009      	beq.n	80067fc <xTaskCreateStatic+0x60>
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	e7fe      	b.n	80067fa <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01e      	beq.n	8006840 <xTaskCreateStatic+0xa4>
 8006802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01b      	beq.n	8006840 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006810:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	2202      	movs	r2, #2
 8006816:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800681a:	2300      	movs	r3, #0
 800681c:	9303      	str	r3, [sp, #12]
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	9302      	str	r3, [sp, #8]
 8006822:	f107 0314 	add.w	r3, r7, #20
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f850 	bl	80068d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800683a:	f000 f8d3 	bl	80069e4 <prvAddNewTaskToReadyList>
 800683e:	e001      	b.n	8006844 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006844:	697b      	ldr	r3, [r7, #20]
	}
 8006846:	4618      	mov	r0, r3
 8006848:	3728      	adds	r7, #40	; 0x28
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800684e:	b580      	push	{r7, lr}
 8006850:	b08c      	sub	sp, #48	; 0x30
 8006852:	af04      	add	r7, sp, #16
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	603b      	str	r3, [r7, #0]
 800685a:	4613      	mov	r3, r2
 800685c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fee6 	bl	8005634 <pvPortMalloc>
 8006868:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00e      	beq.n	800688e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006870:	205c      	movs	r0, #92	; 0x5c
 8006872:	f7fe fedf 	bl	8005634 <pvPortMalloc>
 8006876:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	631a      	str	r2, [r3, #48]	; 0x30
 8006884:	e005      	b.n	8006892 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006886:	6978      	ldr	r0, [r7, #20]
 8006888:	f7fe ff96 	bl	80057b8 <vPortFree>
 800688c:	e001      	b.n	8006892 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d017      	beq.n	80068c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068a0:	88fa      	ldrh	r2, [r7, #6]
 80068a2:	2300      	movs	r3, #0
 80068a4:	9303      	str	r3, [sp, #12]
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	9302      	str	r3, [sp, #8]
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f80e 	bl	80068d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068bc:	69f8      	ldr	r0, [r7, #28]
 80068be:	f000 f891 	bl	80069e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068c2:	2301      	movs	r3, #1
 80068c4:	61bb      	str	r3, [r7, #24]
 80068c6:	e002      	b.n	80068ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068c8:	f04f 33ff 	mov.w	r3, #4294967295
 80068cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068ce:	69bb      	ldr	r3, [r7, #24]
	}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3720      	adds	r7, #32
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	461a      	mov	r2, r3
 80068f0:	21a5      	movs	r1, #165	; 0xa5
 80068f2:	f001 fcb2 	bl	800825a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006900:	3b01      	subs	r3, #1
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f023 0307 	bic.w	r3, r3, #7
 800690e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <prvInitialiseNewTask+0x56>
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	e7fe      	b.n	800692c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800692e:	2300      	movs	r3, #0
 8006930:	61fb      	str	r3, [r7, #28]
 8006932:	e012      	b.n	800695a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	4413      	add	r3, r2
 800693a:	7819      	ldrb	r1, [r3, #0]
 800693c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	4413      	add	r3, r2
 8006942:	3334      	adds	r3, #52	; 0x34
 8006944:	460a      	mov	r2, r1
 8006946:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	4413      	add	r3, r2
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d006      	beq.n	8006962 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	3301      	adds	r3, #1
 8006958:	61fb      	str	r3, [r7, #28]
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	2b0f      	cmp	r3, #15
 800695e:	d9e9      	bls.n	8006934 <prvInitialiseNewTask+0x5c>
 8006960:	e000      	b.n	8006964 <prvInitialiseNewTask+0x8c>
		{
			break;
 8006962:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	2b37      	cmp	r3, #55	; 0x37
 8006970:	d901      	bls.n	8006976 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006972:	2337      	movs	r3, #55	; 0x37
 8006974:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800697a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006980:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	2200      	movs	r2, #0
 8006986:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698a:	3304      	adds	r3, #4
 800698c:	4618      	mov	r0, r3
 800698e:	f7fe fbdc 	bl	800514a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	3318      	adds	r3, #24
 8006996:	4618      	mov	r0, r3
 8006998:	f7fe fbd7 	bl	800514a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	2200      	movs	r2, #0
 80069b6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	68f9      	ldr	r1, [r7, #12]
 80069c4:	69b8      	ldr	r0, [r7, #24]
 80069c6:	f7fe fc51 	bl	800526c <pxPortInitialiseStack>
 80069ca:	4602      	mov	r2, r0
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069dc:	bf00      	nop
 80069de:	3720      	adds	r7, #32
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069ec:	f7fe fd2c 	bl	8005448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069f0:	4b2d      	ldr	r3, [pc, #180]	; (8006aa8 <prvAddNewTaskToReadyList+0xc4>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	4a2c      	ldr	r2, [pc, #176]	; (8006aa8 <prvAddNewTaskToReadyList+0xc4>)
 80069f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069fa:	4b2c      	ldr	r3, [pc, #176]	; (8006aac <prvAddNewTaskToReadyList+0xc8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a02:	4a2a      	ldr	r2, [pc, #168]	; (8006aac <prvAddNewTaskToReadyList+0xc8>)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a08:	4b27      	ldr	r3, [pc, #156]	; (8006aa8 <prvAddNewTaskToReadyList+0xc4>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d110      	bne.n	8006a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a10:	f000 fc1e 	bl	8007250 <prvInitialiseTaskLists>
 8006a14:	e00d      	b.n	8006a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a16:	4b26      	ldr	r3, [pc, #152]	; (8006ab0 <prvAddNewTaskToReadyList+0xcc>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d109      	bne.n	8006a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a1e:	4b23      	ldr	r3, [pc, #140]	; (8006aac <prvAddNewTaskToReadyList+0xc8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d802      	bhi.n	8006a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a2c:	4a1f      	ldr	r2, [pc, #124]	; (8006aac <prvAddNewTaskToReadyList+0xc8>)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a32:	4b20      	ldr	r3, [pc, #128]	; (8006ab4 <prvAddNewTaskToReadyList+0xd0>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3301      	adds	r3, #1
 8006a38:	4a1e      	ldr	r2, [pc, #120]	; (8006ab4 <prvAddNewTaskToReadyList+0xd0>)
 8006a3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a3c:	4b1d      	ldr	r3, [pc, #116]	; (8006ab4 <prvAddNewTaskToReadyList+0xd0>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a48:	4b1b      	ldr	r3, [pc, #108]	; (8006ab8 <prvAddNewTaskToReadyList+0xd4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d903      	bls.n	8006a58 <prvAddNewTaskToReadyList+0x74>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	4a18      	ldr	r2, [pc, #96]	; (8006ab8 <prvAddNewTaskToReadyList+0xd4>)
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4a15      	ldr	r2, [pc, #84]	; (8006abc <prvAddNewTaskToReadyList+0xd8>)
 8006a66:	441a      	add	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	f7fe fb77 	bl	8005162 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a74:	f7fe fd16 	bl	80054a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a78:	4b0d      	ldr	r3, [pc, #52]	; (8006ab0 <prvAddNewTaskToReadyList+0xcc>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00e      	beq.n	8006a9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a80:	4b0a      	ldr	r3, [pc, #40]	; (8006aac <prvAddNewTaskToReadyList+0xc8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d207      	bcs.n	8006a9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <prvAddNewTaskToReadyList+0xdc>)
 8006a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a9e:	bf00      	nop
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	200017e0 	.word	0x200017e0
 8006aac:	2000130c 	.word	0x2000130c
 8006ab0:	200017ec 	.word	0x200017ec
 8006ab4:	200017fc 	.word	0x200017fc
 8006ab8:	200017e8 	.word	0x200017e8
 8006abc:	20001310 	.word	0x20001310
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d016      	beq.n	8006b04 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ad6:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <vTaskDelay+0x60>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d009      	beq.n	8006af2 <vTaskDelay+0x2e>
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60bb      	str	r3, [r7, #8]
 8006af0:	e7fe      	b.n	8006af0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006af2:	f000 f87f 	bl	8006bf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006af6:	2100      	movs	r1, #0
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 ffa9 	bl	8007a50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006afe:	f000 f887 	bl	8006c10 <xTaskResumeAll>
 8006b02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d107      	bne.n	8006b1a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006b0a:	4b07      	ldr	r3, [pc, #28]	; (8006b28 <vTaskDelay+0x64>)
 8006b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b1a:	bf00      	nop
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20001808 	.word	0x20001808
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	; 0x28
 8006b30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b3a:	463a      	mov	r2, r7
 8006b3c:	1d39      	adds	r1, r7, #4
 8006b3e:	f107 0308 	add.w	r3, r7, #8
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fe fab0 	bl	80050a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	9202      	str	r2, [sp, #8]
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	2300      	movs	r3, #0
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	2300      	movs	r3, #0
 8006b58:	460a      	mov	r2, r1
 8006b5a:	4920      	ldr	r1, [pc, #128]	; (8006bdc <vTaskStartScheduler+0xb0>)
 8006b5c:	4820      	ldr	r0, [pc, #128]	; (8006be0 <vTaskStartScheduler+0xb4>)
 8006b5e:	f7ff fe1d 	bl	800679c <xTaskCreateStatic>
 8006b62:	4602      	mov	r2, r0
 8006b64:	4b1f      	ldr	r3, [pc, #124]	; (8006be4 <vTaskStartScheduler+0xb8>)
 8006b66:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b68:	4b1e      	ldr	r3, [pc, #120]	; (8006be4 <vTaskStartScheduler+0xb8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b70:	2301      	movs	r3, #1
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e001      	b.n	8006b7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d102      	bne.n	8006b86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b80:	f000 ffba 	bl	8007af8 <xTimerCreateTimerTask>
 8006b84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d115      	bne.n	8006bb8 <vTaskStartScheduler+0x8c>
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b9e:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <vTaskStartScheduler+0xbc>)
 8006ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ba6:	4b11      	ldr	r3, [pc, #68]	; (8006bec <vTaskStartScheduler+0xc0>)
 8006ba8:	2201      	movs	r2, #1
 8006baa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006bac:	4b10      	ldr	r3, [pc, #64]	; (8006bf0 <vTaskStartScheduler+0xc4>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bb2:	f7fe fbd9 	bl	8005368 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006bb6:	e00d      	b.n	8006bd4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbe:	d109      	bne.n	8006bd4 <vTaskStartScheduler+0xa8>
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	e7fe      	b.n	8006bd2 <vTaskStartScheduler+0xa6>
}
 8006bd4:	bf00      	nop
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	08008310 	.word	0x08008310
 8006be0:	08007221 	.word	0x08007221
 8006be4:	20001804 	.word	0x20001804
 8006be8:	20001800 	.word	0x20001800
 8006bec:	200017ec 	.word	0x200017ec
 8006bf0:	200017e4 	.word	0x200017e4

08006bf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006bf8:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <vTaskSuspendAll+0x18>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	4a03      	ldr	r2, [pc, #12]	; (8006c0c <vTaskSuspendAll+0x18>)
 8006c00:	6013      	str	r3, [r2, #0]
}
 8006c02:	bf00      	nop
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	20001808 	.word	0x20001808

08006c10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c1e:	4b41      	ldr	r3, [pc, #260]	; (8006d24 <xTaskResumeAll+0x114>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <xTaskResumeAll+0x2a>
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	e7fe      	b.n	8006c38 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c3a:	f7fe fc05 	bl	8005448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c3e:	4b39      	ldr	r3, [pc, #228]	; (8006d24 <xTaskResumeAll+0x114>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3b01      	subs	r3, #1
 8006c44:	4a37      	ldr	r2, [pc, #220]	; (8006d24 <xTaskResumeAll+0x114>)
 8006c46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c48:	4b36      	ldr	r3, [pc, #216]	; (8006d24 <xTaskResumeAll+0x114>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d162      	bne.n	8006d16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c50:	4b35      	ldr	r3, [pc, #212]	; (8006d28 <xTaskResumeAll+0x118>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d05e      	beq.n	8006d16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c58:	e02f      	b.n	8006cba <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006c5a:	4b34      	ldr	r3, [pc, #208]	; (8006d2c <xTaskResumeAll+0x11c>)
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3318      	adds	r3, #24
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe fad6 	bl	8005218 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fe fad1 	bl	8005218 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7a:	4b2d      	ldr	r3, [pc, #180]	; (8006d30 <xTaskResumeAll+0x120>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d903      	bls.n	8006c8a <xTaskResumeAll+0x7a>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	4a2a      	ldr	r2, [pc, #168]	; (8006d30 <xTaskResumeAll+0x120>)
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4a27      	ldr	r2, [pc, #156]	; (8006d34 <xTaskResumeAll+0x124>)
 8006c98:	441a      	add	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	f7fe fa5e 	bl	8005162 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006caa:	4b23      	ldr	r3, [pc, #140]	; (8006d38 <xTaskResumeAll+0x128>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d302      	bcc.n	8006cba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006cb4:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <xTaskResumeAll+0x12c>)
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cba:	4b1c      	ldr	r3, [pc, #112]	; (8006d2c <xTaskResumeAll+0x11c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1cb      	bne.n	8006c5a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006cc8:	f000 fb5c 	bl	8007384 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ccc:	4b1c      	ldr	r3, [pc, #112]	; (8006d40 <xTaskResumeAll+0x130>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d010      	beq.n	8006cfa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cd8:	f000 f856 	bl	8006d88 <xTaskIncrementTick>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006ce2:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <xTaskResumeAll+0x12c>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1f1      	bne.n	8006cd8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006cf4:	4b12      	ldr	r3, [pc, #72]	; (8006d40 <xTaskResumeAll+0x130>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cfa:	4b10      	ldr	r3, [pc, #64]	; (8006d3c <xTaskResumeAll+0x12c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d009      	beq.n	8006d16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d02:	2301      	movs	r3, #1
 8006d04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d06:	4b0f      	ldr	r3, [pc, #60]	; (8006d44 <xTaskResumeAll+0x134>)
 8006d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d16:	f7fe fbc5 	bl	80054a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20001808 	.word	0x20001808
 8006d28:	200017e0 	.word	0x200017e0
 8006d2c:	200017a0 	.word	0x200017a0
 8006d30:	200017e8 	.word	0x200017e8
 8006d34:	20001310 	.word	0x20001310
 8006d38:	2000130c 	.word	0x2000130c
 8006d3c:	200017f4 	.word	0x200017f4
 8006d40:	200017f0 	.word	0x200017f0
 8006d44:	e000ed04 	.word	0xe000ed04

08006d48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d4e:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <xTaskGetTickCount+0x18>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d54:	687b      	ldr	r3, [r7, #4]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr
 8006d60:	200017e4 	.word	0x200017e4

08006d64 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d6a:	f7fe fc27 	bl	80055bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006d6e:	2300      	movs	r3, #0
 8006d70:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006d72:	4b04      	ldr	r3, [pc, #16]	; (8006d84 <xTaskGetTickCountFromISR+0x20>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d78:	683b      	ldr	r3, [r7, #0]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	200017e4 	.word	0x200017e4

08006d88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d92:	4b51      	ldr	r3, [pc, #324]	; (8006ed8 <xTaskIncrementTick+0x150>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f040 808d 	bne.w	8006eb6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d9c:	4b4f      	ldr	r3, [pc, #316]	; (8006edc <xTaskIncrementTick+0x154>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3301      	adds	r3, #1
 8006da2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006da4:	4a4d      	ldr	r2, [pc, #308]	; (8006edc <xTaskIncrementTick+0x154>)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d11f      	bne.n	8006df0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006db0:	4b4b      	ldr	r3, [pc, #300]	; (8006ee0 <xTaskIncrementTick+0x158>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d009      	beq.n	8006dce <xTaskIncrementTick+0x46>
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	e7fe      	b.n	8006dcc <xTaskIncrementTick+0x44>
 8006dce:	4b44      	ldr	r3, [pc, #272]	; (8006ee0 <xTaskIncrementTick+0x158>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	4b43      	ldr	r3, [pc, #268]	; (8006ee4 <xTaskIncrementTick+0x15c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a41      	ldr	r2, [pc, #260]	; (8006ee0 <xTaskIncrementTick+0x158>)
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	4a41      	ldr	r2, [pc, #260]	; (8006ee4 <xTaskIncrementTick+0x15c>)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	4b41      	ldr	r3, [pc, #260]	; (8006ee8 <xTaskIncrementTick+0x160>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3301      	adds	r3, #1
 8006de8:	4a3f      	ldr	r2, [pc, #252]	; (8006ee8 <xTaskIncrementTick+0x160>)
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	f000 faca 	bl	8007384 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006df0:	4b3e      	ldr	r3, [pc, #248]	; (8006eec <xTaskIncrementTick+0x164>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d34e      	bcc.n	8006e98 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dfa:	4b39      	ldr	r3, [pc, #228]	; (8006ee0 <xTaskIncrementTick+0x158>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <xTaskIncrementTick+0x80>
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <xTaskIncrementTick+0x82>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e0e:	4b37      	ldr	r3, [pc, #220]	; (8006eec <xTaskIncrementTick+0x164>)
 8006e10:	f04f 32ff 	mov.w	r2, #4294967295
 8006e14:	601a      	str	r2, [r3, #0]
					break;
 8006e16:	e03f      	b.n	8006e98 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e18:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <xTaskIncrementTick+0x158>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d203      	bcs.n	8006e38 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e30:	4a2e      	ldr	r2, [pc, #184]	; (8006eec <xTaskIncrementTick+0x164>)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6013      	str	r3, [r2, #0]
						break;
 8006e36:	e02f      	b.n	8006e98 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fe f9eb 	bl	8005218 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	3318      	adds	r3, #24
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe f9e2 	bl	8005218 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e58:	4b25      	ldr	r3, [pc, #148]	; (8006ef0 <xTaskIncrementTick+0x168>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d903      	bls.n	8006e68 <xTaskIncrementTick+0xe0>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	4a22      	ldr	r2, [pc, #136]	; (8006ef0 <xTaskIncrementTick+0x168>)
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4a1f      	ldr	r2, [pc, #124]	; (8006ef4 <xTaskIncrementTick+0x16c>)
 8006e76:	441a      	add	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4610      	mov	r0, r2
 8006e80:	f7fe f96f 	bl	8005162 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e88:	4b1b      	ldr	r3, [pc, #108]	; (8006ef8 <xTaskIncrementTick+0x170>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d3b3      	bcc.n	8006dfa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006e92:	2301      	movs	r3, #1
 8006e94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e96:	e7b0      	b.n	8006dfa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e98:	4b17      	ldr	r3, [pc, #92]	; (8006ef8 <xTaskIncrementTick+0x170>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9e:	4915      	ldr	r1, [pc, #84]	; (8006ef4 <xTaskIncrementTick+0x16c>)
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	440b      	add	r3, r1
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d907      	bls.n	8006ec0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e004      	b.n	8006ec0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006eb6:	4b11      	ldr	r3, [pc, #68]	; (8006efc <xTaskIncrementTick+0x174>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	4a0f      	ldr	r2, [pc, #60]	; (8006efc <xTaskIncrementTick+0x174>)
 8006ebe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ec0:	4b0f      	ldr	r3, [pc, #60]	; (8006f00 <xTaskIncrementTick+0x178>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ecc:	697b      	ldr	r3, [r7, #20]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20001808 	.word	0x20001808
 8006edc:	200017e4 	.word	0x200017e4
 8006ee0:	20001798 	.word	0x20001798
 8006ee4:	2000179c 	.word	0x2000179c
 8006ee8:	200017f8 	.word	0x200017f8
 8006eec:	20001800 	.word	0x20001800
 8006ef0:	200017e8 	.word	0x200017e8
 8006ef4:	20001310 	.word	0x20001310
 8006ef8:	2000130c 	.word	0x2000130c
 8006efc:	200017f0 	.word	0x200017f0
 8006f00:	200017f4 	.word	0x200017f4

08006f04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f0a:	4b27      	ldr	r3, [pc, #156]	; (8006fa8 <vTaskSwitchContext+0xa4>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f12:	4b26      	ldr	r3, [pc, #152]	; (8006fac <vTaskSwitchContext+0xa8>)
 8006f14:	2201      	movs	r2, #1
 8006f16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f18:	e040      	b.n	8006f9c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006f1a:	4b24      	ldr	r3, [pc, #144]	; (8006fac <vTaskSwitchContext+0xa8>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f20:	4b23      	ldr	r3, [pc, #140]	; (8006fb0 <vTaskSwitchContext+0xac>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	e00f      	b.n	8006f48 <vTaskSwitchContext+0x44>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d109      	bne.n	8006f42 <vTaskSwitchContext+0x3e>
 8006f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	e7fe      	b.n	8006f40 <vTaskSwitchContext+0x3c>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	491a      	ldr	r1, [pc, #104]	; (8006fb4 <vTaskSwitchContext+0xb0>)
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0e5      	beq.n	8006f28 <vTaskSwitchContext+0x24>
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4a13      	ldr	r2, [pc, #76]	; (8006fb4 <vTaskSwitchContext+0xb0>)
 8006f68:	4413      	add	r3, r2
 8006f6a:	60bb      	str	r3, [r7, #8]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	605a      	str	r2, [r3, #4]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d104      	bne.n	8006f8c <vTaskSwitchContext+0x88>
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	605a      	str	r2, [r3, #4]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	4a09      	ldr	r2, [pc, #36]	; (8006fb8 <vTaskSwitchContext+0xb4>)
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	4a06      	ldr	r2, [pc, #24]	; (8006fb0 <vTaskSwitchContext+0xac>)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6013      	str	r3, [r2, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bc80      	pop	{r7}
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	20001808 	.word	0x20001808
 8006fac:	200017f4 	.word	0x200017f4
 8006fb0:	200017e8 	.word	0x200017e8
 8006fb4:	20001310 	.word	0x20001310
 8006fb8:	2000130c 	.word	0x2000130c

08006fbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d109      	bne.n	8006fe0 <vTaskPlaceOnEventList+0x24>
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	e7fe      	b.n	8006fde <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fe0:	4b07      	ldr	r3, [pc, #28]	; (8007000 <vTaskPlaceOnEventList+0x44>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3318      	adds	r3, #24
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7fe f8dd 	bl	80051a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fee:	2101      	movs	r1, #1
 8006ff0:	6838      	ldr	r0, [r7, #0]
 8006ff2:	f000 fd2d 	bl	8007a50 <prvAddCurrentTaskToDelayedList>
}
 8006ff6:	bf00      	nop
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	2000130c 	.word	0x2000130c

08007004 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <vTaskPlaceOnEventListRestricted+0x26>
 8007016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	e7fe      	b.n	8007028 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800702a:	4b0a      	ldr	r3, [pc, #40]	; (8007054 <vTaskPlaceOnEventListRestricted+0x50>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3318      	adds	r3, #24
 8007030:	4619      	mov	r1, r3
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f7fe f895 	bl	8005162 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800703e:	f04f 33ff 	mov.w	r3, #4294967295
 8007042:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	68b8      	ldr	r0, [r7, #8]
 8007048:	f000 fd02 	bl	8007a50 <prvAddCurrentTaskToDelayedList>
	}
 800704c:	bf00      	nop
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	2000130c 	.word	0x2000130c

08007058 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d109      	bne.n	8007082 <xTaskRemoveFromEventList+0x2a>
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	e7fe      	b.n	8007080 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	3318      	adds	r3, #24
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe f8c6 	bl	8005218 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800708c:	4b1d      	ldr	r3, [pc, #116]	; (8007104 <xTaskRemoveFromEventList+0xac>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d11d      	bne.n	80070d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	3304      	adds	r3, #4
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe f8bd 	bl	8005218 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a2:	4b19      	ldr	r3, [pc, #100]	; (8007108 <xTaskRemoveFromEventList+0xb0>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d903      	bls.n	80070b2 <xTaskRemoveFromEventList+0x5a>
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ae:	4a16      	ldr	r2, [pc, #88]	; (8007108 <xTaskRemoveFromEventList+0xb0>)
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4a13      	ldr	r2, [pc, #76]	; (800710c <xTaskRemoveFromEventList+0xb4>)
 80070c0:	441a      	add	r2, r3
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	3304      	adds	r3, #4
 80070c6:	4619      	mov	r1, r3
 80070c8:	4610      	mov	r0, r2
 80070ca:	f7fe f84a 	bl	8005162 <vListInsertEnd>
 80070ce:	e005      	b.n	80070dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	3318      	adds	r3, #24
 80070d4:	4619      	mov	r1, r3
 80070d6:	480e      	ldr	r0, [pc, #56]	; (8007110 <xTaskRemoveFromEventList+0xb8>)
 80070d8:	f7fe f843 	bl	8005162 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e0:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <xTaskRemoveFromEventList+0xbc>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d905      	bls.n	80070f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070ea:	2301      	movs	r3, #1
 80070ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070ee:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <xTaskRemoveFromEventList+0xc0>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e001      	b.n	80070fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80070f6:	2300      	movs	r3, #0
 80070f8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80070fa:	697b      	ldr	r3, [r7, #20]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20001808 	.word	0x20001808
 8007108:	200017e8 	.word	0x200017e8
 800710c:	20001310 	.word	0x20001310
 8007110:	200017a0 	.word	0x200017a0
 8007114:	2000130c 	.word	0x2000130c
 8007118:	200017f4 	.word	0x200017f4

0800711c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007124:	4b06      	ldr	r3, [pc, #24]	; (8007140 <vTaskInternalSetTimeOutState+0x24>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800712c:	4b05      	ldr	r3, [pc, #20]	; (8007144 <vTaskInternalSetTimeOutState+0x28>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	605a      	str	r2, [r3, #4]
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	bc80      	pop	{r7}
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	200017f8 	.word	0x200017f8
 8007144:	200017e4 	.word	0x200017e4

08007148 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d109      	bne.n	800716c <xTaskCheckForTimeOut+0x24>
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	e7fe      	b.n	800716a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <xTaskCheckForTimeOut+0x3e>
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	e7fe      	b.n	8007184 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007186:	f7fe f95f 	bl	8005448 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800718a:	4b1d      	ldr	r3, [pc, #116]	; (8007200 <xTaskCheckForTimeOut+0xb8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a2:	d102      	bne.n	80071aa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071a4:	2300      	movs	r3, #0
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	e023      	b.n	80071f2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4b15      	ldr	r3, [pc, #84]	; (8007204 <xTaskCheckForTimeOut+0xbc>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d007      	beq.n	80071c6 <xTaskCheckForTimeOut+0x7e>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d802      	bhi.n	80071c6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071c0:	2301      	movs	r3, #1
 80071c2:	61fb      	str	r3, [r7, #28]
 80071c4:	e015      	b.n	80071f2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d90b      	bls.n	80071e8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	1ad2      	subs	r2, r2, r3
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7ff ff9d 	bl	800711c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071e2:	2300      	movs	r3, #0
 80071e4:	61fb      	str	r3, [r7, #28]
 80071e6:	e004      	b.n	80071f2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071ee:	2301      	movs	r3, #1
 80071f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071f2:	f7fe f957 	bl	80054a4 <vPortExitCritical>

	return xReturn;
 80071f6:	69fb      	ldr	r3, [r7, #28]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3720      	adds	r7, #32
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	200017e4 	.word	0x200017e4
 8007204:	200017f8 	.word	0x200017f8

08007208 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800720c:	4b03      	ldr	r3, [pc, #12]	; (800721c <vTaskMissedYield+0x14>)
 800720e:	2201      	movs	r2, #1
 8007210:	601a      	str	r2, [r3, #0]
}
 8007212:	bf00      	nop
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	200017f4 	.word	0x200017f4

08007220 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007228:	f000 f852 	bl	80072d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800722c:	4b06      	ldr	r3, [pc, #24]	; (8007248 <prvIdleTask+0x28>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d9f9      	bls.n	8007228 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <prvIdleTask+0x2c>)
 8007236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007244:	e7f0      	b.n	8007228 <prvIdleTask+0x8>
 8007246:	bf00      	nop
 8007248:	20001310 	.word	0x20001310
 800724c:	e000ed04 	.word	0xe000ed04

08007250 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007256:	2300      	movs	r3, #0
 8007258:	607b      	str	r3, [r7, #4]
 800725a:	e00c      	b.n	8007276 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4a12      	ldr	r2, [pc, #72]	; (80072b0 <prvInitialiseTaskLists+0x60>)
 8007268:	4413      	add	r3, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f7fd ff4e 	bl	800510c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3301      	adds	r3, #1
 8007274:	607b      	str	r3, [r7, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b37      	cmp	r3, #55	; 0x37
 800727a:	d9ef      	bls.n	800725c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800727c:	480d      	ldr	r0, [pc, #52]	; (80072b4 <prvInitialiseTaskLists+0x64>)
 800727e:	f7fd ff45 	bl	800510c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007282:	480d      	ldr	r0, [pc, #52]	; (80072b8 <prvInitialiseTaskLists+0x68>)
 8007284:	f7fd ff42 	bl	800510c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007288:	480c      	ldr	r0, [pc, #48]	; (80072bc <prvInitialiseTaskLists+0x6c>)
 800728a:	f7fd ff3f 	bl	800510c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800728e:	480c      	ldr	r0, [pc, #48]	; (80072c0 <prvInitialiseTaskLists+0x70>)
 8007290:	f7fd ff3c 	bl	800510c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007294:	480b      	ldr	r0, [pc, #44]	; (80072c4 <prvInitialiseTaskLists+0x74>)
 8007296:	f7fd ff39 	bl	800510c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800729a:	4b0b      	ldr	r3, [pc, #44]	; (80072c8 <prvInitialiseTaskLists+0x78>)
 800729c:	4a05      	ldr	r2, [pc, #20]	; (80072b4 <prvInitialiseTaskLists+0x64>)
 800729e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <prvInitialiseTaskLists+0x7c>)
 80072a2:	4a05      	ldr	r2, [pc, #20]	; (80072b8 <prvInitialiseTaskLists+0x68>)
 80072a4:	601a      	str	r2, [r3, #0]
}
 80072a6:	bf00      	nop
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20001310 	.word	0x20001310
 80072b4:	20001770 	.word	0x20001770
 80072b8:	20001784 	.word	0x20001784
 80072bc:	200017a0 	.word	0x200017a0
 80072c0:	200017b4 	.word	0x200017b4
 80072c4:	200017cc 	.word	0x200017cc
 80072c8:	20001798 	.word	0x20001798
 80072cc:	2000179c 	.word	0x2000179c

080072d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072d6:	e019      	b.n	800730c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072d8:	f7fe f8b6 	bl	8005448 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80072dc:	4b0f      	ldr	r3, [pc, #60]	; (800731c <prvCheckTasksWaitingTermination+0x4c>)
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3304      	adds	r3, #4
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fd ff95 	bl	8005218 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072ee:	4b0c      	ldr	r3, [pc, #48]	; (8007320 <prvCheckTasksWaitingTermination+0x50>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	4a0a      	ldr	r2, [pc, #40]	; (8007320 <prvCheckTasksWaitingTermination+0x50>)
 80072f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072f8:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <prvCheckTasksWaitingTermination+0x54>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	4a09      	ldr	r2, [pc, #36]	; (8007324 <prvCheckTasksWaitingTermination+0x54>)
 8007300:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007302:	f7fe f8cf 	bl	80054a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f80e 	bl	8007328 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800730c:	4b05      	ldr	r3, [pc, #20]	; (8007324 <prvCheckTasksWaitingTermination+0x54>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e1      	bne.n	80072d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007314:	bf00      	nop
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	200017b4 	.word	0x200017b4
 8007320:	200017e0 	.word	0x200017e0
 8007324:	200017c8 	.word	0x200017c8

08007328 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007336:	2b00      	cmp	r3, #0
 8007338:	d108      	bne.n	800734c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe fa3a 	bl	80057b8 <vPortFree>
				vPortFree( pxTCB );
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7fe fa37 	bl	80057b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800734a:	e017      	b.n	800737c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007352:	2b01      	cmp	r3, #1
 8007354:	d103      	bne.n	800735e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7fe fa2e 	bl	80057b8 <vPortFree>
	}
 800735c:	e00e      	b.n	800737c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007364:	2b02      	cmp	r3, #2
 8007366:	d009      	beq.n	800737c <prvDeleteTCB+0x54>
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	e7fe      	b.n	800737a <prvDeleteTCB+0x52>
	}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800738a:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <prvResetNextTaskUnblockTime+0x40>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <prvResetNextTaskUnblockTime+0x14>
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <prvResetNextTaskUnblockTime+0x16>
 8007398:	2300      	movs	r3, #0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d004      	beq.n	80073a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800739e:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <prvResetNextTaskUnblockTime+0x44>)
 80073a0:	f04f 32ff 	mov.w	r2, #4294967295
 80073a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073a6:	e008      	b.n	80073ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80073a8:	4b06      	ldr	r3, [pc, #24]	; (80073c4 <prvResetNextTaskUnblockTime+0x40>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	4a04      	ldr	r2, [pc, #16]	; (80073c8 <prvResetNextTaskUnblockTime+0x44>)
 80073b8:	6013      	str	r3, [r2, #0]
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	bc80      	pop	{r7}
 80073c2:	4770      	bx	lr
 80073c4:	20001798 	.word	0x20001798
 80073c8:	20001800 	.word	0x20001800

080073cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073d2:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <xTaskGetSchedulerState+0x34>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d102      	bne.n	80073e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073da:	2301      	movs	r3, #1
 80073dc:	607b      	str	r3, [r7, #4]
 80073de:	e008      	b.n	80073f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073e0:	4b08      	ldr	r3, [pc, #32]	; (8007404 <xTaskGetSchedulerState+0x38>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d102      	bne.n	80073ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073e8:	2302      	movs	r3, #2
 80073ea:	607b      	str	r3, [r7, #4]
 80073ec:	e001      	b.n	80073f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073ee:	2300      	movs	r3, #0
 80073f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073f2:	687b      	ldr	r3, [r7, #4]
	}
 80073f4:	4618      	mov	r0, r3
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bc80      	pop	{r7}
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	200017ec 	.word	0x200017ec
 8007404:	20001808 	.word	0x20001808

08007408 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d056      	beq.n	80074cc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007422:	4b2d      	ldr	r3, [pc, #180]	; (80074d8 <xTaskPriorityInherit+0xd0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	429a      	cmp	r2, r3
 800742a:	d246      	bcs.n	80074ba <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	2b00      	cmp	r3, #0
 8007432:	db06      	blt.n	8007442 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007434:	4b28      	ldr	r3, [pc, #160]	; (80074d8 <xTaskPriorityInherit+0xd0>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	6959      	ldr	r1, [r3, #20]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4a22      	ldr	r2, [pc, #136]	; (80074dc <xTaskPriorityInherit+0xd4>)
 8007454:	4413      	add	r3, r2
 8007456:	4299      	cmp	r1, r3
 8007458:	d101      	bne.n	800745e <xTaskPriorityInherit+0x56>
 800745a:	2301      	movs	r3, #1
 800745c:	e000      	b.n	8007460 <xTaskPriorityInherit+0x58>
 800745e:	2300      	movs	r3, #0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d022      	beq.n	80074aa <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	3304      	adds	r3, #4
 8007468:	4618      	mov	r0, r3
 800746a:	f7fd fed5 	bl	8005218 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800746e:	4b1a      	ldr	r3, [pc, #104]	; (80074d8 <xTaskPriorityInherit+0xd0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747c:	4b18      	ldr	r3, [pc, #96]	; (80074e0 <xTaskPriorityInherit+0xd8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d903      	bls.n	800748c <xTaskPriorityInherit+0x84>
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	4a15      	ldr	r2, [pc, #84]	; (80074e0 <xTaskPriorityInherit+0xd8>)
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007490:	4613      	mov	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4a10      	ldr	r2, [pc, #64]	; (80074dc <xTaskPriorityInherit+0xd4>)
 800749a:	441a      	add	r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	3304      	adds	r3, #4
 80074a0:	4619      	mov	r1, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	f7fd fe5d 	bl	8005162 <vListInsertEnd>
 80074a8:	e004      	b.n	80074b4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074aa:	4b0b      	ldr	r3, [pc, #44]	; (80074d8 <xTaskPriorityInherit+0xd0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80074b4:	2301      	movs	r3, #1
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	e008      	b.n	80074cc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074be:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <xTaskPriorityInherit+0xd0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d201      	bcs.n	80074cc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80074c8:	2301      	movs	r3, #1
 80074ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074cc:	68fb      	ldr	r3, [r7, #12]
	}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	2000130c 	.word	0x2000130c
 80074dc:	20001310 	.word	0x20001310
 80074e0:	200017e8 	.word	0x200017e8

080074e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d054      	beq.n	80075a4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074fa:	4b2d      	ldr	r3, [pc, #180]	; (80075b0 <xTaskPriorityDisinherit+0xcc>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	429a      	cmp	r2, r3
 8007502:	d009      	beq.n	8007518 <xTaskPriorityDisinherit+0x34>
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	e7fe      	b.n	8007516 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751c:	2b00      	cmp	r3, #0
 800751e:	d109      	bne.n	8007534 <xTaskPriorityDisinherit+0x50>
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	60bb      	str	r3, [r7, #8]
 8007532:	e7fe      	b.n	8007532 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007538:	1e5a      	subs	r2, r3, #1
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007546:	429a      	cmp	r2, r3
 8007548:	d02c      	beq.n	80075a4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800754e:	2b00      	cmp	r3, #0
 8007550:	d128      	bne.n	80075a4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	3304      	adds	r3, #4
 8007556:	4618      	mov	r0, r3
 8007558:	f7fd fe5e 	bl	8005218 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007574:	4b0f      	ldr	r3, [pc, #60]	; (80075b4 <xTaskPriorityDisinherit+0xd0>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d903      	bls.n	8007584 <xTaskPriorityDisinherit+0xa0>
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	4a0c      	ldr	r2, [pc, #48]	; (80075b4 <xTaskPriorityDisinherit+0xd0>)
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4a09      	ldr	r2, [pc, #36]	; (80075b8 <xTaskPriorityDisinherit+0xd4>)
 8007592:	441a      	add	r2, r3
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	3304      	adds	r3, #4
 8007598:	4619      	mov	r1, r3
 800759a:	4610      	mov	r0, r2
 800759c:	f7fd fde1 	bl	8005162 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075a0:	2301      	movs	r3, #1
 80075a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075a4:	697b      	ldr	r3, [r7, #20]
	}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	2000130c 	.word	0x2000130c
 80075b4:	200017e8 	.word	0x200017e8
 80075b8:	20001310 	.word	0x20001310

080075bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80075ca:	2301      	movs	r3, #1
 80075cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d06d      	beq.n	80076b0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d109      	bne.n	80075f0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	60fb      	str	r3, [r7, #12]
 80075ee:	e7fe      	b.n	80075ee <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d202      	bcs.n	8007600 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	e002      	b.n	8007606 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007604:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	429a      	cmp	r2, r3
 800760e:	d04f      	beq.n	80076b0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	429a      	cmp	r2, r3
 8007618:	d14a      	bne.n	80076b0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800761a:	4b27      	ldr	r3, [pc, #156]	; (80076b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	429a      	cmp	r2, r3
 8007622:	d109      	bne.n	8007638 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	e7fe      	b.n	8007636 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	2b00      	cmp	r3, #0
 800764a:	db04      	blt.n	8007656 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	6959      	ldr	r1, [r3, #20]
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4a15      	ldr	r2, [pc, #84]	; (80076bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007666:	4413      	add	r3, r2
 8007668:	4299      	cmp	r1, r3
 800766a:	d101      	bne.n	8007670 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800766c:	2301      	movs	r3, #1
 800766e:	e000      	b.n	8007672 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8007670:	2300      	movs	r3, #0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01c      	beq.n	80076b0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	3304      	adds	r3, #4
 800767a:	4618      	mov	r0, r3
 800767c:	f7fd fdcc 	bl	8005218 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007684:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d903      	bls.n	8007694 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	4a0b      	ldr	r2, [pc, #44]	; (80076c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007698:	4613      	mov	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4a06      	ldr	r2, [pc, #24]	; (80076bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80076a2:	441a      	add	r2, r3
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	3304      	adds	r3, #4
 80076a8:	4619      	mov	r1, r3
 80076aa:	4610      	mov	r0, r2
 80076ac:	f7fd fd59 	bl	8005162 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076b0:	bf00      	nop
 80076b2:	3720      	adds	r7, #32
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	2000130c 	.word	0x2000130c
 80076bc:	20001310 	.word	0x20001310
 80076c0:	200017e8 	.word	0x200017e8

080076c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80076c8:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d004      	beq.n	80076da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80076d0:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076d6:	3201      	adds	r2, #1
 80076d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80076da:	4b03      	ldr	r3, [pc, #12]	; (80076e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80076dc:	681b      	ldr	r3, [r3, #0]
	}
 80076de:	4618      	mov	r0, r3
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bc80      	pop	{r7}
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	2000130c 	.word	0x2000130c

080076ec <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80076f6:	f7fd fea7 	bl	8005448 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80076fa:	4b1e      	ldr	r3, [pc, #120]	; (8007774 <ulTaskNotifyTake+0x88>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007700:	2b00      	cmp	r3, #0
 8007702:	d113      	bne.n	800772c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007704:	4b1b      	ldr	r3, [pc, #108]	; (8007774 <ulTaskNotifyTake+0x88>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007714:	2101      	movs	r1, #1
 8007716:	6838      	ldr	r0, [r7, #0]
 8007718:	f000 f99a 	bl	8007a50 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800771c:	4b16      	ldr	r3, [pc, #88]	; (8007778 <ulTaskNotifyTake+0x8c>)
 800771e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800772c:	f7fd feba 	bl	80054a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007730:	f7fd fe8a 	bl	8005448 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007734:	4b0f      	ldr	r3, [pc, #60]	; (8007774 <ulTaskNotifyTake+0x88>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00c      	beq.n	800775c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d004      	beq.n	8007752 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007748:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <ulTaskNotifyTake+0x88>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2200      	movs	r2, #0
 800774e:	655a      	str	r2, [r3, #84]	; 0x54
 8007750:	e004      	b.n	800775c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007752:	4b08      	ldr	r3, [pc, #32]	; (8007774 <ulTaskNotifyTake+0x88>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	3a01      	subs	r2, #1
 800775a:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <ulTaskNotifyTake+0x88>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8007766:	f7fd fe9d 	bl	80054a4 <vPortExitCritical>

		return ulReturn;
 800776a:	68fb      	ldr	r3, [r7, #12]
	}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	2000130c 	.word	0x2000130c
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08a      	sub	sp, #40	; 0x28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	603b      	str	r3, [r7, #0]
 8007788:	4613      	mov	r3, r2
 800778a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800778c:	2301      	movs	r3, #1
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d109      	bne.n	80077aa <xTaskGenericNotify+0x2e>
 8007796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	61bb      	str	r3, [r7, #24]
 80077a8:	e7fe      	b.n	80077a8 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80077ae:	f7fd fe4b 	bl	8005448 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80077c6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d827      	bhi.n	8007826 <xTaskGenericNotify+0xaa>
 80077d6:	a201      	add	r2, pc, #4	; (adr r2, 80077dc <xTaskGenericNotify+0x60>)
 80077d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077dc:	08007827 	.word	0x08007827
 80077e0:	080077f1 	.word	0x080077f1
 80077e4:	080077ff 	.word	0x080077ff
 80077e8:	0800780b 	.word	0x0800780b
 80077ec:	08007813 	.word	0x08007813
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	431a      	orrs	r2, r3
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80077fc:	e013      	b.n	8007826 <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007808:	e00d      	b.n	8007826 <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007810:	e009      	b.n	8007826 <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007812:	7ffb      	ldrb	r3, [r7, #31]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d003      	beq.n	8007820 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800781e:	e001      	b.n	8007824 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8007820:	2300      	movs	r3, #0
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007824:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007826:	7ffb      	ldrb	r3, [r7, #31]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d139      	bne.n	80078a0 <xTaskGenericNotify+0x124>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	3304      	adds	r3, #4
 8007830:	4618      	mov	r0, r3
 8007832:	f7fd fcf1 	bl	8005218 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783a:	4b1d      	ldr	r3, [pc, #116]	; (80078b0 <xTaskGenericNotify+0x134>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d903      	bls.n	800784a <xTaskGenericNotify+0xce>
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	4a1a      	ldr	r2, [pc, #104]	; (80078b0 <xTaskGenericNotify+0x134>)
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4a17      	ldr	r2, [pc, #92]	; (80078b4 <xTaskGenericNotify+0x138>)
 8007858:	441a      	add	r2, r3
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	3304      	adds	r3, #4
 800785e:	4619      	mov	r1, r3
 8007860:	4610      	mov	r0, r2
 8007862:	f7fd fc7e 	bl	8005162 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <xTaskGenericNotify+0x106>
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	e7fe      	b.n	8007880 <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007886:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <xTaskGenericNotify+0x13c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788c:	429a      	cmp	r2, r3
 800788e:	d907      	bls.n	80078a0 <xTaskGenericNotify+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007890:	4b0a      	ldr	r3, [pc, #40]	; (80078bc <xTaskGenericNotify+0x140>)
 8007892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80078a0:	f7fd fe00 	bl	80054a4 <vPortExitCritical>

		return xReturn;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3728      	adds	r7, #40	; 0x28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	200017e8 	.word	0x200017e8
 80078b4:	20001310 	.word	0x20001310
 80078b8:	2000130c 	.word	0x2000130c
 80078bc:	e000ed04 	.word	0xe000ed04

080078c0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08e      	sub	sp, #56	; 0x38
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	4613      	mov	r3, r2
 80078ce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80078d0:	2301      	movs	r3, #1
 80078d2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <xTaskGenericNotifyFromISR+0x2e>
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24
 80078ec:	e7fe      	b.n	80078ec <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078ee:	f7fd fe65 	bl	80055bc <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80078f6:	f3ef 8211 	mrs	r2, BASEPRI
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	623a      	str	r2, [r7, #32]
 800790c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800790e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007910:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	2202      	movs	r2, #2
 800792e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8007932:	79fb      	ldrb	r3, [r7, #7]
 8007934:	2b04      	cmp	r3, #4
 8007936:	d829      	bhi.n	800798c <xTaskGenericNotifyFromISR+0xcc>
 8007938:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <xTaskGenericNotifyFromISR+0x80>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	0800798d 	.word	0x0800798d
 8007944:	08007955 	.word	0x08007955
 8007948:	08007963 	.word	0x08007963
 800794c:	0800796f 	.word	0x0800796f
 8007950:	08007977 	.word	0x08007977
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	431a      	orrs	r2, r3
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007960:	e014      	b.n	800798c <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800796c:	e00e      	b.n	800798c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007974:	e00a      	b.n	800798c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800797a:	2b02      	cmp	r3, #2
 800797c:	d003      	beq.n	8007986 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007984:	e001      	b.n	800798a <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8007986:	2300      	movs	r3, #0
 8007988:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800798a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800798c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007990:	2b01      	cmp	r3, #1
 8007992:	d146      	bne.n	8007a22 <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	2b00      	cmp	r3, #0
 800799a:	d009      	beq.n	80079b0 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	61bb      	str	r3, [r7, #24]
 80079ae:	e7fe      	b.n	80079ae <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079b0:	4b21      	ldr	r3, [pc, #132]	; (8007a38 <xTaskGenericNotifyFromISR+0x178>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d11d      	bne.n	80079f4 <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	3304      	adds	r3, #4
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fd fc2b 	bl	8005218 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c6:	4b1d      	ldr	r3, [pc, #116]	; (8007a3c <xTaskGenericNotifyFromISR+0x17c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d903      	bls.n	80079d6 <xTaskGenericNotifyFromISR+0x116>
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	4a1a      	ldr	r2, [pc, #104]	; (8007a3c <xTaskGenericNotifyFromISR+0x17c>)
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4a17      	ldr	r2, [pc, #92]	; (8007a40 <xTaskGenericNotifyFromISR+0x180>)
 80079e4:	441a      	add	r2, r3
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	3304      	adds	r3, #4
 80079ea:	4619      	mov	r1, r3
 80079ec:	4610      	mov	r0, r2
 80079ee:	f7fd fbb8 	bl	8005162 <vListInsertEnd>
 80079f2:	e005      	b.n	8007a00 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	3318      	adds	r3, #24
 80079f8:	4619      	mov	r1, r3
 80079fa:	4812      	ldr	r0, [pc, #72]	; (8007a44 <xTaskGenericNotifyFromISR+0x184>)
 80079fc:	f7fd fbb1 	bl	8005162 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a04:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <xTaskGenericNotifyFromISR+0x188>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d909      	bls.n	8007a22 <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a16:	2201      	movs	r2, #1
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	e002      	b.n	8007a22 <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <xTaskGenericNotifyFromISR+0x18c>)
 8007a1e:	2201      	movs	r2, #1
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3738      	adds	r7, #56	; 0x38
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20001808 	.word	0x20001808
 8007a3c:	200017e8 	.word	0x200017e8
 8007a40:	20001310 	.word	0x20001310
 8007a44:	200017a0 	.word	0x200017a0
 8007a48:	2000130c 	.word	0x2000130c
 8007a4c:	200017f4 	.word	0x200017f4

08007a50 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a5a:	4b21      	ldr	r3, [pc, #132]	; (8007ae0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a60:	4b20      	ldr	r3, [pc, #128]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3304      	adds	r3, #4
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fd fbd6 	bl	8005218 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a72:	d10a      	bne.n	8007a8a <prvAddCurrentTaskToDelayedList+0x3a>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3304      	adds	r3, #4
 8007a80:	4619      	mov	r1, r3
 8007a82:	4819      	ldr	r0, [pc, #100]	; (8007ae8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007a84:	f7fd fb6d 	bl	8005162 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a88:	e026      	b.n	8007ad8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4413      	add	r3, r2
 8007a90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a92:	4b14      	ldr	r3, [pc, #80]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d209      	bcs.n	8007ab6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aa2:	4b12      	ldr	r3, [pc, #72]	; (8007aec <prvAddCurrentTaskToDelayedList+0x9c>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	4619      	mov	r1, r3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	f7fd fb7a 	bl	80051a8 <vListInsert>
}
 8007ab4:	e010      	b.n	8007ad8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ab6:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	f7fd fb70 	bl	80051a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ac8:	4b0a      	ldr	r3, [pc, #40]	; (8007af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d202      	bcs.n	8007ad8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ad2:	4a08      	ldr	r2, [pc, #32]	; (8007af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	6013      	str	r3, [r2, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	200017e4 	.word	0x200017e4
 8007ae4:	2000130c 	.word	0x2000130c
 8007ae8:	200017cc 	.word	0x200017cc
 8007aec:	2000179c 	.word	0x2000179c
 8007af0:	20001798 	.word	0x20001798
 8007af4:	20001800 	.word	0x20001800

08007af8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	; 0x28
 8007afc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b02:	f000 fb15 	bl	8008130 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b06:	4b1c      	ldr	r3, [pc, #112]	; (8007b78 <xTimerCreateTimerTask+0x80>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d021      	beq.n	8007b52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b16:	1d3a      	adds	r2, r7, #4
 8007b18:	f107 0108 	add.w	r1, r7, #8
 8007b1c:	f107 030c 	add.w	r3, r7, #12
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fd fad9 	bl	80050d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	9202      	str	r2, [sp, #8]
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	2302      	movs	r3, #2
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	2300      	movs	r3, #0
 8007b36:	460a      	mov	r2, r1
 8007b38:	4910      	ldr	r1, [pc, #64]	; (8007b7c <xTimerCreateTimerTask+0x84>)
 8007b3a:	4811      	ldr	r0, [pc, #68]	; (8007b80 <xTimerCreateTimerTask+0x88>)
 8007b3c:	f7fe fe2e 	bl	800679c <xTaskCreateStatic>
 8007b40:	4602      	mov	r2, r0
 8007b42:	4b10      	ldr	r3, [pc, #64]	; (8007b84 <xTimerCreateTimerTask+0x8c>)
 8007b44:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b46:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <xTimerCreateTimerTask+0x8c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d109      	bne.n	8007b6c <xTimerCreateTimerTask+0x74>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	613b      	str	r3, [r7, #16]
 8007b6a:	e7fe      	b.n	8007b6a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007b6c:	697b      	ldr	r3, [r7, #20]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	2000183c 	.word	0x2000183c
 8007b7c:	08008318 	.word	0x08008318
 8007b80:	08007d45 	.word	0x08007d45
 8007b84:	20001840 	.word	0x20001840

08007b88 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af02      	add	r7, sp, #8
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
 8007b94:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007b96:	2030      	movs	r0, #48	; 0x30
 8007b98:	f7fd fd4c 	bl	8005634 <pvPortMalloc>
 8007b9c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00d      	beq.n	8007bc0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f809 	bl	8007bca <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007bc0:	697b      	ldr	r3, [r7, #20]
	}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b086      	sub	sp, #24
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	607a      	str	r2, [r7, #4]
 8007bd6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <prvInitialiseNewTimer+0x28>
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	617b      	str	r3, [r7, #20]
 8007bf0:	e7fe      	b.n	8007bf0 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d015      	beq.n	8007c24 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007bf8:	f000 fa9a 	bl	8008130 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	6a3a      	ldr	r2, [r7, #32]
 8007c18:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd fa93 	bl	800514a <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007c24:	bf00      	nop
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08a      	sub	sp, #40	; 0x28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d109      	bne.n	8007c58 <xTimerGenericCommand+0x2c>
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	623b      	str	r3, [r7, #32]
 8007c56:	e7fe      	b.n	8007c56 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c58:	4b19      	ldr	r3, [pc, #100]	; (8007cc0 <xTimerGenericCommand+0x94>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d02a      	beq.n	8007cb6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2b05      	cmp	r3, #5
 8007c70:	dc18      	bgt.n	8007ca4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c72:	f7ff fbab 	bl	80073cc <xTaskGetSchedulerState>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d109      	bne.n	8007c90 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c7c:	4b10      	ldr	r3, [pc, #64]	; (8007cc0 <xTimerGenericCommand+0x94>)
 8007c7e:	6818      	ldr	r0, [r3, #0]
 8007c80:	f107 0110 	add.w	r1, r7, #16
 8007c84:	2300      	movs	r3, #0
 8007c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c88:	f7fe f848 	bl	8005d1c <xQueueGenericSend>
 8007c8c:	6278      	str	r0, [r7, #36]	; 0x24
 8007c8e:	e012      	b.n	8007cb6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c90:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <xTimerGenericCommand+0x94>)
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	f107 0110 	add.w	r1, r7, #16
 8007c98:	2300      	movs	r3, #0
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f7fe f83e 	bl	8005d1c <xQueueGenericSend>
 8007ca0:	6278      	str	r0, [r7, #36]	; 0x24
 8007ca2:	e008      	b.n	8007cb6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ca4:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <xTimerGenericCommand+0x94>)
 8007ca6:	6818      	ldr	r0, [r3, #0]
 8007ca8:	f107 0110 	add.w	r1, r7, #16
 8007cac:	2300      	movs	r3, #0
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	f7fe f92e 	bl	8005f10 <xQueueGenericSendFromISR>
 8007cb4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3728      	adds	r7, #40	; 0x28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	2000183c 	.word	0x2000183c

08007cc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cce:	4b1c      	ldr	r3, [pc, #112]	; (8007d40 <prvProcessExpiredTimer+0x7c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	3304      	adds	r3, #4
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fd fa9b 	bl	8005218 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d121      	bne.n	8007d2e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	699a      	ldr	r2, [r3, #24]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	18d1      	adds	r1, r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	6978      	ldr	r0, [r7, #20]
 8007cf8:	f000 f8c8 	bl	8007e8c <prvInsertTimerInActiveList>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d015      	beq.n	8007d2e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d02:	2300      	movs	r3, #0
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	2300      	movs	r3, #0
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	6978      	ldr	r0, [r7, #20]
 8007d0e:	f7ff ff8d 	bl	8007c2c <xTimerGenericCommand>
 8007d12:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <prvProcessExpiredTimer+0x6a>
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	e7fe      	b.n	8007d2c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	6978      	ldr	r0, [r7, #20]
 8007d34:	4798      	blx	r3
}
 8007d36:	bf00      	nop
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20001834 	.word	0x20001834

08007d44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d4c:	f107 0308 	add.w	r3, r7, #8
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 f857 	bl	8007e04 <prvGetNextExpireTime>
 8007d56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f803 	bl	8007d68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d62:	f000 f8d5 	bl	8007f10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d66:	e7f1      	b.n	8007d4c <prvTimerTask+0x8>

08007d68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d72:	f7fe ff3f 	bl	8006bf4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d76:	f107 0308 	add.w	r3, r7, #8
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 f866 	bl	8007e4c <prvSampleTimeNow>
 8007d80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d130      	bne.n	8007dea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10a      	bne.n	8007da4 <prvProcessTimerOrBlockTask+0x3c>
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d806      	bhi.n	8007da4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d96:	f7fe ff3b 	bl	8006c10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d9a:	68f9      	ldr	r1, [r7, #12]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7ff ff91 	bl	8007cc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007da2:	e024      	b.n	8007dee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d008      	beq.n	8007dbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007daa:	4b13      	ldr	r3, [pc, #76]	; (8007df8 <prvProcessTimerOrBlockTask+0x90>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bf0c      	ite	eq
 8007db4:	2301      	moveq	r3, #1
 8007db6:	2300      	movne	r3, #0
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007dbc:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <prvProcessTimerOrBlockTask+0x94>)
 8007dbe:	6818      	ldr	r0, [r3, #0]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	f7fe fcb3 	bl	8006734 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007dce:	f7fe ff1f 	bl	8006c10 <xTaskResumeAll>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007dd8:	4b09      	ldr	r3, [pc, #36]	; (8007e00 <prvProcessTimerOrBlockTask+0x98>)
 8007dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	f3bf 8f6f 	isb	sy
}
 8007de8:	e001      	b.n	8007dee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007dea:	f7fe ff11 	bl	8006c10 <xTaskResumeAll>
}
 8007dee:	bf00      	nop
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20001838 	.word	0x20001838
 8007dfc:	2000183c 	.word	0x2000183c
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e0c:	4b0e      	ldr	r3, [pc, #56]	; (8007e48 <prvGetNextExpireTime+0x44>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bf0c      	ite	eq
 8007e16:	2301      	moveq	r3, #1
 8007e18:	2300      	movne	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d105      	bne.n	8007e36 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e2a:	4b07      	ldr	r3, [pc, #28]	; (8007e48 <prvGetNextExpireTime+0x44>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	e001      	b.n	8007e3a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bc80      	pop	{r7}
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	20001834 	.word	0x20001834

08007e4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e54:	f7fe ff78 	bl	8006d48 <xTaskGetTickCount>
 8007e58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e5a:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <prvSampleTimeNow+0x3c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d205      	bcs.n	8007e70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e64:	f000 f904 	bl	8008070 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	e002      	b.n	8007e76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e76:	4a04      	ldr	r2, [pc, #16]	; (8007e88 <prvSampleTimeNow+0x3c>)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20001844 	.word	0x20001844

08007e8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d812      	bhi.n	8007ed8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	1ad2      	subs	r2, r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d302      	bcc.n	8007ec6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	e01b      	b.n	8007efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ec6:	4b10      	ldr	r3, [pc, #64]	; (8007f08 <prvInsertTimerInActiveList+0x7c>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	f7fd f969 	bl	80051a8 <vListInsert>
 8007ed6:	e012      	b.n	8007efe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d206      	bcs.n	8007eee <prvInsertTimerInActiveList+0x62>
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d302      	bcc.n	8007eee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	e007      	b.n	8007efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eee:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <prvInsertTimerInActiveList+0x80>)
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4610      	mov	r0, r2
 8007efa:	f7fd f955 	bl	80051a8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007efe:	697b      	ldr	r3, [r7, #20]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	20001838 	.word	0x20001838
 8007f0c:	20001834 	.word	0x20001834

08007f10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08e      	sub	sp, #56	; 0x38
 8007f14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f16:	e099      	b.n	800804c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	da17      	bge.n	8007f4e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f1e:	1d3b      	adds	r3, r7, #4
 8007f20:	3304      	adds	r3, #4
 8007f22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d109      	bne.n	8007f3e <prvProcessReceivedCommands+0x2e>
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	61fb      	str	r3, [r7, #28]
 8007f3c:	e7fe      	b.n	8007f3c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f44:	6850      	ldr	r0, [r2, #4]
 8007f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f48:	6892      	ldr	r2, [r2, #8]
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	db7b      	blt.n	800804c <prvProcessReceivedCommands+0x13c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d004      	beq.n	8007f6a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	3304      	adds	r3, #4
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fd f957 	bl	8005218 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7ff ff6d 	bl	8007e4c <prvSampleTimeNow>
 8007f72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b09      	cmp	r3, #9
 8007f78:	d867      	bhi.n	800804a <prvProcessReceivedCommands+0x13a>
 8007f7a:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <prvProcessReceivedCommands+0x70>)
 8007f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f80:	08007fa9 	.word	0x08007fa9
 8007f84:	08007fa9 	.word	0x08007fa9
 8007f88:	08007fa9 	.word	0x08007fa9
 8007f8c:	0800804d 	.word	0x0800804d
 8007f90:	08008003 	.word	0x08008003
 8007f94:	08008039 	.word	0x08008039
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08007fa9 	.word	0x08007fa9
 8007fa0:	0800804d 	.word	0x0800804d
 8007fa4:	08008003 	.word	0x08008003
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	18d1      	adds	r1, r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fb6:	f7ff ff69 	bl	8007e8c <prvInsertTimerInActiveList>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d045      	beq.n	800804c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fc6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d13d      	bne.n	800804c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	441a      	add	r2, r3
 8007fd8:	2300      	movs	r3, #0
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	2100      	movs	r1, #0
 8007fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fe2:	f7ff fe23 	bl	8007c2c <xTimerGenericCommand>
 8007fe6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d12e      	bne.n	800804c <prvProcessReceivedCommands+0x13c>
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	61bb      	str	r3, [r7, #24]
 8008000:	e7fe      	b.n	8008000 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d109      	bne.n	8008024 <prvProcessReceivedCommands+0x114>
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	617b      	str	r3, [r7, #20]
 8008022:	e7fe      	b.n	8008022 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	699a      	ldr	r2, [r3, #24]
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	18d1      	adds	r1, r2, r3
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008032:	f7ff ff2b 	bl	8007e8c <prvInsertTimerInActiveList>
					break;
 8008036:	e009      	b.n	800804c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d104      	bne.n	800804c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008044:	f7fd fbb8 	bl	80057b8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008048:	e000      	b.n	800804c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
 800804a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800804c:	4b07      	ldr	r3, [pc, #28]	; (800806c <prvProcessReceivedCommands+0x15c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	1d39      	adds	r1, r7, #4
 8008052:	2200      	movs	r2, #0
 8008054:	4618      	mov	r0, r3
 8008056:	f7fd ffef 	bl	8006038 <xQueueReceive>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	f47f af5b 	bne.w	8007f18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008062:	bf00      	nop
 8008064:	3730      	adds	r7, #48	; 0x30
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	2000183c 	.word	0x2000183c

08008070 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008076:	e044      	b.n	8008102 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008078:	4b2b      	ldr	r3, [pc, #172]	; (8008128 <prvSwitchTimerLists+0xb8>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008082:	4b29      	ldr	r3, [pc, #164]	; (8008128 <prvSwitchTimerLists+0xb8>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	3304      	adds	r3, #4
 8008090:	4618      	mov	r0, r3
 8008092:	f7fd f8c1 	bl	8005218 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	6938      	ldr	r0, [r7, #16]
 800809c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d12d      	bne.n	8008102 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	699a      	ldr	r2, [r3, #24]
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	4413      	add	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d90e      	bls.n	80080d6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080c4:	4b18      	ldr	r3, [pc, #96]	; (8008128 <prvSwitchTimerLists+0xb8>)
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	3304      	adds	r3, #4
 80080cc:	4619      	mov	r1, r3
 80080ce:	4610      	mov	r0, r2
 80080d0:	f7fd f86a 	bl	80051a8 <vListInsert>
 80080d4:	e015      	b.n	8008102 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080d6:	2300      	movs	r3, #0
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	2300      	movs	r3, #0
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	2100      	movs	r1, #0
 80080e0:	6938      	ldr	r0, [r7, #16]
 80080e2:	f7ff fda3 	bl	8007c2c <xTimerGenericCommand>
 80080e6:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d109      	bne.n	8008102 <prvSwitchTimerLists+0x92>
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	603b      	str	r3, [r7, #0]
 8008100:	e7fe      	b.n	8008100 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008102:	4b09      	ldr	r3, [pc, #36]	; (8008128 <prvSwitchTimerLists+0xb8>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1b5      	bne.n	8008078 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800810c:	4b06      	ldr	r3, [pc, #24]	; (8008128 <prvSwitchTimerLists+0xb8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8008112:	4b06      	ldr	r3, [pc, #24]	; (800812c <prvSwitchTimerLists+0xbc>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a04      	ldr	r2, [pc, #16]	; (8008128 <prvSwitchTimerLists+0xb8>)
 8008118:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800811a:	4a04      	ldr	r2, [pc, #16]	; (800812c <prvSwitchTimerLists+0xbc>)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6013      	str	r3, [r2, #0]
}
 8008120:	bf00      	nop
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20001834 	.word	0x20001834
 800812c:	20001838 	.word	0x20001838

08008130 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008136:	f7fd f987 	bl	8005448 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800813a:	4b15      	ldr	r3, [pc, #84]	; (8008190 <prvCheckForValidListAndQueue+0x60>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d120      	bne.n	8008184 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008142:	4814      	ldr	r0, [pc, #80]	; (8008194 <prvCheckForValidListAndQueue+0x64>)
 8008144:	f7fc ffe2 	bl	800510c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008148:	4813      	ldr	r0, [pc, #76]	; (8008198 <prvCheckForValidListAndQueue+0x68>)
 800814a:	f7fc ffdf 	bl	800510c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800814e:	4b13      	ldr	r3, [pc, #76]	; (800819c <prvCheckForValidListAndQueue+0x6c>)
 8008150:	4a10      	ldr	r2, [pc, #64]	; (8008194 <prvCheckForValidListAndQueue+0x64>)
 8008152:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008154:	4b12      	ldr	r3, [pc, #72]	; (80081a0 <prvCheckForValidListAndQueue+0x70>)
 8008156:	4a10      	ldr	r2, [pc, #64]	; (8008198 <prvCheckForValidListAndQueue+0x68>)
 8008158:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800815a:	2300      	movs	r3, #0
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	4b11      	ldr	r3, [pc, #68]	; (80081a4 <prvCheckForValidListAndQueue+0x74>)
 8008160:	4a11      	ldr	r2, [pc, #68]	; (80081a8 <prvCheckForValidListAndQueue+0x78>)
 8008162:	2110      	movs	r1, #16
 8008164:	200a      	movs	r0, #10
 8008166:	f7fd fca1 	bl	8005aac <xQueueGenericCreateStatic>
 800816a:	4602      	mov	r2, r0
 800816c:	4b08      	ldr	r3, [pc, #32]	; (8008190 <prvCheckForValidListAndQueue+0x60>)
 800816e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008170:	4b07      	ldr	r3, [pc, #28]	; (8008190 <prvCheckForValidListAndQueue+0x60>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d005      	beq.n	8008184 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008178:	4b05      	ldr	r3, [pc, #20]	; (8008190 <prvCheckForValidListAndQueue+0x60>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	490b      	ldr	r1, [pc, #44]	; (80081ac <prvCheckForValidListAndQueue+0x7c>)
 800817e:	4618      	mov	r0, r3
 8008180:	f7fe fa88 	bl	8006694 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008184:	f7fd f98e 	bl	80054a4 <vPortExitCritical>
}
 8008188:	bf00      	nop
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	2000183c 	.word	0x2000183c
 8008194:	2000180c 	.word	0x2000180c
 8008198:	20001820 	.word	0x20001820
 800819c:	20001834 	.word	0x20001834
 80081a0:	20001838 	.word	0x20001838
 80081a4:	200018e8 	.word	0x200018e8
 80081a8:	20001848 	.word	0x20001848
 80081ac:	08008320 	.word	0x08008320

080081b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80081b0:	480c      	ldr	r0, [pc, #48]	; (80081e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80081b2:	490d      	ldr	r1, [pc, #52]	; (80081e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80081b4:	4a0d      	ldr	r2, [pc, #52]	; (80081ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80081b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80081b8:	e002      	b.n	80081c0 <LoopCopyDataInit>

080081ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80081ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80081bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80081be:	3304      	adds	r3, #4

080081c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80081c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80081c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80081c4:	d3f9      	bcc.n	80081ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80081c6:	4a0a      	ldr	r2, [pc, #40]	; (80081f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80081c8:	4c0a      	ldr	r4, [pc, #40]	; (80081f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80081ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80081cc:	e001      	b.n	80081d2 <LoopFillZerobss>

080081ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80081ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80081d0:	3204      	adds	r2, #4

080081d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80081d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80081d4:	d3fb      	bcc.n	80081ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80081d6:	f7f8 fbd9 	bl	800098c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80081da:	f000 f80f 	bl	80081fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80081de:	f7f7 ffb7 	bl	8000150 <main>
  bx lr
 80081e2:	4770      	bx	lr
  ldr r0, =_sdata
 80081e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80081e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80081ec:	08008408 	.word	0x08008408
  ldr r2, =_sbss
 80081f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80081f4:	20001bec 	.word	0x20001bec

080081f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80081f8:	e7fe      	b.n	80081f8 <ADC1_2_IRQHandler>
	...

080081fc <__libc_init_array>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	2500      	movs	r5, #0
 8008200:	4e0c      	ldr	r6, [pc, #48]	; (8008234 <__libc_init_array+0x38>)
 8008202:	4c0d      	ldr	r4, [pc, #52]	; (8008238 <__libc_init_array+0x3c>)
 8008204:	1ba4      	subs	r4, r4, r6
 8008206:	10a4      	asrs	r4, r4, #2
 8008208:	42a5      	cmp	r5, r4
 800820a:	d109      	bne.n	8008220 <__libc_init_array+0x24>
 800820c:	f000 f82e 	bl	800826c <_init>
 8008210:	2500      	movs	r5, #0
 8008212:	4e0a      	ldr	r6, [pc, #40]	; (800823c <__libc_init_array+0x40>)
 8008214:	4c0a      	ldr	r4, [pc, #40]	; (8008240 <__libc_init_array+0x44>)
 8008216:	1ba4      	subs	r4, r4, r6
 8008218:	10a4      	asrs	r4, r4, #2
 800821a:	42a5      	cmp	r5, r4
 800821c:	d105      	bne.n	800822a <__libc_init_array+0x2e>
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008224:	4798      	blx	r3
 8008226:	3501      	adds	r5, #1
 8008228:	e7ee      	b.n	8008208 <__libc_init_array+0xc>
 800822a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800822e:	4798      	blx	r3
 8008230:	3501      	adds	r5, #1
 8008232:	e7f2      	b.n	800821a <__libc_init_array+0x1e>
 8008234:	08008400 	.word	0x08008400
 8008238:	08008400 	.word	0x08008400
 800823c:	08008400 	.word	0x08008400
 8008240:	08008404 	.word	0x08008404

08008244 <memcpy>:
 8008244:	b510      	push	{r4, lr}
 8008246:	1e43      	subs	r3, r0, #1
 8008248:	440a      	add	r2, r1
 800824a:	4291      	cmp	r1, r2
 800824c:	d100      	bne.n	8008250 <memcpy+0xc>
 800824e:	bd10      	pop	{r4, pc}
 8008250:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008258:	e7f7      	b.n	800824a <memcpy+0x6>

0800825a <memset>:
 800825a:	4603      	mov	r3, r0
 800825c:	4402      	add	r2, r0
 800825e:	4293      	cmp	r3, r2
 8008260:	d100      	bne.n	8008264 <memset+0xa>
 8008262:	4770      	bx	lr
 8008264:	f803 1b01 	strb.w	r1, [r3], #1
 8008268:	e7f9      	b.n	800825e <memset+0x4>
	...

0800826c <_init>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	bf00      	nop
 8008270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008272:	bc08      	pop	{r3}
 8008274:	469e      	mov	lr, r3
 8008276:	4770      	bx	lr

08008278 <_fini>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	bf00      	nop
 800827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827e:	bc08      	pop	{r3}
 8008280:	469e      	mov	lr, r3
 8008282:	4770      	bx	lr
