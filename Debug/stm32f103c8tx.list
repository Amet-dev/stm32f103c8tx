
stm32f103c8tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009314  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08009424  08009424  00019424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080095b4  080095b4  000195b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080095b8  080095b8  000195b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080095bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c5c  20000014  080095d0  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001c70  080095d0  00021c70  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c0f0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003854  00000000  00000000  0003c12d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001680  00000000  00000000  0003f988  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cc1a  00000000  00000000  00041008  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00007886  00000000  00000000  0004dc22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  000554a8  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00001500  00000000  00000000  00055528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005db4  00000000  00000000  00056a28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	0800940c 	.word	0x0800940c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	0800940c 	.word	0x0800940c

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 ff70 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f860 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 face 	bl	80006fc <MX_GPIO_Init>
  MX_TIM4_Init();
 8000160:	f000 fa1c 	bl	800059c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000164:	f000 faa0 	bl	80006a8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000168:	f000 f8b4 	bl	80002d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800016c:	f000 f91c 	bl	80003a8 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000170:	f000 f976 	bl	8000460 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //»Õ»÷»¿À»«¿÷»ﬂ
  ModbusH.uiModbusType = SLAVE_RTU;
 8000174:	4b1f      	ldr	r3, [pc, #124]	; (80001f4 <main+0xa4>)
 8000176:	2203      	movs	r2, #3
 8000178:	701a      	strb	r2, [r3, #0]
  ModbusH.port =  &huart1;
 800017a:	4b1e      	ldr	r3, [pc, #120]	; (80001f4 <main+0xa4>)
 800017c:	4a1e      	ldr	r2, [pc, #120]	; (80001f8 <main+0xa8>)
 800017e:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 01; //Modbus slave ID
 8000180:	4b1c      	ldr	r3, [pc, #112]	; (80001f4 <main+0xa4>)
 8000182:	2201      	movs	r2, #1
 8000184:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 8000186:	4b1b      	ldr	r3, [pc, #108]	; (80001f4 <main+0xa4>)
 8000188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800018c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
  ModbusH.EN_Port = NULL;
 8000190:	4b18      	ldr	r3, [pc, #96]	; (80001f4 <main+0xa4>)
 8000192:	2200      	movs	r2, #0
 8000194:	60da      	str	r2, [r3, #12]
  ModbusH.u32overTime = 0;
 8000196:	4b17      	ldr	r3, [pc, #92]	; (80001f4 <main+0xa4>)
 8000198:	2200      	movs	r2, #0
 800019a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  ModbusH.au16regs = ModbusDATA;
 800019e:	4b15      	ldr	r3, [pc, #84]	; (80001f4 <main+0xa4>)
 80001a0:	4a16      	ldr	r2, [pc, #88]	; (80001fc <main+0xac>)
 80001a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 80001a6:	4b13      	ldr	r3, [pc, #76]	; (80001f4 <main+0xa4>)
 80001a8:	220a      	movs	r2, #10
 80001aa:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  //Initialize Modbus library
  ModbusInit(&ModbusH);
 80001ae:	4811      	ldr	r0, [pc, #68]	; (80001f4 <main+0xa4>)
 80001b0:	f004 fb12 	bl	80047d8 <ModbusInit>
  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 80001b4:	480f      	ldr	r0, [pc, #60]	; (80001f4 <main+0xa4>)
 80001b6:	f004 fbb3 	bl	8004920 <ModbusStart>
/*
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
  HAL_Delay(1000);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
*/
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_2);
 80001ba:	2104      	movs	r1, #4
 80001bc:	4810      	ldr	r0, [pc, #64]	; (8000200 <main+0xb0>)
 80001be:	f002 fdf7 	bl	8002db0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_3);
 80001c2:	2108      	movs	r1, #8
 80001c4:	480e      	ldr	r0, [pc, #56]	; (8000200 <main+0xb0>)
 80001c6:	f002 fdf3 	bl	8002db0 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001ca:	f005 fddd 	bl	8005d88 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001ce:	4a0d      	ldr	r2, [pc, #52]	; (8000204 <main+0xb4>)
 80001d0:	2100      	movs	r1, #0
 80001d2:	480d      	ldr	r0, [pc, #52]	; (8000208 <main+0xb8>)
 80001d4:	f005 fe3e 	bl	8005e54 <osThreadNew>
 80001d8:	4602      	mov	r2, r0
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <main+0xbc>)
 80001dc:	601a      	str	r2, [r3, #0]

  /* creation of myTaskGpio */
  myTaskGpioHandle = osThreadNew(StartTask02, NULL, &myTaskGpio_attributes);
 80001de:	4a0c      	ldr	r2, [pc, #48]	; (8000210 <main+0xc0>)
 80001e0:	2100      	movs	r1, #0
 80001e2:	480c      	ldr	r0, [pc, #48]	; (8000214 <main+0xc4>)
 80001e4:	f005 fe36 	bl	8005e54 <osThreadNew>
 80001e8:	4602      	mov	r2, r0
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <main+0xc8>)
 80001ec:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001ee:	f005 fdfd 	bl	8005dec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f2:	e7fe      	b.n	80001f2 <main+0xa2>
 80001f4:	20001948 	.word	0x20001948
 80001f8:	20001b54 	.word	0x20001b54
 80001fc:	20001b10 	.word	0x20001b10
 8000200:	20001a98 	.word	0x20001a98
 8000204:	080094dc 	.word	0x080094dc
 8000208:	0800083d 	.word	0x0800083d
 800020c:	20001944 	.word	0x20001944
 8000210:	08009500 	.word	0x08009500
 8000214:	08000965 	.word	0x08000965
 8000218:	20001b98 	.word	0x20001b98

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b094      	sub	sp, #80	; 0x50
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000226:	2228      	movs	r2, #40	; 0x28
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f009 f8e5 	bl	80093fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	f107 0314 	add.w	r3, r7, #20
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
 800023e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024c:	2301      	movs	r3, #1
 800024e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000254:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	2301      	movs	r3, #1
 800025c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000268:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800026c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fee4 	bl	8002040 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800027e:	f000 fcc0 	bl	8000c02 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2302      	movs	r3, #2
 8000288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000292:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	2102      	movs	r1, #2
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 f94e 	bl	8002540 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002aa:	f000 fcaa 	bl	8000c02 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ae:	2302      	movs	r3, #2
 80002b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fb0c 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002c6:	f000 fc9c 	bl	8000c02 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3750      	adds	r7, #80	; 0x50
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b088      	sub	sp, #32
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
 80002e8:	615a      	str	r2, [r3, #20]
 80002ea:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ec:	4b2c      	ldr	r3, [pc, #176]	; (80003a0 <MX_ADC1_Init+0xcc>)
 80002ee:	4a2d      	ldr	r2, [pc, #180]	; (80003a4 <MX_ADC1_Init+0xd0>)
 80002f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <MX_ADC1_Init+0xcc>)
 80002f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002fa:	4b29      	ldr	r3, [pc, #164]	; (80003a0 <MX_ADC1_Init+0xcc>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000300:	4b27      	ldr	r3, [pc, #156]	; (80003a0 <MX_ADC1_Init+0xcc>)
 8000302:	2200      	movs	r2, #0
 8000304:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000306:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <MX_ADC1_Init+0xcc>)
 8000308:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800030c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030e:	4b24      	ldr	r3, [pc, #144]	; (80003a0 <MX_ADC1_Init+0xcc>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000314:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <MX_ADC1_Init+0xcc>)
 8000316:	2201      	movs	r2, #1
 8000318:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800031a:	4821      	ldr	r0, [pc, #132]	; (80003a0 <MX_ADC1_Init+0xcc>)
 800031c:	f000 febe 	bl	800109c <HAL_ADC_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_ADC1_Init+0x56>
  {
    Error_Handler();
 8000326:	f000 fc6c 	bl	8000c02 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800032e:	2301      	movs	r3, #1
 8000330:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000332:	2303      	movs	r3, #3
 8000334:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000336:	2302      	movs	r3, #2
 8000338:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800033a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800033e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000344:	2300      	movs	r3, #0
 8000346:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	4619      	mov	r1, r3
 8000350:	4813      	ldr	r0, [pc, #76]	; (80003a0 <MX_ADC1_Init+0xcc>)
 8000352:	f001 f9bf 	bl	80016d4 <HAL_ADCEx_InjectedConfigChannel>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800035c:	f000 fc51 	bl	8000c02 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000360:	2301      	movs	r3, #1
 8000362:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000364:	2302      	movs	r3, #2
 8000366:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4619      	mov	r1, r3
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <MX_ADC1_Init+0xcc>)
 800036e:	f001 f9b1 	bl	80016d4 <HAL_ADCEx_InjectedConfigChannel>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000378:	f000 fc43 	bl	8000c02 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800037c:	2302      	movs	r3, #2
 800037e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000380:	2303      	movs	r3, #3
 8000382:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	4619      	mov	r1, r3
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_ADC1_Init+0xcc>)
 800038a:	f001 f9a3 	bl	80016d4 <HAL_ADCEx_InjectedConfigChannel>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000394:	f000 fc35 	bl	8000c02 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	3720      	adds	r7, #32
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20001b24 	.word	0x20001b24
 80003a4:	40012400 	.word	0x40012400

080003a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	611a      	str	r2, [r3, #16]
 80003bc:	615a      	str	r2, [r3, #20]
 80003be:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80003c0:	4b25      	ldr	r3, [pc, #148]	; (8000458 <MX_ADC2_Init+0xb0>)
 80003c2:	4a26      	ldr	r2, [pc, #152]	; (800045c <MX_ADC2_Init+0xb4>)
 80003c4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003c6:	4b24      	ldr	r3, [pc, #144]	; (8000458 <MX_ADC2_Init+0xb0>)
 80003c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80003ce:	4b22      	ldr	r3, [pc, #136]	; (8000458 <MX_ADC2_Init+0xb0>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003d4:	4b20      	ldr	r3, [pc, #128]	; (8000458 <MX_ADC2_Init+0xb0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <MX_ADC2_Init+0xb0>)
 80003dc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003e0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e2:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_ADC2_Init+0xb0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <MX_ADC2_Init+0xb0>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003ee:	481a      	ldr	r0, [pc, #104]	; (8000458 <MX_ADC2_Init+0xb0>)
 80003f0:	f000 fe54 	bl	800109c <HAL_ADC_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC2_Init+0x56>
  {
    Error_Handler();
 80003fa:	f000 fc02 	bl	8000c02 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80003fe:	2303      	movs	r3, #3
 8000400:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000402:	2301      	movs	r3, #1
 8000404:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000406:	2302      	movs	r3, #2
 8000408:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800040a:	2302      	movs	r3, #2
 800040c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800040e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000412:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000418:	2300      	movs	r3, #0
 800041a:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	4619      	mov	r1, r3
 8000424:	480c      	ldr	r0, [pc, #48]	; (8000458 <MX_ADC2_Init+0xb0>)
 8000426:	f001 f955 	bl	80016d4 <HAL_ADCEx_InjectedConfigChannel>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000430:	f000 fbe7 	bl	8000c02 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000434:	2304      	movs	r3, #4
 8000436:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000438:	2302      	movs	r3, #2
 800043a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	4619      	mov	r1, r3
 8000440:	4805      	ldr	r0, [pc, #20]	; (8000458 <MX_ADC2_Init+0xb0>)
 8000442:	f001 f947 	bl	80016d4 <HAL_ADCEx_InjectedConfigChannel>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 800044c:	f000 fbd9 	bl	8000c02 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000450:	bf00      	nop
 8000452:	3720      	adds	r7, #32
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20001ae0 	.word	0x20001ae0
 800045c:	40012800 	.word	0x40012800

08000460 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b096      	sub	sp, #88	; 0x58
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000466:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000474:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800047e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2220      	movs	r2, #32
 8000496:	2100      	movs	r1, #0
 8000498:	4618      	mov	r0, r3
 800049a:	f008 ffae 	bl	80093fa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800049e:	4b3d      	ldr	r3, [pc, #244]	; (8000594 <MX_TIM1_Init+0x134>)
 80004a0:	4a3d      	ldr	r2, [pc, #244]	; (8000598 <MX_TIM1_Init+0x138>)
 80004a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 80004a4:	4b3b      	ldr	r3, [pc, #236]	; (8000594 <MX_TIM1_Init+0x134>)
 80004a6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80004aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ac:	4b39      	ldr	r3, [pc, #228]	; (8000594 <MX_TIM1_Init+0x134>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80004b2:	4b38      	ldr	r3, [pc, #224]	; (8000594 <MX_TIM1_Init+0x134>)
 80004b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80004b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ba:	4b36      	ldr	r3, [pc, #216]	; (8000594 <MX_TIM1_Init+0x134>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004c0:	4b34      	ldr	r3, [pc, #208]	; (8000594 <MX_TIM1_Init+0x134>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c6:	4b33      	ldr	r3, [pc, #204]	; (8000594 <MX_TIM1_Init+0x134>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004cc:	4831      	ldr	r0, [pc, #196]	; (8000594 <MX_TIM1_Init+0x134>)
 80004ce:	f002 fb75 	bl	8002bbc <HAL_TIM_Base_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004d8:	f000 fb93 	bl	8000c02 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004e6:	4619      	mov	r1, r3
 80004e8:	482a      	ldr	r0, [pc, #168]	; (8000594 <MX_TIM1_Init+0x134>)
 80004ea:	f002 ffbf 	bl	800346c <HAL_TIM_ConfigClockSource>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80004f4:	f000 fb85 	bl	8000c02 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80004f8:	4826      	ldr	r0, [pc, #152]	; (8000594 <MX_TIM1_Init+0x134>)
 80004fa:	f002 fc01 	bl	8002d00 <HAL_TIM_OC_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000504:	f000 fb7d 	bl	8000c02 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000508:	2300      	movs	r3, #0
 800050a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000510:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000514:	4619      	mov	r1, r3
 8000516:	481f      	ldr	r0, [pc, #124]	; (8000594 <MX_TIM1_Init+0x134>)
 8000518:	f003 fb28 	bl	8003b6c <HAL_TIMEx_MasterConfigSynchronization>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000522:	f000 fb6e 	bl	8000c02 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000526:	2300      	movs	r3, #0
 8000528:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800052e:	2300      	movs	r3, #0
 8000530:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000532:	2300      	movs	r3, #0
 8000534:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000536:	2300      	movs	r3, #0
 8000538:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800053a:	2300      	movs	r3, #0
 800053c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800053e:	2300      	movs	r3, #0
 8000540:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000546:	2200      	movs	r2, #0
 8000548:	4619      	mov	r1, r3
 800054a:	4812      	ldr	r0, [pc, #72]	; (8000594 <MX_TIM1_Init+0x134>)
 800054c:	f002 fe78 	bl	8003240 <HAL_TIM_OC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000556:	f000 fb54 	bl	8000c02 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800056e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000572:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	4619      	mov	r1, r3
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_TIM1_Init+0x134>)
 800057e:	f003 fb53 	bl	8003c28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000588:	f000 fb3b 	bl	8000c02 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800058c:	bf00      	nop
 800058e:	3758      	adds	r7, #88	; 0x58
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20001b9c 	.word	0x20001b9c
 8000598:	40012c00 	.word	0x40012c00

0800059c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08e      	sub	sp, #56	; 0x38
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
 80005c8:	615a      	str	r2, [r3, #20]
 80005ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80005cc:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <MX_TIM4_Init+0x104>)
 80005ce:	4a35      	ldr	r2, [pc, #212]	; (80006a4 <MX_TIM4_Init+0x108>)
 80005d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80005d2:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <MX_TIM4_Init+0x104>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80005d8:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <MX_TIM4_Init+0x104>)
 80005da:	2240      	movs	r2, #64	; 0x40
 80005dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 599;
 80005de:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <MX_TIM4_Init+0x104>)
 80005e0:	f240 2257 	movw	r2, #599	; 0x257
 80005e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <MX_TIM4_Init+0x104>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ec:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <MX_TIM4_Init+0x104>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80005f2:	482b      	ldr	r0, [pc, #172]	; (80006a0 <MX_TIM4_Init+0x104>)
 80005f4:	f002 fae2 	bl	8002bbc <HAL_TIM_Base_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80005fe:	f000 fb00 	bl	8000c02 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000608:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060c:	4619      	mov	r1, r3
 800060e:	4824      	ldr	r0, [pc, #144]	; (80006a0 <MX_TIM4_Init+0x104>)
 8000610:	f002 ff2c 	bl	800346c <HAL_TIM_ConfigClockSource>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800061a:	f000 faf2 	bl	8000c02 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800061e:	4820      	ldr	r0, [pc, #128]	; (80006a0 <MX_TIM4_Init+0x104>)
 8000620:	f002 fcae 	bl	8002f80 <HAL_TIM_PWM_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800062a:	f000 faea 	bl	8000c02 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000632:	2300      	movs	r3, #0
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	4619      	mov	r1, r3
 800063c:	4818      	ldr	r0, [pc, #96]	; (80006a0 <MX_TIM4_Init+0x104>)
 800063e:	f003 fa95 	bl	8003b6c <HAL_TIMEx_MasterConfigSynchronization>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000648:	f000 fadb 	bl	8000c02 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800064c:	2360      	movs	r3, #96	; 0x60
 800064e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 600;
 8000650:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000654:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000656:	2302      	movs	r3, #2
 8000658:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2204      	movs	r2, #4
 8000662:	4619      	mov	r1, r3
 8000664:	480e      	ldr	r0, [pc, #56]	; (80006a0 <MX_TIM4_Init+0x104>)
 8000666:	f002 fe43 	bl	80032f0 <HAL_TIM_PWM_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000670:	f000 fac7 	bl	8000c02 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000674:	2370      	movs	r3, #112	; 0x70
 8000676:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2208      	movs	r2, #8
 8000680:	4619      	mov	r1, r3
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <MX_TIM4_Init+0x104>)
 8000684:	f002 fe34 	bl	80032f0 <HAL_TIM_PWM_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 800068e:	f000 fab8 	bl	8000c02 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000692:	4803      	ldr	r0, [pc, #12]	; (80006a0 <MX_TIM4_Init+0x104>)
 8000694:	f000 fba2 	bl	8000ddc <HAL_TIM_MspPostInit>

}
 8000698:	bf00      	nop
 800069a:	3738      	adds	r7, #56	; 0x38
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20001a98 	.word	0x20001a98
 80006a4:	40000800 	.word	0x40000800

080006a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_USART1_UART_Init+0x50>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006e0:	f003 fb05 	bl	8003cee <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ea:	f000 fa8a 	bl	8000c02 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20001b54 	.word	0x20001b54
 80006f8:	40013800 	.word	0x40013800

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000710:	4a46      	ldr	r2, [pc, #280]	; (800082c <MX_GPIO_Init+0x130>)
 8000712:	4b46      	ldr	r3, [pc, #280]	; (800082c <MX_GPIO_Init+0x130>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b43      	ldr	r3, [pc, #268]	; (800082c <MX_GPIO_Init+0x130>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0310 	and.w	r3, r3, #16
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000728:	4a40      	ldr	r2, [pc, #256]	; (800082c <MX_GPIO_Init+0x130>)
 800072a:	4b40      	ldr	r3, [pc, #256]	; (800082c <MX_GPIO_Init+0x130>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f043 0320 	orr.w	r3, r3, #32
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b3d      	ldr	r3, [pc, #244]	; (800082c <MX_GPIO_Init+0x130>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0320 	and.w	r3, r3, #32
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4a3a      	ldr	r2, [pc, #232]	; (800082c <MX_GPIO_Init+0x130>)
 8000742:	4b3a      	ldr	r3, [pc, #232]	; (800082c <MX_GPIO_Init+0x130>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b37      	ldr	r3, [pc, #220]	; (800082c <MX_GPIO_Init+0x130>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000758:	4a34      	ldr	r2, [pc, #208]	; (800082c <MX_GPIO_Init+0x130>)
 800075a:	4b34      	ldr	r3, [pc, #208]	; (800082c <MX_GPIO_Init+0x130>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b31      	ldr	r3, [pc, #196]	; (800082c <MX_GPIO_Init+0x130>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0308 	and.w	r3, r3, #8
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000776:	482e      	ldr	r0, [pc, #184]	; (8000830 <MX_GPIO_Init+0x134>)
 8000778:	f001 fc30 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO7_GPIO_Port, DO7_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000782:	482c      	ldr	r0, [pc, #176]	; (8000834 <MX_GPIO_Init+0x138>)
 8000784:	f001 fc2a 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO1_Pin|DO2_Pin|DO3_Pin|DO6_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800078e:	482a      	ldr	r0, [pc, #168]	; (8000838 <MX_GPIO_Init+0x13c>)
 8000790:	f001 fc24 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	4820      	ldr	r0, [pc, #128]	; (8000830 <MX_GPIO_Init+0x134>)
 80007ae:	f001 fabb 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI5_Pin DI6_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 80007b2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80007b6:	613b      	str	r3, [r7, #16]
                          |DI5_Pin|DI6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	481c      	ldr	r0, [pc, #112]	; (8000838 <MX_GPIO_Init+0x13c>)
 80007c8:	f001 faae 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DI7_Pin */
  GPIO_InitStruct.Pin = DI7_Pin;
 80007cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DI7_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	4619      	mov	r1, r3
 80007e0:	4814      	ldr	r0, [pc, #80]	; (8000834 <MX_GPIO_Init+0x138>)
 80007e2:	f001 faa1 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DO7_Pin */
  GPIO_InitStruct.Pin = DO7_Pin;
 80007e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DO7_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_GPIO_Init+0x138>)
 8000800:	f001 fa92 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO1_Pin DO2_Pin DO3_Pin DO6_Pin */
  GPIO_InitStruct.Pin = DO1_Pin|DO2_Pin|DO3_Pin|DO6_Pin;
 8000804:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2302      	movs	r3, #2
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	4619      	mov	r1, r3
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <MX_GPIO_Init+0x13c>)
 800081e:	f001 fa83 	bl	8001d28 <HAL_GPIO_Init>

}
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	40011000 	.word	0x40011000
 8000834:	40010800 	.word	0x40010800
 8000838:	40010c00 	.word	0x40010c00

0800083c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //ÂÒÎË ÔÓÒÚÛÔËÎ Á‡ÔÓÒ Ò modbus
	  	  if ( ModbusDATA[0] != 0 ) {
 8000844:	4b42      	ldr	r3, [pc, #264]	; (8000950 <StartDefaultTask+0x114>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d07d      	beq.n	8000948 <StartDefaultTask+0x10c>
	  		  // ÔÓ‚ÂÍ‡ ‚‚Â‰ÂÌÌÓÈ ÍÓÏ‡Ì‰˚ Ë ÛÒÚ‡ÌÓ‚Í‡ ÔËÌÓ‚
	  	  switch (ModbusDATA[0])
 800084c:	4b40      	ldr	r3, [pc, #256]	; (8000950 <StartDefaultTask+0x114>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	2b05      	cmp	r3, #5
 8000852:	d070      	beq.n	8000936 <StartDefaultTask+0xfa>
 8000854:	2b05      	cmp	r3, #5
 8000856:	dc0a      	bgt.n	800086e <StartDefaultTask+0x32>
 8000858:	2b02      	cmp	r3, #2
 800085a:	d019      	beq.n	8000890 <StartDefaultTask+0x54>
 800085c:	2b02      	cmp	r3, #2
 800085e:	dc02      	bgt.n	8000866 <StartDefaultTask+0x2a>
 8000860:	2b01      	cmp	r3, #1
 8000862:	d00f      	beq.n	8000884 <StartDefaultTask+0x48>
 8000864:	e068      	b.n	8000938 <StartDefaultTask+0xfc>
 8000866:	2b03      	cmp	r3, #3
 8000868:	d018      	beq.n	800089c <StartDefaultTask+0x60>
 800086a:	2b04      	cmp	r3, #4
	  		  case 2: HAL_GPIO_WritePin(DO2_GPIO_Port, DO2_Pin, GPIO_PIN_SET);
	  				  break;
	  		  case 3: HAL_GPIO_WritePin(DO3_GPIO_Port, DO3_Pin, GPIO_PIN_SET);
	  				  break;
	  		  case 4: //HAL_GPIO_WritePin(DO6_GPIO_Port, DO4_Pin, GPIO_PIN_SET);
	  				  break;
 800086c:	e064      	b.n	8000938 <StartDefaultTask+0xfc>
	  	  switch (ModbusDATA[0])
 800086e:	2b07      	cmp	r3, #7
 8000870:	d021      	beq.n	80008b6 <StartDefaultTask+0x7a>
 8000872:	2b07      	cmp	r3, #7
 8000874:	db18      	blt.n	80008a8 <StartDefaultTask+0x6c>
 8000876:	2b6f      	cmp	r3, #111	; 0x6f
 8000878:	d024      	beq.n	80008c4 <StartDefaultTask+0x88>
 800087a:	f642 3267 	movw	r2, #11111	; 0x2b67
 800087e:	4293      	cmp	r3, r2
 8000880:	d03c      	beq.n	80008fc <StartDefaultTask+0xc0>
 8000882:	e059      	b.n	8000938 <StartDefaultTask+0xfc>
	  		  case 1: HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2108      	movs	r1, #8
 8000888:	4832      	ldr	r0, [pc, #200]	; (8000954 <StartDefaultTask+0x118>)
 800088a:	f001 fba7 	bl	8001fdc <HAL_GPIO_WritePin>
	  				  break;
 800088e:	e053      	b.n	8000938 <StartDefaultTask+0xfc>
	  		  case 2: HAL_GPIO_WritePin(DO2_GPIO_Port, DO2_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2110      	movs	r1, #16
 8000894:	482f      	ldr	r0, [pc, #188]	; (8000954 <StartDefaultTask+0x118>)
 8000896:	f001 fba1 	bl	8001fdc <HAL_GPIO_WritePin>
	  				  break;
 800089a:	e04d      	b.n	8000938 <StartDefaultTask+0xfc>
	  		  case 3: HAL_GPIO_WritePin(DO3_GPIO_Port, DO3_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2140      	movs	r1, #64	; 0x40
 80008a0:	482c      	ldr	r0, [pc, #176]	; (8000954 <StartDefaultTask+0x118>)
 80008a2:	f001 fb9b 	bl	8001fdc <HAL_GPIO_WritePin>
	  				  break;
 80008a6:	e047      	b.n	8000938 <StartDefaultTask+0xfc>
	  		  case 5: //HAL_GPIO_WritePin(DO6_GPIO_Port, DO5_Pin, GPIO_PIN_SET);
	  				  break;
	  		  case 6: HAL_GPIO_WritePin(DO6_GPIO_Port, DO6_Pin, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ae:	4829      	ldr	r0, [pc, #164]	; (8000954 <StartDefaultTask+0x118>)
 80008b0:	f001 fb94 	bl	8001fdc <HAL_GPIO_WritePin>
	  				  break;
 80008b4:	e040      	b.n	8000938 <StartDefaultTask+0xfc>
	  		  case 7: HAL_GPIO_WritePin(DO7_GPIO_Port, DO7_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008bc:	4826      	ldr	r0, [pc, #152]	; (8000958 <StartDefaultTask+0x11c>)
 80008be:	f001 fb8d 	bl	8001fdc <HAL_GPIO_WritePin>
	  				  break;
 80008c2:	e039      	b.n	8000938 <StartDefaultTask+0xfc>
	  		  case 111:
	  				  HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2108      	movs	r1, #8
 80008c8:	4822      	ldr	r0, [pc, #136]	; (8000954 <StartDefaultTask+0x118>)
 80008ca:	f001 fb87 	bl	8001fdc <HAL_GPIO_WritePin>
	  				  HAL_GPIO_WritePin(DO2_GPIO_Port, DO2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2110      	movs	r1, #16
 80008d2:	4820      	ldr	r0, [pc, #128]	; (8000954 <StartDefaultTask+0x118>)
 80008d4:	f001 fb82 	bl	8001fdc <HAL_GPIO_WritePin>
	  				  HAL_GPIO_WritePin(DO3_GPIO_Port, DO3_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	481d      	ldr	r0, [pc, #116]	; (8000954 <StartDefaultTask+0x118>)
 80008de:	f001 fb7d 	bl	8001fdc <HAL_GPIO_WritePin>
	  				 // HAL_GPIO_WritePin(DO4_GPIO_Port, DO4_Pin, GPIO_PIN_RESET);
	  				 // HAL_GPIO_WritePin(DO5_GPIO_Port, DO5_Pin, GPIO_PIN_RESET);
	  				  HAL_GPIO_WritePin(DO6_GPIO_Port, DO6_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e8:	481a      	ldr	r0, [pc, #104]	; (8000954 <StartDefaultTask+0x118>)
 80008ea:	f001 fb77 	bl	8001fdc <HAL_GPIO_WritePin>
	  				  HAL_GPIO_WritePin(DO7_GPIO_Port, DO7_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f4:	4818      	ldr	r0, [pc, #96]	; (8000958 <StartDefaultTask+0x11c>)
 80008f6:	f001 fb71 	bl	8001fdc <HAL_GPIO_WritePin>
	  				  break;
 80008fa:	e01d      	b.n	8000938 <StartDefaultTask+0xfc>
	  		case 11111:
	  					//ÛÒÚ‡ÌÓ‚Í‡ DO2
					  HAL_GPIO_WritePin(DO2_GPIO_Port, DO2_Pin, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2110      	movs	r1, #16
 8000900:	4814      	ldr	r0, [pc, #80]	; (8000954 <StartDefaultTask+0x118>)
 8000902:	f001 fb6b 	bl	8001fdc <HAL_GPIO_WritePin>
					  osDelay(8000);
 8000906:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800090a:	f005 fb4d 	bl	8005fa8 <osDelay>
					  HAL_GPIO_WritePin(DO3_GPIO_Port, DO3_Pin, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	2140      	movs	r1, #64	; 0x40
 8000912:	4810      	ldr	r0, [pc, #64]	; (8000954 <StartDefaultTask+0x118>)
 8000914:	f001 fb62 	bl	8001fdc <HAL_GPIO_WritePin>
					  osDelay(150);
 8000918:	2096      	movs	r0, #150	; 0x96
 800091a:	f005 fb45 	bl	8005fa8 <osDelay>
					  HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	2108      	movs	r1, #8
 8000922:	480c      	ldr	r0, [pc, #48]	; (8000954 <StartDefaultTask+0x118>)
 8000924:	f001 fb5a 	bl	8001fdc <HAL_GPIO_WritePin>
					  adc_enable=true;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <StartDefaultTask+0x120>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]

					  ModbusDATA[8]=10; //shim
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <StartDefaultTask+0x114>)
 8000930:	220a      	movs	r2, #10
 8000932:	821a      	strh	r2, [r3, #16]
	  				  break;
 8000934:	e000      	b.n	8000938 <StartDefaultTask+0xfc>
	  				  break;
 8000936:	bf00      	nop
	  		  }
	  		  ModbusDATA[0]=0;
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <StartDefaultTask+0x114>)
 800093a:	2200      	movs	r2, #0
 800093c:	801a      	strh	r2, [r3, #0]
	  		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800093e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000942:	4807      	ldr	r0, [pc, #28]	; (8000960 <StartDefaultTask+0x124>)
 8000944:	f001 fb62 	bl	800200c <HAL_GPIO_TogglePin>

	  //‡ˆÔ
	    HAL_ADCEx_Calibration_Start(&hadc1);
	    HAL_ADCEx_Calibration_Start(&hadc2);
	    */
    osDelay(1);
 8000948:	2001      	movs	r0, #1
 800094a:	f005 fb2d 	bl	8005fa8 <osDelay>
	  	  if ( ModbusDATA[0] != 0 ) {
 800094e:	e779      	b.n	8000844 <StartDefaultTask+0x8>
 8000950:	20001b10 	.word	0x20001b10
 8000954:	40010c00 	.word	0x40010c00
 8000958:	40010800 	.word	0x40010800
 800095c:	20000030 	.word	0x20000030
 8000960:	40011000 	.word	0x40011000

08000964 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  {



	//ÛÒÚ‡ÌÓ‚Í‡ Â„ËÒÚÓ‚ ‚ ÒÓÓÚ‚ÂÚÒÚ‚ËË Ò ÒÓÒÚÓˇÌËÂÏ ÔËÌÓ‚
		ModbusDATA[1]=	((DO1_GPIO_Port->IDR & DO1_Pin)!=0)|    //HAL_GPIO_ReadPin(DO1_GPIO_Port, DO1_Pin);
 800096c:	4b94      	ldr	r3, [pc, #592]	; (8000bc0 <StartTask02+0x25c>)
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf14      	ite	ne
 8000978:	2301      	movne	r3, #1
 800097a:	2300      	moveq	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	b21a      	sxth	r2, r3
						((DO2_GPIO_Port->IDR & DO2_Pin)!=0)<<1| //HAL_GPIO_ReadPin(DO2_GPIO_Port, DO2_Pin);
 8000980:	4b8f      	ldr	r3, [pc, #572]	; (8000bc0 <StartTask02+0x25c>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	f003 0310 	and.w	r3, r3, #16
		ModbusDATA[1]=	((DO1_GPIO_Port->IDR & DO1_Pin)!=0)|    //HAL_GPIO_ReadPin(DO1_GPIO_Port, DO1_Pin);
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <StartTask02+0x2c>
 800098c:	2302      	movs	r3, #2
 800098e:	e000      	b.n	8000992 <StartTask02+0x2e>
 8000990:	2300      	movs	r3, #0
 8000992:	4313      	orrs	r3, r2
 8000994:	b21a      	sxth	r2, r3
						((DO3_GPIO_Port->IDR & DO3_Pin)!=0)<<2| //HAL_GPIO_ReadPin(DO3_GPIO_Port, DO3_Pin);
 8000996:	4b8a      	ldr	r3, [pc, #552]	; (8000bc0 <StartTask02+0x25c>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
						((DO2_GPIO_Port->IDR & DO2_Pin)!=0)<<1| //HAL_GPIO_ReadPin(DO2_GPIO_Port, DO2_Pin);
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <StartTask02+0x42>
 80009a2:	2304      	movs	r3, #4
 80009a4:	e000      	b.n	80009a8 <StartTask02+0x44>
 80009a6:	2300      	movs	r3, #0
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b21a      	sxth	r2, r3
						//((DO4_GPIO_Port->IDR & DO4_Pin)!=0)<<3| //HAL_GPIO_ReadPin(DO4_GPIO_Port, DO4_Pin);
						//((DO5_GPIO_Port->IDR & DO5_Pin)!=0)<<4| //HAL_GPIO_ReadPin(DO5_GPIO_Port, DO5_Pin);
						((DO6_GPIO_Port->IDR & DO6_Pin)!=0)<<5| //HAL_GPIO_ReadPin(DO6_GPIO_Port, DO6_Pin);
 80009ac:	4b84      	ldr	r3, [pc, #528]	; (8000bc0 <StartTask02+0x25c>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
						((DO3_GPIO_Port->IDR & DO3_Pin)!=0)<<2| //HAL_GPIO_ReadPin(DO3_GPIO_Port, DO3_Pin);
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <StartTask02+0x58>
 80009b8:	2320      	movs	r3, #32
 80009ba:	e000      	b.n	80009be <StartTask02+0x5a>
 80009bc:	2300      	movs	r3, #0
 80009be:	4313      	orrs	r3, r2
 80009c0:	b21a      	sxth	r2, r3
						((DO7_GPIO_Port->IDR & DO7_Pin)!=0)<<6; //HAL_GPIO_ReadPin(DO7_GPIO_Port, DO7_Pin);
 80009c2:	4b80      	ldr	r3, [pc, #512]	; (8000bc4 <StartTask02+0x260>)
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
						((DO6_GPIO_Port->IDR & DO6_Pin)!=0)<<5| //HAL_GPIO_ReadPin(DO6_GPIO_Port, DO6_Pin);
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <StartTask02+0x6e>
 80009ce:	2340      	movs	r3, #64	; 0x40
 80009d0:	e000      	b.n	80009d4 <StartTask02+0x70>
 80009d2:	2300      	movs	r3, #0
 80009d4:	4313      	orrs	r3, r2
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	b29a      	uxth	r2, r3
		ModbusDATA[1]=	((DO1_GPIO_Port->IDR & DO1_Pin)!=0)|    //HAL_GPIO_ReadPin(DO1_GPIO_Port, DO1_Pin);
 80009da:	4b7b      	ldr	r3, [pc, #492]	; (8000bc8 <StartTask02+0x264>)
 80009dc:	805a      	strh	r2, [r3, #2]

		ModbusDATA[2]=	((DI1_GPIO_Port->IDR & DI1_Pin)!=0)| 	//HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 80009de:	4b78      	ldr	r3, [pc, #480]	; (8000bc0 <StartTask02+0x25c>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	bf14      	ite	ne
 80009ea:	2301      	movne	r3, #1
 80009ec:	2300      	moveq	r3, #0
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	b21a      	sxth	r2, r3
						((DI2_GPIO_Port->IDR & DI2_Pin)!=0)<<1| //HAL_GPIO_ReadPin(DI2_GPIO_Port, DI2_Pin);
 80009f2:	4b73      	ldr	r3, [pc, #460]	; (8000bc0 <StartTask02+0x25c>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
		ModbusDATA[2]=	((DI1_GPIO_Port->IDR & DI1_Pin)!=0)| 	//HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <StartTask02+0x9e>
 80009fe:	2302      	movs	r3, #2
 8000a00:	e000      	b.n	8000a04 <StartTask02+0xa0>
 8000a02:	2300      	movs	r3, #0
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b21a      	sxth	r2, r3
						((DI3_GPIO_Port->IDR & DI3_Pin)!=0)<<2| //HAL_GPIO_ReadPin(DI3_GPIO_Port, DI3_Pin);
 8000a08:	4b6d      	ldr	r3, [pc, #436]	; (8000bc0 <StartTask02+0x25c>)
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
						((DI2_GPIO_Port->IDR & DI2_Pin)!=0)<<1| //HAL_GPIO_ReadPin(DI2_GPIO_Port, DI2_Pin);
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <StartTask02+0xb4>
 8000a14:	2304      	movs	r3, #4
 8000a16:	e000      	b.n	8000a1a <StartTask02+0xb6>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	b21a      	sxth	r2, r3
						((DI4_GPIO_Port->IDR & DI4_Pin)!=0)<<3| //HAL_GPIO_ReadPin(DI4_GPIO_Port, DI4_Pin);
 8000a1e:	4b68      	ldr	r3, [pc, #416]	; (8000bc0 <StartTask02+0x25c>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
						((DI3_GPIO_Port->IDR & DI3_Pin)!=0)<<2| //HAL_GPIO_ReadPin(DI3_GPIO_Port, DI3_Pin);
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <StartTask02+0xca>
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	e000      	b.n	8000a30 <StartTask02+0xcc>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b21a      	sxth	r2, r3
						((DI5_GPIO_Port->IDR & DI5_Pin)!=0)<<4| //HAL_GPIO_ReadPin(DI5_GPIO_Port, DI5_Pin);
 8000a34:	4b62      	ldr	r3, [pc, #392]	; (8000bc0 <StartTask02+0x25c>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
						((DI4_GPIO_Port->IDR & DI4_Pin)!=0)<<3| //HAL_GPIO_ReadPin(DI4_GPIO_Port, DI4_Pin);
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <StartTask02+0xe0>
 8000a40:	2310      	movs	r3, #16
 8000a42:	e000      	b.n	8000a46 <StartTask02+0xe2>
 8000a44:	2300      	movs	r3, #0
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21a      	sxth	r2, r3
						((DI6_GPIO_Port->IDR & DI6_Pin)!=0)<<5| //HAL_GPIO_ReadPin(DI6_GPIO_Port, DI6_Pin);
 8000a4a:	4b5d      	ldr	r3, [pc, #372]	; (8000bc0 <StartTask02+0x25c>)
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
						((DI5_GPIO_Port->IDR & DI5_Pin)!=0)<<4| //HAL_GPIO_ReadPin(DI5_GPIO_Port, DI5_Pin);
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <StartTask02+0xf6>
 8000a56:	2320      	movs	r3, #32
 8000a58:	e000      	b.n	8000a5c <StartTask02+0xf8>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b21a      	sxth	r2, r3
						((DI7_GPIO_Port->IDR & DI7_Pin)!=0)<<6; //HAL_GPIO_ReadPin(DI7_GPIO_Port, DI7_Pin);
 8000a60:	4b58      	ldr	r3, [pc, #352]	; (8000bc4 <StartTask02+0x260>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
						((DI6_GPIO_Port->IDR & DI6_Pin)!=0)<<5| //HAL_GPIO_ReadPin(DI6_GPIO_Port, DI6_Pin);
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <StartTask02+0x10c>
 8000a6c:	2340      	movs	r3, #64	; 0x40
 8000a6e:	e000      	b.n	8000a72 <StartTask02+0x10e>
 8000a70:	2300      	movs	r3, #0
 8000a72:	4313      	orrs	r3, r2
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	b29a      	uxth	r2, r3
		ModbusDATA[2]=	((DI1_GPIO_Port->IDR & DI1_Pin)!=0)| 	//HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 8000a78:	4b53      	ldr	r3, [pc, #332]	; (8000bc8 <StartTask02+0x264>)
 8000a7a:	809a      	strh	r2, [r3, #4]
		//ÛÔ‡‚ÎÂÌËÂ ÒÍ‚‡ÊÌÓÒÚ¸˛ ÿ»Ã
			  if ((DI7_GPIO_Port->IDR & DI7_Pin)!=0) {
 8000a7c:	4b51      	ldr	r3, [pc, #324]	; (8000bc4 <StartTask02+0x260>)
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d056      	beq.n	8000b36 <StartTask02+0x1d2>

				  if ( ModbusDATA[8] != shim ) {
 8000a88:	4b4f      	ldr	r3, [pc, #316]	; (8000bc8 <StartTask02+0x264>)
 8000a8a:	8a1a      	ldrh	r2, [r3, #16]
 8000a8c:	4b4f      	ldr	r3, [pc, #316]	; (8000bcc <StartTask02+0x268>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d05a      	beq.n	8000b4a <StartTask02+0x1e6>
					  if ( ModbusDATA[8]>45 ){
 8000a94:	4b4c      	ldr	r3, [pc, #304]	; (8000bc8 <StartTask02+0x264>)
 8000a96:	8a1b      	ldrh	r3, [r3, #16]
 8000a98:	2b2d      	cmp	r3, #45	; 0x2d
 8000a9a:	d927      	bls.n	8000aec <StartTask02+0x188>
						  TIM4->CCR2=(counter_pwm)-(counter_pwm/100)*45;
 8000a9c:	4a4c      	ldr	r2, [pc, #304]	; (8000bd0 <StartTask02+0x26c>)
 8000a9e:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <StartTask02+0x270>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	4b4b      	ldr	r3, [pc, #300]	; (8000bd4 <StartTask02+0x270>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	494b      	ldr	r1, [pc, #300]	; (8000bd8 <StartTask02+0x274>)
 8000aaa:	fba1 1303 	umull	r1, r3, r1, r3
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 8000ab8:	fb03 f301 	mul.w	r3, r3, r1
 8000abc:	4403      	add	r3, r0
 8000abe:	6393      	str	r3, [r2, #56]	; 0x38
						  TIM4->CCR3=(counter_pwm/100)*45;
 8000ac0:	4943      	ldr	r1, [pc, #268]	; (8000bd0 <StartTask02+0x26c>)
 8000ac2:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <StartTask02+0x270>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	4a44      	ldr	r2, [pc, #272]	; (8000bd8 <StartTask02+0x274>)
 8000ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8000acc:	095b      	lsrs	r3, r3, #5
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	4413      	add	r3, r2
 8000ad8:	011a      	lsls	r2, r3, #4
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	63cb      	str	r3, [r1, #60]	; 0x3c
						  shim=45;
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <StartTask02+0x268>)
 8000ae0:	222d      	movs	r2, #45	; 0x2d
 8000ae2:	801a      	strh	r2, [r3, #0]
						  ModbusDATA[8]=45;
 8000ae4:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <StartTask02+0x264>)
 8000ae6:	222d      	movs	r2, #45	; 0x2d
 8000ae8:	821a      	strh	r2, [r3, #16]
 8000aea:	e02e      	b.n	8000b4a <StartTask02+0x1e6>
					  }
					  else{
						  TIM4->CCR2=(counter_pwm)-(counter_pwm/100)*ModbusDATA[8];
 8000aec:	4a38      	ldr	r2, [pc, #224]	; (8000bd0 <StartTask02+0x26c>)
 8000aee:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <StartTask02+0x270>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <StartTask02+0x270>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	4937      	ldr	r1, [pc, #220]	; (8000bd8 <StartTask02+0x274>)
 8000afa:	fba1 1303 	umull	r1, r3, r1, r3
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	4619      	mov	r1, r3
 8000b04:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <StartTask02+0x264>)
 8000b06:	8a1b      	ldrh	r3, [r3, #16]
 8000b08:	fb03 f301 	mul.w	r3, r3, r1
 8000b0c:	1ac3      	subs	r3, r0, r3
 8000b0e:	6393      	str	r3, [r2, #56]	; 0x38
						  TIM4->CCR3=(counter_pwm/100)*ModbusDATA[8];
 8000b10:	4a2f      	ldr	r2, [pc, #188]	; (8000bd0 <StartTask02+0x26c>)
 8000b12:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <StartTask02+0x270>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	4930      	ldr	r1, [pc, #192]	; (8000bd8 <StartTask02+0x274>)
 8000b18:	fba1 1303 	umull	r1, r3, r1, r3
 8000b1c:	095b      	lsrs	r3, r3, #5
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	4619      	mov	r1, r3
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <StartTask02+0x264>)
 8000b24:	8a1b      	ldrh	r3, [r3, #16]
 8000b26:	fb03 f301 	mul.w	r3, r3, r1
 8000b2a:	63d3      	str	r3, [r2, #60]	; 0x3c
						  shim=ModbusDATA[8];
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <StartTask02+0x264>)
 8000b2e:	8a1a      	ldrh	r2, [r3, #16]
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <StartTask02+0x268>)
 8000b32:	801a      	strh	r2, [r3, #0]
 8000b34:	e009      	b.n	8000b4a <StartTask02+0x1e6>
					  }
				  }
			 }
			 	  else{
			 		 TIM4->CCR2=counter_pwm;
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <StartTask02+0x26c>)
 8000b38:	4a26      	ldr	r2, [pc, #152]	; (8000bd4 <StartTask02+0x270>)
 8000b3a:	8812      	ldrh	r2, [r2, #0]
 8000b3c:	639a      	str	r2, [r3, #56]	; 0x38
			 		 TIM4->CCR3=0;
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <StartTask02+0x26c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	63da      	str	r2, [r3, #60]	; 0x3c
			 		ModbusDATA[8]=0;
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <StartTask02+0x264>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	821a      	strh	r2, [r3, #16]
				  }
			  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_3);
		*/
		//‡ˆÔ
	//if (adc_enable) {
		HAL_ADCEx_InjectedStart(&hadc1); // Á‡ÔÛÒÍ‡ÂÏ ÓÔÓÒ ËÌÊÂÍÚ. Í‡Ì‡ÎÓ‚
 8000b4a:	4824      	ldr	r0, [pc, #144]	; (8000bdc <StartTask02+0x278>)
 8000b4c:	f000 fc1a 	bl	8001384 <HAL_ADCEx_InjectedStart>
		HAL_ADCEx_InjectedPollForConversion(&hadc1,100); // Ê‰∏Ï ÓÍÓÌ˜‡ÌËˇ 100ÏÒ
 8000b50:	2164      	movs	r1, #100	; 0x64
 8000b52:	4822      	ldr	r0, [pc, #136]	; (8000bdc <StartTask02+0x278>)
 8000b54:	f000 fc9c 	bl	8001490 <HAL_ADCEx_InjectedPollForConversion>
		ModbusDATA[3]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4820      	ldr	r0, [pc, #128]	; (8000bdc <StartTask02+0x278>)
 8000b5c:	f000 fd90 	bl	8001680 <HAL_ADCEx_InjectedGetValue>
 8000b60:	4603      	mov	r3, r0
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <StartTask02+0x264>)
 8000b66:	80da      	strh	r2, [r3, #6]
		ModbusDATA[4]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8000b68:	2102      	movs	r1, #2
 8000b6a:	481c      	ldr	r0, [pc, #112]	; (8000bdc <StartTask02+0x278>)
 8000b6c:	f000 fd88 	bl	8001680 <HAL_ADCEx_InjectedGetValue>
 8000b70:	4603      	mov	r3, r0
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <StartTask02+0x264>)
 8000b76:	811a      	strh	r2, [r3, #8]
		ModbusDATA[5]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8000b78:	2103      	movs	r1, #3
 8000b7a:	4818      	ldr	r0, [pc, #96]	; (8000bdc <StartTask02+0x278>)
 8000b7c:	f000 fd80 	bl	8001680 <HAL_ADCEx_InjectedGetValue>
 8000b80:	4603      	mov	r3, r0
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <StartTask02+0x264>)
 8000b86:	815a      	strh	r2, [r3, #10]
		HAL_ADCEx_InjectedStart(&hadc2);
 8000b88:	4815      	ldr	r0, [pc, #84]	; (8000be0 <StartTask02+0x27c>)
 8000b8a:	f000 fbfb 	bl	8001384 <HAL_ADCEx_InjectedStart>
		HAL_ADCEx_InjectedPollForConversion(&hadc2,100);
 8000b8e:	2164      	movs	r1, #100	; 0x64
 8000b90:	4813      	ldr	r0, [pc, #76]	; (8000be0 <StartTask02+0x27c>)
 8000b92:	f000 fc7d 	bl	8001490 <HAL_ADCEx_InjectedPollForConversion>
		ModbusDATA[6]=HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8000b96:	2101      	movs	r1, #1
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <StartTask02+0x27c>)
 8000b9a:	f000 fd71 	bl	8001680 <HAL_ADCEx_InjectedGetValue>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <StartTask02+0x264>)
 8000ba4:	819a      	strh	r2, [r3, #12]
		ModbusDATA[7]=HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <StartTask02+0x27c>)
 8000baa:	f000 fd69 	bl	8001680 <HAL_ADCEx_InjectedGetValue>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <StartTask02+0x264>)
 8000bb4:	81da      	strh	r2, [r3, #14]
	//}
	osDelay(1);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f005 f9f6 	bl	8005fa8 <osDelay>
		ModbusDATA[1]=	((DO1_GPIO_Port->IDR & DO1_Pin)!=0)|    //HAL_GPIO_ReadPin(DO1_GPIO_Port, DO1_Pin);
 8000bbc:	e6d6      	b.n	800096c <StartTask02+0x8>
 8000bbe:	bf00      	nop
 8000bc0:	40010c00 	.word	0x40010c00
 8000bc4:	40010800 	.word	0x40010800
 8000bc8:	20001b10 	.word	0x20001b10
 8000bcc:	20001a94 	.word	0x20001a94
 8000bd0:	40000800 	.word	0x40000800
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	51eb851f 	.word	0x51eb851f
 8000bdc:	20001b24 	.word	0x20001b24
 8000be0:	20001ae0 	.word	0x20001ae0

08000be4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf4:	d101      	bne.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bf6:	f000 fa35 	bl	8001064 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c06:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x6>
	...

08000c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <HAL_MspInit+0x68>)
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_MspInit+0x68>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6193      	str	r3, [r2, #24]
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_MspInit+0x68>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <HAL_MspInit+0x68>)
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_MspInit+0x68>)
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	61d3      	str	r3, [r2, #28]
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_MspInit+0x68>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	210f      	movs	r1, #15
 8000c46:	f06f 0001 	mvn.w	r0, #1
 8000c4a:	f000 ff8c 	bl	8001b66 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_MspInit+0x6c>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_MspInit+0x6c>)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000

08000c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0318 	add.w	r3, r7, #24
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a28      	ldr	r2, [pc, #160]	; (8000d38 <HAL_ADC_MspInit+0xbc>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d122      	bne.n	8000ce2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c9c:	4a27      	ldr	r2, [pc, #156]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cb6:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = AI1_Pin|GPIO_PIN_1|GPIO_PIN_2;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4819      	ldr	r0, [pc, #100]	; (8000d40 <HAL_ADC_MspInit+0xc4>)
 8000cdc:	f001 f824 	bl	8001d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ce0:	e026      	b.n	8000d30 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d121      	bne.n	8000d30 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000cec:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|AI5_Pin;
 8000d1c:	2318      	movs	r3, #24
 8000d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d20:	2303      	movs	r3, #3
 8000d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0318 	add.w	r3, r7, #24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_ADC_MspInit+0xc4>)
 8000d2c:	f000 fffc 	bl	8001d28 <HAL_GPIO_Init>
}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40012400 	.word	0x40012400
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010800 	.word	0x40010800
 8000d44:	40012800 	.word	0x40012800

08000d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_TIM_Base_MspInit+0x88>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d11c      	bne.n	8000d94 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d64:	6193      	str	r3, [r2, #24]
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2105      	movs	r1, #5
 8000d76:	2019      	movs	r0, #25
 8000d78:	f000 fef5 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d7c:	2019      	movs	r0, #25
 8000d7e:	f000 ff0e 	bl	8001b9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2105      	movs	r1, #5
 8000d86:	201b      	movs	r0, #27
 8000d88:	f000 feed 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d8c:	201b      	movs	r0, #27
 8000d8e:	f000 ff06 	bl	8001b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d92:	e018      	b.n	8000dc6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <HAL_TIM_Base_MspInit+0x90>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d113      	bne.n	8000dc6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d9e:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2105      	movs	r1, #5
 8000dba:	201e      	movs	r0, #30
 8000dbc:	f000 fed3 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000dc0:	201e      	movs	r0, #30
 8000dc2:	f000 feec 	bl	8001b9e <HAL_NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40012c00 	.word	0x40012c00
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40000800 	.word	0x40000800

08000ddc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_TIM_MspPostInit+0x5c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d118      	bne.n	8000e2e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <HAL_TIM_MspPostInit+0x60>)
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_TIM_MspPostInit+0x60>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_TIM_MspPostInit+0x60>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PWM_DO4_Pin|PWM_DO5_Pin;
 8000e14:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_TIM_MspPostInit+0x64>)
 8000e2a:	f000 ff7d 	bl	8001d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40000800 	.word	0x40000800
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010c00 	.word	0x40010c00

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <HAL_UART_MspInit+0x9c>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d139      	bne.n	8000ed8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e64:	4a1f      	ldr	r2, [pc, #124]	; (8000ee4 <HAL_UART_MspInit+0xa0>)
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <HAL_UART_MspInit+0xa0>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_UART_MspInit+0xa0>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <HAL_UART_MspInit+0xa0>)
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_UART_MspInit+0xa0>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_UART_MspInit+0xa0>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <HAL_UART_MspInit+0xa4>)
 8000eaa:	f000 ff3d 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <HAL_UART_MspInit+0xa4>)
 8000ec4:	f000 ff30 	bl	8001d28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2105      	movs	r1, #5
 8000ecc:	2025      	movs	r0, #37	; 0x25
 8000ece:	f000 fe4a 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ed2:	2025      	movs	r0, #37	; 0x25
 8000ed4:	f000 fe63 	bl	8001b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40013800 	.word	0x40013800
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010800 	.word	0x40010800

08000eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	201c      	movs	r0, #28
 8000f02:	f000 fe30 	bl	8001b66 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f06:	201c      	movs	r0, #28
 8000f08:	f000 fe49 	bl	8001b9e <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f0c:	4a20      	ldr	r2, [pc, #128]	; (8000f90 <HAL_InitTick+0xa4>)
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <HAL_InitTick+0xa4>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	61d3      	str	r3, [r2, #28]
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_InitTick+0xa4>)
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f24:	f107 0210 	add.w	r2, r7, #16
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fc84 	bl	800283c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f34:	f001 fc5a 	bl	80027ec <HAL_RCC_GetPCLK1Freq>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <HAL_InitTick+0xa8>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	0c9b      	lsrs	r3, r3, #18
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0xac>)
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_InitTick+0xac>)
 8000f56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f5a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_InitTick+0xac>)
 8000f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f60:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_InitTick+0xac>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_InitTick+0xac>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000f6e:	480a      	ldr	r0, [pc, #40]	; (8000f98 <HAL_InitTick+0xac>)
 8000f70:	f001 fe24 	bl	8002bbc <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d104      	bne.n	8000f84 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <HAL_InitTick+0xac>)
 8000f7c:	f001 fe6e 	bl	8002c5c <HAL_TIM_Base_Start_IT>
 8000f80:	4603      	mov	r3, r0
 8000f82:	e000      	b.n	8000f86 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3730      	adds	r7, #48	; 0x30
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000
 8000f94:	431bde83 	.word	0x431bde83
 8000f98:	20001be4 	.word	0x20001be4

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
	...

08000fc8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <TIM1_UP_IRQHandler+0x10>)
 8000fce:	f002 f82f 	bl	8003030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20001b9c 	.word	0x20001b9c

08000fdc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <TIM1_CC_IRQHandler+0x10>)
 8000fe2:	f002 f825 	bl	8003030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20001b9c 	.word	0x20001b9c

08000ff0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <TIM2_IRQHandler+0x10>)
 8000ff6:	f002 f81b 	bl	8003030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20001be4 	.word	0x20001be4

08001004 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <TIM4_IRQHandler+0x10>)
 800100a:	f002 f811 	bl	8003030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20001a98 	.word	0x20001a98

08001018 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USART1_IRQHandler+0x10>)
 800101e:	f002 ff27 	bl	8003e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20001b54 	.word	0x20001b54

0800102c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_Init+0x28>)
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_Init+0x28>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f043 0310 	orr.w	r3, r3, #16
 8001046:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 fd81 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff ff4c 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff fdda 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40022000 	.word	0x40022000

08001064 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_IncTick+0x1c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_IncTick+0x20>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a03      	ldr	r2, [pc, #12]	; (8001084 <HAL_IncTick+0x20>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	2000000c 	.word	0x2000000c
 8001084:	20001c2c 	.word	0x20001c2c

08001088 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <HAL_GetTick+0x10>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	20001c2c 	.word	0x20001c2c

0800109c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e0be      	b.n	800123c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d109      	bne.n	80010e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fdce 	bl	8000c7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f90d 	bl	8001300 <ADC_ConversionStop_Disable>
 80010e6:	4603      	mov	r3, r0
 80010e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f040 8099 	bne.w	800122a <HAL_ADC_Init+0x18e>
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 8095 	bne.w	800122a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001104:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001108:	f023 0302 	bic.w	r3, r3, #2
 800110c:	f043 0202 	orr.w	r2, r3, #2
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800111c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7b1b      	ldrb	r3, [r3, #12]
 8001122:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001124:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	4313      	orrs	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001134:	d003      	beq.n	800113e <HAL_ADC_Init+0xa2>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d102      	bne.n	8001144 <HAL_ADC_Init+0xa8>
 800113e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001142:	e000      	b.n	8001146 <HAL_ADC_Init+0xaa>
 8001144:	2300      	movs	r3, #0
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7d1b      	ldrb	r3, [r3, #20]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d119      	bne.n	8001188 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7b1b      	ldrb	r3, [r3, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d109      	bne.n	8001170 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	3b01      	subs	r3, #1
 8001162:	035a      	lsls	r2, r3, #13
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	e00b      	b.n	8001188 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001174:	f043 0220 	orr.w	r2, r3, #32
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001180:	f043 0201 	orr.w	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	6852      	ldr	r2, [r2, #4]
 8001192:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	430a      	orrs	r2, r1
 800119a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6899      	ldr	r1, [r3, #8]
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <HAL_ADC_Init+0x1a8>)
 80011a8:	400b      	ands	r3, r1
 80011aa:	68b9      	ldr	r1, [r7, #8]
 80011ac:	430b      	orrs	r3, r1
 80011ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b8:	d003      	beq.n	80011c2 <HAL_ADC_Init+0x126>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d104      	bne.n	80011cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	051b      	lsls	r3, r3, #20
 80011ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011d6:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	430a      	orrs	r2, r1
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_ADC_Init+0x1ac>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d10b      	bne.n	8001208 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fa:	f023 0303 	bic.w	r3, r3, #3
 80011fe:	f043 0201 	orr.w	r2, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001206:	e018      	b.n	800123a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120c:	f023 0312 	bic.w	r3, r3, #18
 8001210:	f043 0210 	orr.w	r2, r3, #16
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121c:	f043 0201 	orr.w	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001228:	e007      	b.n	800123a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	f043 0210 	orr.w	r2, r3, #16
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800123a:	7dfb      	ldrb	r3, [r7, #23]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	ffe1f7fd 	.word	0xffe1f7fd
 8001248:	ff1f0efe 	.word	0xff1f0efe

0800124c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b01      	cmp	r3, #1
 8001268:	d040      	beq.n	80012ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	6892      	ldr	r2, [r2, #8]
 8001274:	f042 0201 	orr.w	r2, r2, #1
 8001278:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <ADC_Enable+0xac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <ADC_Enable+0xb0>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0c9b      	lsrs	r3, r3, #18
 8001286:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001288:	e002      	b.n	8001290 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	3b01      	subs	r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f9      	bne.n	800128a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001296:	f7ff fef7 	bl	8001088 <HAL_GetTick>
 800129a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800129c:	e01f      	b.n	80012de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800129e:	f7ff fef3 	bl	8001088 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d918      	bls.n	80012de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d011      	beq.n	80012de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012be:	f043 0210 	orr.w	r2, r3, #16
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	f043 0201 	orr.w	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e007      	b.n	80012ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d1d8      	bne.n	800129e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000004 	.word	0x20000004
 80012fc:	431bde83 	.word	0x431bde83

08001300 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b01      	cmp	r3, #1
 8001318:	d12e      	bne.n	8001378 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	6892      	ldr	r2, [r2, #8]
 8001324:	f022 0201 	bic.w	r2, r2, #1
 8001328:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800132a:	f7ff fead 	bl	8001088 <HAL_GetTick>
 800132e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001330:	e01b      	b.n	800136a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001332:	f7ff fea9 	bl	8001088 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d914      	bls.n	800136a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b01      	cmp	r3, #1
 800134c:	d10d      	bne.n	800136a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	f043 0210 	orr.w	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135e:	f043 0201 	orr.w	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e007      	b.n	800137a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b01      	cmp	r3, #1
 8001376:	d0dc      	beq.n	8001332 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_ADCEx_InjectedStart>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <HAL_ADCEx_InjectedStart+0x1a>
 800139a:	2302      	movs	r3, #2
 800139c:	e070      	b.n	8001480 <HAL_ADCEx_InjectedStart+0xfc>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff50 	bl	800124c <ADC_Enable>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d15f      	bne.n	8001476 <HAL_ADCEx_InjectedStart+0xf2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013be:	f023 0301 	bic.w	r3, r3, #1
 80013c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a2e      	ldr	r2, [pc, #184]	; (8001488 <HAL_ADCEx_InjectedStart+0x104>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d105      	bne.n	80013e0 <HAL_ADCEx_InjectedStart+0x5c>
 80013d4:	4b2d      	ldr	r3, [pc, #180]	; (800148c <HAL_ADCEx_InjectedStart+0x108>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d106      	bne.n	80013ee <HAL_ADCEx_InjectedStart+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
 80013ec:	e005      	b.n	80013fa <HAL_ADCEx_InjectedStart+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <HAL_ADCEx_InjectedStart+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f06f 0204 	mvn.w	r2, #4
 800141c:	601a      	str	r2, [r3, #0]
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
    /* slave, ADC is enabled only (conversion is not started). If ADC is      */
    /* master, ADC is enabled and conversion is started.                      */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001428:	2b00      	cmp	r3, #0
 800142a:	d128      	bne.n	800147e <HAL_ADCEx_InjectedStart+0xfa>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001436:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800143a:	d113      	bne.n	8001464 <HAL_ADCEx_InjectedStart+0xe0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001440:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_ADCEx_InjectedStart+0x104>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d105      	bne.n	8001452 <HAL_ADCEx_InjectedStart+0xce>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_ADCEx_InjectedStart+0x108>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 800144e:	2b00      	cmp	r3, #0
 8001450:	d108      	bne.n	8001464 <HAL_ADCEx_InjectedStart+0xe0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	6892      	ldr	r2, [r2, #8]
 800145c:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	e00c      	b.n	800147e <HAL_ADCEx_InjectedStart+0xfa>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	6892      	ldr	r2, [r2, #8]
 800146e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	e003      	b.n	800147e <HAL_ADCEx_InjectedStart+0xfa>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40012800 	.word	0x40012800
 800148c:	40012400 	.word	0x40012400

08001490 <HAL_ADCEx_InjectedPollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Get timeout */
  tickstart = HAL_GetTick();  
 80014a2:	f7ff fdf1 	bl	8001088 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag JEOC is not set after each conversion, no timeout status can  */
  /*    be set.                                                               */
  if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d12a      	bne.n	800150c <HAL_ADCEx_InjectedPollForConversion+0x7c>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 80014b6:	e021      	b.n	80014fc <HAL_ADCEx_InjectedPollForConversion+0x6c>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014be:	d01d      	beq.n	80014fc <HAL_ADCEx_InjectedPollForConversion+0x6c>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <HAL_ADCEx_InjectedPollForConversion+0x46>
 80014c6:	f7ff fddf 	bl	8001088 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad2      	subs	r2, r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d912      	bls.n	80014fc <HAL_ADCEx_InjectedPollForConversion+0x6c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10b      	bne.n	80014fc <HAL_ADCEx_InjectedPollForConversion+0x6c>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	f043 0204 	orr.w	r2, r3, #4
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e0b1      	b.n	8001660 <HAL_ADCEx_InjectedPollForConversion+0x1d0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0d6      	beq.n	80014b8 <HAL_ADCEx_InjectedPollForConversion+0x28>
 800150a:	e070      	b.n	80015ee <HAL_ADCEx_InjectedPollForConversion+0x15e>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800150c:	4b56      	ldr	r3, [pc, #344]	; (8001668 <HAL_ADCEx_InjectedPollForConversion+0x1d8>)
 800150e:	681c      	ldr	r4, [r3, #0]
 8001510:	2002      	movs	r0, #2
 8001512:	f001 fa97 	bl	8002a44 <HAL_RCCEx_GetPeriphCLKFreq>
 8001516:	4603      	mov	r3, r0
 8001518:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6919      	ldr	r1, [r3, #16]
 8001522:	4b52      	ldr	r3, [pc, #328]	; (800166c <HAL_ADCEx_InjectedPollForConversion+0x1dc>)
 8001524:	400b      	ands	r3, r1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <HAL_ADCEx_InjectedPollForConversion+0xcc>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68d9      	ldr	r1, [r3, #12]
 8001530:	4b4f      	ldr	r3, [pc, #316]	; (8001670 <HAL_ADCEx_InjectedPollForConversion+0x1e0>)
 8001532:	400b      	ands	r3, r1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d111      	bne.n	800155c <HAL_ADCEx_InjectedPollForConversion+0xcc>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6919      	ldr	r1, [r3, #16]
 800153e:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 8001540:	400b      	ands	r3, r1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d108      	bne.n	8001558 <HAL_ADCEx_InjectedPollForConversion+0xc8>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68d9      	ldr	r1, [r3, #12]
 800154c:	4b4a      	ldr	r3, [pc, #296]	; (8001678 <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 800154e:	400b      	ands	r3, r1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_ADCEx_InjectedPollForConversion+0xc8>
 8001554:	2314      	movs	r3, #20
 8001556:	e020      	b.n	800159a <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8001558:	2329      	movs	r3, #41	; 0x29
 800155a:	e01e      	b.n	800159a <HAL_ADCEx_InjectedPollForConversion+0x10a>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6919      	ldr	r1, [r3, #16]
 8001562:	4b44      	ldr	r3, [pc, #272]	; (8001674 <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 8001564:	400b      	ands	r3, r1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_ADCEx_InjectedPollForConversion+0xe8>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68d9      	ldr	r1, [r3, #12]
 8001570:	4b41      	ldr	r3, [pc, #260]	; (8001678 <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 8001572:	400b      	ands	r3, r1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00d      	beq.n	8001594 <HAL_ADCEx_InjectedPollForConversion+0x104>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6919      	ldr	r1, [r3, #16]
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 8001580:	400b      	ands	r3, r1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d108      	bne.n	8001598 <HAL_ADCEx_InjectedPollForConversion+0x108>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68d9      	ldr	r1, [r3, #12]
 800158c:	4b3b      	ldr	r3, [pc, #236]	; (800167c <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 800158e:	400b      	ands	r3, r1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_ADCEx_InjectedPollForConversion+0x108>
 8001594:	2354      	movs	r3, #84	; 0x54
 8001596:	e000      	b.n	800159a <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8001598:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800159a:	fb03 f302 	mul.w	r3, r3, r2
 800159e:	617b      	str	r3, [r7, #20]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015a0:	e021      	b.n	80015e6 <HAL_ADCEx_InjectedPollForConversion+0x156>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a8:	d01a      	beq.n	80015e0 <HAL_ADCEx_InjectedPollForConversion+0x150>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <HAL_ADCEx_InjectedPollForConversion+0x130>
 80015b0:	f7ff fd6a 	bl	8001088 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad2      	subs	r2, r2, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d90f      	bls.n	80015e0 <HAL_ADCEx_InjectedPollForConversion+0x150>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d20b      	bcs.n	80015e0 <HAL_ADCEx_InjectedPollForConversion+0x150>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f043 0204 	orr.w	r2, r3, #4
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e03f      	b.n	8001660 <HAL_ADCEx_InjectedPollForConversion+0x1d0>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3301      	adds	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3d9      	bcc.n	80015a2 <HAL_ADCEx_InjectedPollForConversion+0x112>
  }

  /* Clear injected group conversion flag */
  /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
  /* simultaneously.                                                          */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f06f 020e 	mvn.w	r2, #14
 80015f6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800160e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001612:	d012      	beq.n	800163a <HAL_ADCEx_InjectedPollForConversion+0x1aa>
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800161e:	2b00      	cmp	r3, #0
 8001620:	d11d      	bne.n	800165e <HAL_ADCEx_InjectedPollForConversion+0x1ce>
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800162c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001630:	d115      	bne.n	800165e <HAL_ADCEx_InjectedPollForConversion+0x1ce>
      (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7b1b      	ldrb	r3, [r3, #12]
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001636:	2b00      	cmp	r3, #0
 8001638:	d111      	bne.n	800165e <HAL_ADCEx_InjectedPollForConversion+0x1ce>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <HAL_ADCEx_InjectedPollForConversion+0x1ce>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	f043 0201 	orr.w	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}
 8001668:	20000004 	.word	0x20000004
 800166c:	24924924 	.word	0x24924924
 8001670:	00924924 	.word	0x00924924
 8001674:	12492492 	.word	0x12492492
 8001678:	00492492 	.word	0x00492492
 800167c:	00249249 	.word	0x00249249

08001680 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2b03      	cmp	r3, #3
 8001692:	d009      	beq.n	80016a8 <HAL_ADCEx_InjectedGetValue+0x28>
 8001694:	2b04      	cmp	r3, #4
 8001696:	d002      	beq.n	800169e <HAL_ADCEx_InjectedGetValue+0x1e>
 8001698:	2b02      	cmp	r3, #2
 800169a:	d00a      	beq.n	80016b2 <HAL_ADCEx_InjectedGetValue+0x32>
 800169c:	e00e      	b.n	80016bc <HAL_ADCEx_InjectedGetValue+0x3c>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a4:	60fb      	str	r3, [r7, #12]
      break;
 80016a6:	e00e      	b.n	80016c6 <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	60fb      	str	r3, [r7, #12]
      break;
 80016b0:	e009      	b.n	80016c6 <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	60fb      	str	r3, [r7, #12]
      break;
 80016ba:	e004      	b.n	80016c6 <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c2:	60fb      	str	r3, [r7, #12]
      break;
 80016c4:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
	...

080016d4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80016d4:	b4b0      	push	{r4, r5, r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_ADCEx_InjectedConfigChannel+0x20>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e179      	b.n	80019e8 <HAL_ADCEx_InjectedConfigChannel+0x314>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d119      	bne.n	8001738 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d10c      	bne.n	8001726 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001716:	0d9b      	lsrs	r3, r3, #22
 8001718:	059b      	lsls	r3, r3, #22
 800171a:	6839      	ldr	r1, [r7, #0]
 800171c:	6809      	ldr	r1, [r1, #0]
 800171e:	03c9      	lsls	r1, r1, #15
 8001720:	430b      	orrs	r3, r1
 8001722:	6393      	str	r3, [r2, #56]	; 0x38
 8001724:	e04e      	b.n	80017c4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	f043 0220 	orr.w	r2, r3, #32
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
 8001736:	e045      	b.n	80017c4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d829      	bhi.n	8001798 <HAL_ADCEx_InjectedConfigChannel+0xc4>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6819      	ldr	r1, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	1ad2      	subs	r2, r2, r3
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	330f      	adds	r3, #15
 8001760:	221f      	movs	r2, #31
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800176a:	43db      	mvns	r3, r3
 800176c:	4018      	ands	r0, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	3b01      	subs	r3, #1
 8001774:	051c      	lsls	r4, r3, #20
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681d      	ldr	r5, [r3, #0]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	1ad2      	subs	r2, r2, r3
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	330f      	adds	r3, #15
 800178c:	fa05 f303 	lsl.w	r3, r5, r3
 8001790:	4323      	orrs	r3, r4
 8001792:	4303      	orrs	r3, r0
 8001794:	638b      	str	r3, [r1, #56]	; 0x38
 8001796:	e015      	b.n	80017c4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6819      	ldr	r1, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	1ad2      	subs	r2, r2, r3
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	330f      	adds	r3, #15
 80017b4:	221f      	movs	r2, #31
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80017be:	43db      	mvns	r3, r3
 80017c0:	4003      	ands	r3, r0
 80017c2:	638b      	str	r3, [r1, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d00c      	beq.n	80017ec <HAL_ADCEx_InjectedConfigChannel+0x118>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	6989      	ldr	r1, [r1, #24]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	7d5b      	ldrb	r3, [r3, #21]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d115      	bne.n	8001820 <HAL_ADCEx_InjectedConfigChannel+0x14c>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80017fc:	d108      	bne.n	8001810 <HAL_ADCEx_InjectedConfigChannel+0x13c>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	6852      	ldr	r2, [r2, #4]
 8001808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	e007      	b.n	8001820 <HAL_ADCEx_InjectedConfigChannel+0x14c>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	f043 0220 	orr.w	r2, r3, #32
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	7d1b      	ldrb	r3, [r3, #20]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d114      	bne.n	8001852 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	7d5b      	ldrb	r3, [r3, #21]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d108      	bne.n	8001842 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	6852      	ldr	r2, [r2, #4]
 800183a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	e007      	b.n	8001852 <HAL_ADCEx_InjectedConfigChannel+0x17e>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	f043 0220 	orr.w	r2, r3, #32
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b09      	cmp	r3, #9
 8001858:	d91c      	bls.n	8001894 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6819      	ldr	r1, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68d8      	ldr	r0, [r3, #12]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	3b1e      	subs	r3, #30
 8001870:	2207      	movs	r2, #7
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	4018      	ands	r0, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689c      	ldr	r4, [r3, #8]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	3b1e      	subs	r3, #30
 800188a:	fa04 f303 	lsl.w	r3, r4, r3
 800188e:	4303      	orrs	r3, r0
 8001890:	60cb      	str	r3, [r1, #12]
 8001892:	e019      	b.n	80018c8 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6918      	ldr	r0, [r3, #16]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	2207      	movs	r2, #7
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	4018      	ands	r0, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689c      	ldr	r4, [r3, #8]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	fa04 f303 	lsl.w	r3, r4, r3
 80018c4:	4303      	orrs	r3, r0
 80018c6:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b10      	cmp	r3, #16
 80018ce:	d003      	beq.n	80018d8 <HAL_ADCEx_InjectedConfigChannel+0x204>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80018d4:	2b11      	cmp	r3, #17
 80018d6:	d107      	bne.n	80018e8 <HAL_ADCEx_InjectedConfigChannel+0x214>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	6892      	ldr	r2, [r2, #8]
 80018e2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018e6:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d011      	beq.n	8001914 <HAL_ADCEx_InjectedConfigChannel+0x240>
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d01d      	beq.n	8001930 <HAL_ADCEx_InjectedConfigChannel+0x25c>
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d129      	bne.n	800194c <HAL_ADCEx_InjectedConfigChannel+0x278>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001906:	f023 030f 	bic.w	r3, r3, #15
 800190a:	6839      	ldr	r1, [r7, #0]
 800190c:	68c9      	ldr	r1, [r1, #12]
 800190e:	430b      	orrs	r3, r1
 8001910:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8001912:	e029      	b.n	8001968 <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001922:	f023 030f 	bic.w	r3, r3, #15
 8001926:	6839      	ldr	r1, [r7, #0]
 8001928:	68c9      	ldr	r1, [r1, #12]
 800192a:	430b      	orrs	r3, r1
 800192c:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 800192e:	e01b      	b.n	8001968 <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800193e:	f023 030f 	bic.w	r3, r3, #15
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	68c9      	ldr	r1, [r1, #12]
 8001946:	430b      	orrs	r3, r1
 8001948:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 800194a:	e00d      	b.n	8001968 <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800195a:	f023 030f 	bic.w	r3, r3, #15
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	68c9      	ldr	r1, [r1, #12]
 8001962:	430b      	orrs	r3, r1
 8001964:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8001966:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b10      	cmp	r3, #16
 800196e:	d003      	beq.n	8001978 <HAL_ADCEx_InjectedConfigChannel+0x2a4>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001974:	2b11      	cmp	r3, #17
 8001976:	d132      	bne.n	80019de <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d125      	bne.n	80019ce <HAL_ADCEx_InjectedConfigChannel+0x2fa>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d126      	bne.n	80019de <HAL_ADCEx_InjectedConfigChannel+0x30a>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	6892      	ldr	r2, [r2, #8]
 800199a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800199e:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b10      	cmp	r3, #16
 80019a6:	d11a      	bne.n	80019de <HAL_ADCEx_InjectedConfigChannel+0x30a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a13      	ldr	r2, [pc, #76]	; (80019fc <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0c9a      	lsrs	r2, r3, #18
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019be:	e002      	b.n	80019c6 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
          {
            wait_loop_index--;
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f9      	bne.n	80019c0 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
 80019cc:	e007      	b.n	80019de <HAL_ADCEx_InjectedConfigChannel+0x30a>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	f043 0220 	orr.w	r2, r3, #32
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bcb0      	pop	{r4, r5, r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40012400 	.word	0x40012400
 80019f8:	20000004 	.word	0x20000004
 80019fc:	431bde83 	.word	0x431bde83

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	4908      	ldr	r1, [pc, #32]	; (8001a98 <__NVIC_EnableIRQ+0x34>)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	79fa      	ldrb	r2, [r7, #7]
 8001a80:	f002 021f 	and.w	r2, r2, #31
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100

08001a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db0a      	blt.n	8001ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab0:	490d      	ldr	r1, [pc, #52]	; (8001ae8 <__NVIC_SetPriority+0x4c>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	0112      	lsls	r2, r2, #4
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac4:	e00a      	b.n	8001adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac6:	4909      	ldr	r1, [pc, #36]	; (8001aec <__NVIC_SetPriority+0x50>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	3b04      	subs	r3, #4
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	440b      	add	r3, r1
 8001ada:	761a      	strb	r2, [r3, #24]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f1c3 0307 	rsb	r3, r3, #7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	bf28      	it	cs
 8001b0e:	2304      	movcs	r3, #4
 8001b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3304      	adds	r3, #4
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d902      	bls.n	8001b20 <NVIC_EncodePriority+0x30>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3b03      	subs	r3, #3
 8001b1e:	e000      	b.n	8001b22 <NVIC_EncodePriority+0x32>
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	2201      	movs	r2, #1
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	1e5a      	subs	r2, r3, #1
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	401a      	ands	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b36:	2101      	movs	r1, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	1e59      	subs	r1, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff51 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b78:	f7ff ff66 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff ffb4 	bl	8001af0 <NVIC_EncodePriority>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff83 	bl	8001a9c <__NVIC_SetPriority>
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff59 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d008      	beq.n	8001be2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e020      	b.n	8001c24 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	f022 020e 	bic.w	r2, r2, #14
 8001bf0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d005      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e057      	b.n	8001d02 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	f022 020e 	bic.w	r2, r2, #14
 8001c60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c72:	4a26      	ldr	r2, [pc, #152]	; (8001d0c <HAL_DMA_Abort_IT+0xdc>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <HAL_DMA_Abort_IT+0xe0>)
 8001c7c:	4299      	cmp	r1, r3
 8001c7e:	d02e      	beq.n	8001cde <HAL_DMA_Abort_IT+0xae>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <HAL_DMA_Abort_IT+0xe4>)
 8001c88:	4299      	cmp	r1, r3
 8001c8a:	d026      	beq.n	8001cda <HAL_DMA_Abort_IT+0xaa>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4619      	mov	r1, r3
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <HAL_DMA_Abort_IT+0xe8>)
 8001c94:	4299      	cmp	r1, r3
 8001c96:	d01d      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0xa4>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <HAL_DMA_Abort_IT+0xec>)
 8001ca0:	4299      	cmp	r1, r3
 8001ca2:	d014      	beq.n	8001cce <HAL_DMA_Abort_IT+0x9e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_DMA_Abort_IT+0xf0>)
 8001cac:	4299      	cmp	r1, r3
 8001cae:	d00b      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x98>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_DMA_Abort_IT+0xf4>)
 8001cb8:	4299      	cmp	r1, r3
 8001cba:	d102      	bne.n	8001cc2 <HAL_DMA_Abort_IT+0x92>
 8001cbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cc0:	e00e      	b.n	8001ce0 <HAL_DMA_Abort_IT+0xb0>
 8001cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc6:	e00b      	b.n	8001ce0 <HAL_DMA_Abort_IT+0xb0>
 8001cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ccc:	e008      	b.n	8001ce0 <HAL_DMA_Abort_IT+0xb0>
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	e005      	b.n	8001ce0 <HAL_DMA_Abort_IT+0xb0>
 8001cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd8:	e002      	b.n	8001ce0 <HAL_DMA_Abort_IT+0xb0>
 8001cda:	2310      	movs	r3, #16
 8001cdc:	e000      	b.n	8001ce0 <HAL_DMA_Abort_IT+0xb0>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4798      	blx	r3
    } 
  }
  return status;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	40020008 	.word	0x40020008
 8001d14:	4002001c 	.word	0x4002001c
 8001d18:	40020030 	.word	0x40020030
 8001d1c:	40020044 	.word	0x40020044
 8001d20:	40020058 	.word	0x40020058
 8001d24:	4002006c 	.word	0x4002006c

08001d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b08b      	sub	sp, #44	; 0x2c
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3a:	e127      	b.n	8001f8c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f040 8116 	bne.w	8001f86 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d034      	beq.n	8001dcc <HAL_GPIO_Init+0xa4>
 8001d62:	2b12      	cmp	r3, #18
 8001d64:	d80d      	bhi.n	8001d82 <HAL_GPIO_Init+0x5a>
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d02b      	beq.n	8001dc2 <HAL_GPIO_Init+0x9a>
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d804      	bhi.n	8001d78 <HAL_GPIO_Init+0x50>
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d031      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d01c      	beq.n	8001db0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d76:	e048      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d043      	beq.n	8001e04 <HAL_GPIO_Init+0xdc>
 8001d7c:	2b11      	cmp	r3, #17
 8001d7e:	d01b      	beq.n	8001db8 <HAL_GPIO_Init+0x90>
          break;
 8001d80:	e043      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d82:	4a89      	ldr	r2, [pc, #548]	; (8001fa8 <HAL_GPIO_Init+0x280>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d026      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
 8001d88:	4a87      	ldr	r2, [pc, #540]	; (8001fa8 <HAL_GPIO_Init+0x280>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d806      	bhi.n	8001d9c <HAL_GPIO_Init+0x74>
 8001d8e:	4a87      	ldr	r2, [pc, #540]	; (8001fac <HAL_GPIO_Init+0x284>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d020      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
 8001d94:	4a86      	ldr	r2, [pc, #536]	; (8001fb0 <HAL_GPIO_Init+0x288>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01d      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
          break;
 8001d9a:	e036      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d9c:	4a85      	ldr	r2, [pc, #532]	; (8001fb4 <HAL_GPIO_Init+0x28c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d019      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
 8001da2:	4a85      	ldr	r2, [pc, #532]	; (8001fb8 <HAL_GPIO_Init+0x290>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d016      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
 8001da8:	4a84      	ldr	r2, [pc, #528]	; (8001fbc <HAL_GPIO_Init+0x294>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
          break;
 8001dae:	e02c      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	623b      	str	r3, [r7, #32]
          break;
 8001db6:	e028      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	623b      	str	r3, [r7, #32]
          break;
 8001dc0:	e023      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	623b      	str	r3, [r7, #32]
          break;
 8001dca:	e01e      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	623b      	str	r3, [r7, #32]
          break;
 8001dd4:	e019      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dde:	2304      	movs	r3, #4
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e012      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dec:	2308      	movs	r3, #8
 8001dee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	611a      	str	r2, [r3, #16]
          break;
 8001df6:	e008      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	615a      	str	r2, [r3, #20]
          break;
 8001e02:	e002      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2bff      	cmp	r3, #255	; 0xff
 8001e0e:	d801      	bhi.n	8001e14 <HAL_GPIO_Init+0xec>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	e001      	b.n	8001e18 <HAL_GPIO_Init+0xf0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3304      	adds	r3, #4
 8001e18:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2bff      	cmp	r3, #255	; 0xff
 8001e1e:	d802      	bhi.n	8001e26 <HAL_GPIO_Init+0xfe>
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_Init+0x104>
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	3b08      	subs	r3, #8
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	210f      	movs	r1, #15
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	6a39      	ldr	r1, [r7, #32]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	431a      	orrs	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8096 	beq.w	8001f86 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e5a:	4a59      	ldr	r2, [pc, #356]	; (8001fc0 <HAL_GPIO_Init+0x298>)
 8001e5c:	4b58      	ldr	r3, [pc, #352]	; (8001fc0 <HAL_GPIO_Init+0x298>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6193      	str	r3, [r2, #24]
 8001e66:	4b56      	ldr	r3, [pc, #344]	; (8001fc0 <HAL_GPIO_Init+0x298>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e72:	4a54      	ldr	r2, [pc, #336]	; (8001fc4 <HAL_GPIO_Init+0x29c>)
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	3302      	adds	r3, #2
 8001e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4013      	ands	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4b      	ldr	r2, [pc, #300]	; (8001fc8 <HAL_GPIO_Init+0x2a0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0x19e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4a      	ldr	r2, [pc, #296]	; (8001fcc <HAL_GPIO_Init+0x2a4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_GPIO_Init+0x19a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a49      	ldr	r2, [pc, #292]	; (8001fd0 <HAL_GPIO_Init+0x2a8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <HAL_GPIO_Init+0x196>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a48      	ldr	r2, [pc, #288]	; (8001fd4 <HAL_GPIO_Init+0x2ac>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_GPIO_Init+0x192>
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x1a0>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e004      	b.n	8001ec8 <HAL_GPIO_Init+0x1a0>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_Init+0x1a0>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x1a0>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eca:	f002 0203 	and.w	r2, r2, #3
 8001ece:	0092      	lsls	r2, r2, #2
 8001ed0:	4093      	lsls	r3, r2
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ed8:	493a      	ldr	r1, [pc, #232]	; (8001fc4 <HAL_GPIO_Init+0x29c>)
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef2:	4939      	ldr	r1, [pc, #228]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001ef4:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]
 8001efe:	e006      	b.n	8001f0e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f00:	4935      	ldr	r1, [pc, #212]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f02:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f1a:	492f      	ldr	r1, [pc, #188]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
 8001f26:	e006      	b.n	8001f36 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f28:	492b      	ldr	r1, [pc, #172]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f2a:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4013      	ands	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f42:	4925      	ldr	r1, [pc, #148]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
 8001f4e:	e006      	b.n	8001f5e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f50:	4921      	ldr	r1, [pc, #132]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d006      	beq.n	8001f78 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f6a:	491b      	ldr	r1, [pc, #108]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60cb      	str	r3, [r1, #12]
 8001f76:	e006      	b.n	8001f86 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f78:	4917      	ldr	r1, [pc, #92]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4013      	ands	r3, r2
 8001f84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	3301      	adds	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f47f aed0 	bne.w	8001d3c <HAL_GPIO_Init+0x14>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	372c      	adds	r7, #44	; 0x2c
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	10210000 	.word	0x10210000
 8001fac:	10110000 	.word	0x10110000
 8001fb0:	10120000 	.word	0x10120000
 8001fb4:	10310000 	.word	0x10310000
 8001fb8:	10320000 	.word	0x10320000
 8001fbc:	10220000 	.word	0x10220000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	40010c00 	.word	0x40010c00
 8001fd0:	40011000 	.word	0x40011000
 8001fd4:	40011400 	.word	0x40011400
 8001fd8:	40010400 	.word	0x40010400

08001fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fec:	787b      	ldrb	r3, [r7, #1]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ff8:	e003      	b.n	8002002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	611a      	str	r2, [r3, #16]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	041a      	lsls	r2, r3, #16
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	43d9      	mvns	r1, r3
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	400b      	ands	r3, r1
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	611a      	str	r2, [r3, #16]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
	...

08002040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e26c      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 8087 	beq.w	800216e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002060:	4b92      	ldr	r3, [pc, #584]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b04      	cmp	r3, #4
 800206a:	d00c      	beq.n	8002086 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800206c:	4b8f      	ldr	r3, [pc, #572]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d112      	bne.n	800209e <HAL_RCC_OscConfig+0x5e>
 8002078:	4b8c      	ldr	r3, [pc, #560]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002084:	d10b      	bne.n	800209e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002086:	4b89      	ldr	r3, [pc, #548]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d06c      	beq.n	800216c <HAL_RCC_OscConfig+0x12c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d168      	bne.n	800216c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e246      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x76>
 80020a8:	4a80      	ldr	r2, [pc, #512]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020aa:	4b80      	ldr	r3, [pc, #512]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	e02e      	b.n	8002114 <HAL_RCC_OscConfig+0xd4>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x98>
 80020be:	4a7b      	ldr	r2, [pc, #492]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020c0:	4b7a      	ldr	r3, [pc, #488]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4a78      	ldr	r2, [pc, #480]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020cc:	4b77      	ldr	r3, [pc, #476]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e01d      	b.n	8002114 <HAL_RCC_OscConfig+0xd4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0xbc>
 80020e2:	4a72      	ldr	r2, [pc, #456]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020e4:	4b71      	ldr	r3, [pc, #452]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4a6f      	ldr	r2, [pc, #444]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020f0:	4b6e      	ldr	r3, [pc, #440]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0xd4>
 80020fc:	4a6b      	ldr	r2, [pc, #428]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020fe:	4b6b      	ldr	r3, [pc, #428]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4a68      	ldr	r2, [pc, #416]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 800210a:	4b68      	ldr	r3, [pc, #416]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002112:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d013      	beq.n	8002144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe ffb4 	bl	8001088 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002124:	f7fe ffb0 	bl	8001088 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1fa      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	4b5d      	ldr	r3, [pc, #372]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0xe4>
 8002142:	e014      	b.n	800216e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe ffa0 	bl	8001088 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214c:	f7fe ff9c 	bl	8001088 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e1e6      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x10c>
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d063      	beq.n	8002242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800217a:	4b4c      	ldr	r3, [pc, #304]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002186:	4b49      	ldr	r3, [pc, #292]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b08      	cmp	r3, #8
 8002190:	d11c      	bne.n	80021cc <HAL_RCC_OscConfig+0x18c>
 8002192:	4b46      	ldr	r3, [pc, #280]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	4b43      	ldr	r3, [pc, #268]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x176>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e1ba      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	493d      	ldr	r1, [pc, #244]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021b8:	4b3c      	ldr	r3, [pc, #240]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	e03a      	b.n	8002242 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d4:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7fe ff55 	bl	8001088 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e2:	f7fe ff51 	bl	8001088 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e19b      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	492a      	ldr	r1, [pc, #168]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002202:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
 8002214:	e015      	b.n	8002242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe ff34 	bl	8001088 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002224:	f7fe ff30 	bl	8001088 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e17a      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d03a      	beq.n	80022c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d019      	beq.n	800228a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_RCC_OscConfig+0x274>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225c:	f7fe ff14 	bl	8001088 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002264:	f7fe ff10 	bl	8001088 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e15a      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002282:	2001      	movs	r0, #1
 8002284:	f000 fb0a 	bl	800289c <RCC_Delay>
 8002288:	e01c      	b.n	80022c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_RCC_OscConfig+0x274>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002290:	f7fe fefa 	bl	8001088 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002296:	e00f      	b.n	80022b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002298:	f7fe fef6 	bl	8001088 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d908      	bls.n	80022b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e140      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	42420000 	.word	0x42420000
 80022b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	4b9e      	ldr	r3, [pc, #632]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e9      	bne.n	8002298 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80a6 	beq.w	800241e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d6:	4b97      	ldr	r3, [pc, #604]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10d      	bne.n	80022fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e2:	4a94      	ldr	r2, [pc, #592]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 80022e4:	4b93      	ldr	r3, [pc, #588]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	61d3      	str	r3, [r2, #28]
 80022ee:	4b91      	ldr	r3, [pc, #580]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fa:	2301      	movs	r3, #1
 80022fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b8e      	ldr	r3, [pc, #568]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d118      	bne.n	800233c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230a:	4a8b      	ldr	r2, [pc, #556]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 800230c:	4b8a      	ldr	r3, [pc, #552]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002316:	f7fe feb7 	bl	8001088 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231e:	f7fe feb3 	bl	8001088 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b64      	cmp	r3, #100	; 0x64
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e0fd      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	4b81      	ldr	r3, [pc, #516]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x312>
 8002344:	4a7b      	ldr	r2, [pc, #492]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	4b7b      	ldr	r3, [pc, #492]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	e02d      	b.n	80023ae <HAL_RCC_OscConfig+0x36e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x334>
 800235a:	4a76      	ldr	r2, [pc, #472]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	4b75      	ldr	r3, [pc, #468]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	6213      	str	r3, [r2, #32]
 8002366:	4a73      	ldr	r2, [pc, #460]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	4b72      	ldr	r3, [pc, #456]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f023 0304 	bic.w	r3, r3, #4
 8002370:	6213      	str	r3, [r2, #32]
 8002372:	e01c      	b.n	80023ae <HAL_RCC_OscConfig+0x36e>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b05      	cmp	r3, #5
 800237a:	d10c      	bne.n	8002396 <HAL_RCC_OscConfig+0x356>
 800237c:	4a6d      	ldr	r2, [pc, #436]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 800237e:	4b6d      	ldr	r3, [pc, #436]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	f043 0304 	orr.w	r3, r3, #4
 8002386:	6213      	str	r3, [r2, #32]
 8002388:	4a6a      	ldr	r2, [pc, #424]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 800238a:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6213      	str	r3, [r2, #32]
 8002394:	e00b      	b.n	80023ae <HAL_RCC_OscConfig+0x36e>
 8002396:	4a67      	ldr	r2, [pc, #412]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	4b66      	ldr	r3, [pc, #408]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	4a64      	ldr	r2, [pc, #400]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	4b63      	ldr	r3, [pc, #396]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d015      	beq.n	80023e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fe67 	bl	8001088 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7fe fe63 	bl	8001088 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e0ab      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d4:	4b57      	ldr	r3, [pc, #348]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ee      	beq.n	80023be <HAL_RCC_OscConfig+0x37e>
 80023e0:	e014      	b.n	800240c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7fe fe51 	bl	8001088 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7fe fe4d 	bl	8001088 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e095      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002400:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ee      	bne.n	80023ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d105      	bne.n	800241e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002412:	4a48      	ldr	r2, [pc, #288]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 8081 	beq.w	800252a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002428:	4b42      	ldr	r3, [pc, #264]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d061      	beq.n	80024f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d146      	bne.n	80024ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243c:	4b3f      	ldr	r3, [pc, #252]	; (800253c <HAL_RCC_OscConfig+0x4fc>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7fe fe21 	bl	8001088 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244a:	f7fe fe1d 	bl	8001088 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e067      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245c:	4b35      	ldr	r3, [pc, #212]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f0      	bne.n	800244a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d108      	bne.n	8002484 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002472:	4930      	ldr	r1, [pc, #192]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002484:	482b      	ldr	r0, [pc, #172]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 8002486:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a19      	ldr	r1, [r3, #32]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	430b      	orrs	r3, r1
 8002498:	4313      	orrs	r3, r2
 800249a:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <HAL_RCC_OscConfig+0x4fc>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fdf1 	bl	8001088 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7fe fded 	bl	8001088 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e037      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x46a>
 80024c8:	e02f      	b.n	800252a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	4b1c      	ldr	r3, [pc, #112]	; (800253c <HAL_RCC_OscConfig+0x4fc>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe fdda 	bl	8001088 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7fe fdd6 	bl	8001088 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e020      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ea:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x498>
 80024f6:	e018      	b.n	800252a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e013      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	429a      	cmp	r2, r3
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d001      	beq.n	800252a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	40007000 	.word	0x40007000
 800253c:	42420060 	.word	0x42420060

08002540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0d0      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002554:	4b6a      	ldr	r3, [pc, #424]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0207 	and.w	r2, r3, #7
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d210      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4967      	ldr	r1, [pc, #412]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	4b66      	ldr	r3, [pc, #408]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 0207 	bic.w	r2, r3, #7
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b63      	ldr	r3, [pc, #396]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0207 	and.w	r2, r3, #7
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0b8      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800259c:	4a59      	ldr	r2, [pc, #356]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	4b59      	ldr	r3, [pc, #356]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b4:	4a53      	ldr	r2, [pc, #332]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	4b53      	ldr	r3, [pc, #332]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c0:	4950      	ldr	r1, [pc, #320]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	4b50      	ldr	r3, [pc, #320]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d040      	beq.n	8002660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b47      	ldr	r3, [pc, #284]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d115      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e07f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	4b41      	ldr	r3, [pc, #260]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e073      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e06b      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261e:	4939      	ldr	r1, [pc, #228]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	4b38      	ldr	r3, [pc, #224]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f023 0203 	bic.w	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002630:	f7fe fd2a 	bl	8001088 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	e00a      	b.n	800264e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7fe fd26 	bl	8001088 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	; 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e053      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 020c 	and.w	r2, r3, #12
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	429a      	cmp	r2, r3
 800265e:	d1eb      	bne.n	8002638 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002660:	4b27      	ldr	r3, [pc, #156]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0207 	and.w	r2, r3, #7
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d910      	bls.n	8002690 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4924      	ldr	r1, [pc, #144]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	4b23      	ldr	r3, [pc, #140]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 0207 	bic.w	r2, r3, #7
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0207 	and.w	r2, r3, #7
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e032      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269c:	4919      	ldr	r1, [pc, #100]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ba:	4912      	ldr	r1, [pc, #72]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ce:	f000 f821 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80026d2:	4601      	mov	r1, r0
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80026e0:	5cd3      	ldrb	r3, [r2, r3]
 80026e2:	fa21 f303 	lsr.w	r3, r1, r3
 80026e6:	4a09      	ldr	r2, [pc, #36]	; (800270c <HAL_RCC_ClockConfig+0x1cc>)
 80026e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1d0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fbfc 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40022000 	.word	0x40022000
 8002704:	40021000 	.word	0x40021000
 8002708:	08009524 	.word	0x08009524
 800270c:	20000004 	.word	0x20000004
 8002710:	20000008 	.word	0x20000008

08002714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002714:	b490      	push	{r4, r7}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800271a:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800271c:	1d3c      	adds	r4, r7, #4
 800271e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002724:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b04      	cmp	r3, #4
 800274c:	d002      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x40>
 800274e:	2b08      	cmp	r3, #8
 8002750:	d003      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0x46>
 8002752:	e02d      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002754:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002756:	623b      	str	r3, [r7, #32]
      break;
 8002758:	e02d      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	0c9b      	lsrs	r3, r3, #18
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002766:	4413      	add	r3, r2
 8002768:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800276c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d013      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	0c5b      	lsrs	r3, r3, #17
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002786:	4413      	add	r3, r2
 8002788:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800278c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002792:	fb02 f203 	mul.w	r2, r2, r3
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	fbb2 f3f3 	udiv	r3, r2, r3
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
 800279e:	e004      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	623b      	str	r3, [r7, #32]
      break;
 80027ae:	e002      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027b2:	623b      	str	r3, [r7, #32]
      break;
 80027b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b6:	6a3b      	ldr	r3, [r7, #32]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3728      	adds	r7, #40	; 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc90      	pop	{r4, r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	0800943c 	.word	0x0800943c
 80027c8:	0800944c 	.word	0x0800944c
 80027cc:	40021000 	.word	0x40021000
 80027d0:	007a1200 	.word	0x007a1200
 80027d4:	003d0900 	.word	0x003d0900

080027d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027dc:	4b02      	ldr	r3, [pc, #8]	; (80027e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	20000004 	.word	0x20000004

080027ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027f0:	f7ff fff2 	bl	80027d8 <HAL_RCC_GetHCLKFreq>
 80027f4:	4601      	mov	r1, r0
 80027f6:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4a03      	ldr	r2, [pc, #12]	; (8002810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	08009534 	.word	0x08009534

08002814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002818:	f7ff ffde 	bl	80027d8 <HAL_RCC_GetHCLKFreq>
 800281c:	4601      	mov	r1, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0adb      	lsrs	r3, r3, #11
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4a03      	ldr	r2, [pc, #12]	; (8002838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	08009534 	.word	0x08009534

0800283c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	220f      	movs	r2, #15
 800284a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_RCC_GetClockConfig+0x58>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0203 	and.w	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <HAL_RCC_GetClockConfig+0x58>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_GetClockConfig+0x58>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <HAL_RCC_GetClockConfig+0x58>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_GetClockConfig+0x5c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0207 	and.w	r2, r3, #7
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	40021000 	.word	0x40021000
 8002898:	40022000 	.word	0x40022000

0800289c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <RCC_Delay+0x34>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <RCC_Delay+0x38>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0a5b      	lsrs	r3, r3, #9
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b8:	bf00      	nop
  }
  while (Delay --);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1e5a      	subs	r2, r3, #1
 80028be:	60fa      	str	r2, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f9      	bne.n	80028b8 <RCC_Delay+0x1c>
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000004 	.word	0x20000004
 80028d4:	10624dd3 	.word	0x10624dd3

080028d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d07d      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028f4:	2300      	movs	r3, #0
 80028f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f8:	4b4f      	ldr	r3, [pc, #316]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10d      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002904:	4a4c      	ldr	r2, [pc, #304]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002906:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290e:	61d3      	str	r3, [r2, #28]
 8002910:	4b49      	ldr	r3, [pc, #292]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291c:	2301      	movs	r3, #1
 800291e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d118      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292c:	4a43      	ldr	r2, [pc, #268]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800292e:	4b43      	ldr	r3, [pc, #268]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002936:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002938:	f7fe fba6 	bl	8001088 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	e008      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002940:	f7fe fba2 	bl	8001088 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e06d      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800295e:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002966:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d02e      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d027      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800297c:	4b2e      	ldr	r3, [pc, #184]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002984:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002986:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800298c:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002992:	4a29      	ldr	r2, [pc, #164]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d014      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe fb71 	bl	8001088 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe fb6d 	bl	8001088 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e036      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ee      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029cc:	491a      	ldr	r1, [pc, #104]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4313      	orrs	r3, r2
 80029dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e4:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029fc:	490e      	ldr	r1, [pc, #56]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a1a:	4907      	ldr	r1, [pc, #28]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	42420440 	.word	0x42420440

08002a44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b08d      	sub	sp, #52	; 0x34
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a4c:	4b55      	ldr	r3, [pc, #340]	; (8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002a4e:	f107 040c 	add.w	r4, r7, #12
 8002a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a58:	4b53      	ldr	r3, [pc, #332]	; (8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
 8002a62:	2300      	movs	r3, #0
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a66:	2300      	movs	r3, #0
 8002a68:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d07f      	beq.n	8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002a78:	2b10      	cmp	r3, #16
 8002a7a:	d002      	beq.n	8002a82 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d048      	beq.n	8002b12 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002a80:	e08b      	b.n	8002b9a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002a82:	4b4a      	ldr	r3, [pc, #296]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a88:	4b48      	ldr	r3, [pc, #288]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d07f      	beq.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	0c9b      	lsrs	r3, r3, #18
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002aa6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d018      	beq.n	8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ab2:	4b3e      	ldr	r3, [pc, #248]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	0c5b      	lsrs	r3, r3, #17
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ad2:	4a37      	ldr	r2, [pc, #220]	; (8002bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	6a3a      	ldr	r2, [r7, #32]
 8002adc:	fb02 f303 	mul.w	r3, r2, r3
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae2:	e004      	b.n	8002aee <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	4a33      	ldr	r2, [pc, #204]	; (8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002aee:	4b2f      	ldr	r3, [pc, #188]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afa:	d102      	bne.n	8002b02 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b00:	e048      	b.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4a2c      	ldr	r2, [pc, #176]	; (8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b10:	e040      	b.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002b12:	4b26      	ldr	r3, [pc, #152]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b22:	d108      	bne.n	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b34:	e01f      	b.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b40:	d109      	bne.n	8002b56 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002b4e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b54:	e00f      	b.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b60:	d11a      	bne.n	8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d014      	beq.n	8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002b6e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b74:	e010      	b.n	8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002b76:	e00f      	b.n	8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b78:	f7ff fe4c 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	0b9b      	lsrs	r3, r3, #14
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002b94:	bf00      	nop
 8002b96:	e000      	b.n	8002b9a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002b98:	bf00      	nop
    }
  }
  return (frequency);
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3734      	adds	r7, #52	; 0x34
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd90      	pop	{r4, r7, pc}
 8002ba4:	08009450 	.word	0x08009450
 8002ba8:	08009460 	.word	0x08009460
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	007a1200 	.word	0x007a1200
 8002bb4:	003d0900 	.word	0x003d0900
 8002bb8:	aaaaaaab 	.word	0xaaaaaaab

08002bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e041      	b.n	8002c52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fe f8b0 	bl	8000d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	f000 fd12 	bl	8003624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d001      	beq.n	8002c74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e03a      	b.n	8002cea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	68d2      	ldr	r2, [r2, #12]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <HAL_TIM_Base_Start_IT+0x98>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00e      	beq.n	8002cb4 <HAL_TIM_Base_Start_IT+0x58>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9e:	d009      	beq.n	8002cb4 <HAL_TIM_Base_Start_IT+0x58>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a14      	ldr	r2, [pc, #80]	; (8002cf8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_TIM_Base_Start_IT+0x58>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <HAL_TIM_Base_Start_IT+0xa0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d111      	bne.n	8002cd8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b06      	cmp	r3, #6
 8002cc4:	d010      	beq.n	8002ce8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd6:	e007      	b.n	8002ce8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800

08002d00 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e041      	b.n	8002d96 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f839 	bl	8002d9e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	f000 fc70 	bl	8003624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d109      	bne.n	8002dd4 <HAL_TIM_OC_Start_IT+0x24>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	bf14      	ite	ne
 8002dcc:	2301      	movne	r3, #1
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e022      	b.n	8002e1a <HAL_TIM_OC_Start_IT+0x6a>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d109      	bne.n	8002dee <HAL_TIM_OC_Start_IT+0x3e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	bf14      	ite	ne
 8002de6:	2301      	movne	r3, #1
 8002de8:	2300      	moveq	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	e015      	b.n	8002e1a <HAL_TIM_OC_Start_IT+0x6a>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d109      	bne.n	8002e08 <HAL_TIM_OC_Start_IT+0x58>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	bf14      	ite	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	2300      	moveq	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e008      	b.n	8002e1a <HAL_TIM_OC_Start_IT+0x6a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e0a4      	b.n	8002f6c <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_OC_Start_IT+0x82>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	e013      	b.n	8002e5a <HAL_TIM_OC_Start_IT+0xaa>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_OC_Start_IT+0x92>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e40:	e00b      	b.n	8002e5a <HAL_TIM_OC_Start_IT+0xaa>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_OC_Start_IT+0xa2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e50:	e003      	b.n	8002e5a <HAL_TIM_OC_Start_IT+0xaa>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	d841      	bhi.n	8002ee4 <HAL_TIM_OC_Start_IT+0x134>
 8002e60:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <HAL_TIM_OC_Start_IT+0xb8>)
 8002e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	08002ee5 	.word	0x08002ee5
 8002e70:	08002ee5 	.word	0x08002ee5
 8002e74:	08002ee5 	.word	0x08002ee5
 8002e78:	08002eaf 	.word	0x08002eaf
 8002e7c:	08002ee5 	.word	0x08002ee5
 8002e80:	08002ee5 	.word	0x08002ee5
 8002e84:	08002ee5 	.word	0x08002ee5
 8002e88:	08002ec1 	.word	0x08002ec1
 8002e8c:	08002ee5 	.word	0x08002ee5
 8002e90:	08002ee5 	.word	0x08002ee5
 8002e94:	08002ee5 	.word	0x08002ee5
 8002e98:	08002ed3 	.word	0x08002ed3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	68d2      	ldr	r2, [r2, #12]
 8002ea6:	f042 0202 	orr.w	r2, r2, #2
 8002eaa:	60da      	str	r2, [r3, #12]
      break;
 8002eac:	e01b      	b.n	8002ee6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	68d2      	ldr	r2, [r2, #12]
 8002eb8:	f042 0204 	orr.w	r2, r2, #4
 8002ebc:	60da      	str	r2, [r3, #12]
      break;
 8002ebe:	e012      	b.n	8002ee6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	68d2      	ldr	r2, [r2, #12]
 8002eca:	f042 0208 	orr.w	r2, r2, #8
 8002ece:	60da      	str	r2, [r3, #12]
      break;
 8002ed0:	e009      	b.n	8002ee6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	68d2      	ldr	r2, [r2, #12]
 8002edc:	f042 0210 	orr.w	r2, r2, #16
 8002ee0:	60da      	str	r2, [r3, #12]
      break;
 8002ee2:	e000      	b.n	8002ee6 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8002ee4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2201      	movs	r2, #1
 8002eec:	6839      	ldr	r1, [r7, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fe18 	bl	8003b24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <HAL_TIM_OC_Start_IT+0x1c4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d107      	bne.n	8002f0e <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <HAL_TIM_OC_Start_IT+0x1c4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00e      	beq.n	8002f36 <HAL_TIM_OC_Start_IT+0x186>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d009      	beq.n	8002f36 <HAL_TIM_OC_Start_IT+0x186>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <HAL_TIM_OC_Start_IT+0x1c8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d004      	beq.n	8002f36 <HAL_TIM_OC_Start_IT+0x186>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <HAL_TIM_OC_Start_IT+0x1cc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d111      	bne.n	8002f5a <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b06      	cmp	r3, #6
 8002f46:	d010      	beq.n	8002f6a <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f58:	e007      	b.n	8002f6a <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40012c00 	.word	0x40012c00
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	40000800 	.word	0x40000800

08002f80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e041      	b.n	8003016 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f839 	bl	800301e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f000 fb30 	bl	8003624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d122      	bne.n	800308c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b02      	cmp	r3, #2
 8003052:	d11b      	bne.n	800308c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0202 	mvn.w	r2, #2
 800305c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 faba 	bl	80035ec <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 faad 	bl	80035da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fabc 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b04      	cmp	r3, #4
 8003098:	d122      	bne.n	80030e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d11b      	bne.n	80030e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0204 	mvn.w	r2, #4
 80030b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fa90 	bl	80035ec <HAL_TIM_IC_CaptureCallback>
 80030cc:	e005      	b.n	80030da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fa83 	bl	80035da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fa92 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d122      	bne.n	8003134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d11b      	bne.n	8003134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0208 	mvn.w	r2, #8
 8003104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2204      	movs	r2, #4
 800310a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa66 	bl	80035ec <HAL_TIM_IC_CaptureCallback>
 8003120:	e005      	b.n	800312e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa59 	bl	80035da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fa68 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2b10      	cmp	r3, #16
 8003140:	d122      	bne.n	8003188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b10      	cmp	r3, #16
 800314e:	d11b      	bne.n	8003188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0210 	mvn.w	r2, #16
 8003158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2208      	movs	r2, #8
 800315e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fa3c 	bl	80035ec <HAL_TIM_IC_CaptureCallback>
 8003174:	e005      	b.n	8003182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fa2f 	bl	80035da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fa3e 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b01      	cmp	r3, #1
 8003194:	d10e      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d107      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0201 	mvn.w	r2, #1
 80031ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fd fd18 	bl	8000be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031be:	2b80      	cmp	r3, #128	; 0x80
 80031c0:	d10e      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031cc:	2b80      	cmp	r3, #128	; 0x80
 80031ce:	d107      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fd7e 	bl	8003cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d10e      	bne.n	800320c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	d107      	bne.n	800320c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fa02 	bl	8003610 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b20      	cmp	r3, #32
 8003218:	d10e      	bne.n	8003238 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b20      	cmp	r3, #32
 8003226:	d107      	bne.n	8003238 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0220 	mvn.w	r2, #32
 8003230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fd49 	bl	8003cca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_TIM_OC_ConfigChannel+0x1a>
 8003256:	2302      	movs	r3, #2
 8003258:	e046      	b.n	80032e8 <HAL_TIM_OC_ConfigChannel+0xa8>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b0c      	cmp	r3, #12
 8003266:	d839      	bhi.n	80032dc <HAL_TIM_OC_ConfigChannel+0x9c>
 8003268:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <HAL_TIM_OC_ConfigChannel+0x30>)
 800326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326e:	bf00      	nop
 8003270:	080032a5 	.word	0x080032a5
 8003274:	080032dd 	.word	0x080032dd
 8003278:	080032dd 	.word	0x080032dd
 800327c:	080032dd 	.word	0x080032dd
 8003280:	080032b3 	.word	0x080032b3
 8003284:	080032dd 	.word	0x080032dd
 8003288:	080032dd 	.word	0x080032dd
 800328c:	080032dd 	.word	0x080032dd
 8003290:	080032c1 	.word	0x080032c1
 8003294:	080032dd 	.word	0x080032dd
 8003298:	080032dd 	.word	0x080032dd
 800329c:	080032dd 	.word	0x080032dd
 80032a0:	080032cf 	.word	0x080032cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fa1c 	bl	80036e8 <TIM_OC1_SetConfig>
      break;
 80032b0:	e015      	b.n	80032de <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fa7b 	bl	80037b4 <TIM_OC2_SetConfig>
      break;
 80032be:	e00e      	b.n	80032de <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fade 	bl	8003888 <TIM_OC3_SetConfig>
      break;
 80032cc:	e007      	b.n	80032de <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fb41 	bl	800395c <TIM_OC4_SetConfig>
      break;
 80032da:	e000      	b.n	80032de <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80032dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003306:	2302      	movs	r3, #2
 8003308:	e0ac      	b.n	8003464 <HAL_TIM_PWM_ConfigChannel+0x174>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b0c      	cmp	r3, #12
 8003316:	f200 809f 	bhi.w	8003458 <HAL_TIM_PWM_ConfigChannel+0x168>
 800331a:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	08003355 	.word	0x08003355
 8003324:	08003459 	.word	0x08003459
 8003328:	08003459 	.word	0x08003459
 800332c:	08003459 	.word	0x08003459
 8003330:	08003395 	.word	0x08003395
 8003334:	08003459 	.word	0x08003459
 8003338:	08003459 	.word	0x08003459
 800333c:	08003459 	.word	0x08003459
 8003340:	080033d7 	.word	0x080033d7
 8003344:	08003459 	.word	0x08003459
 8003348:	08003459 	.word	0x08003459
 800334c:	08003459 	.word	0x08003459
 8003350:	08003417 	.word	0x08003417
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f9c4 	bl	80036e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	6992      	ldr	r2, [r2, #24]
 800336a:	f042 0208 	orr.w	r2, r2, #8
 800336e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	6992      	ldr	r2, [r2, #24]
 800337a:	f022 0204 	bic.w	r2, r2, #4
 800337e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	6991      	ldr	r1, [r2, #24]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	6912      	ldr	r2, [r2, #16]
 800338e:	430a      	orrs	r2, r1
 8003390:	619a      	str	r2, [r3, #24]
      break;
 8003392:	e062      	b.n	800345a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fa0a 	bl	80037b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	6992      	ldr	r2, [r2, #24]
 80033aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	6992      	ldr	r2, [r2, #24]
 80033ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	6991      	ldr	r1, [r2, #24]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	6912      	ldr	r2, [r2, #16]
 80033ce:	0212      	lsls	r2, r2, #8
 80033d0:	430a      	orrs	r2, r1
 80033d2:	619a      	str	r2, [r3, #24]
      break;
 80033d4:	e041      	b.n	800345a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fa53 	bl	8003888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	69d2      	ldr	r2, [r2, #28]
 80033ec:	f042 0208 	orr.w	r2, r2, #8
 80033f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	69d2      	ldr	r2, [r2, #28]
 80033fc:	f022 0204 	bic.w	r2, r2, #4
 8003400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	69d1      	ldr	r1, [r2, #28]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	6912      	ldr	r2, [r2, #16]
 8003410:	430a      	orrs	r2, r1
 8003412:	61da      	str	r2, [r3, #28]
      break;
 8003414:	e021      	b.n	800345a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fa9d 	bl	800395c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	69d2      	ldr	r2, [r2, #28]
 800342c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	69d2      	ldr	r2, [r2, #28]
 800343c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	69d1      	ldr	r1, [r2, #28]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	6912      	ldr	r2, [r2, #16]
 8003450:	0212      	lsls	r2, r2, #8
 8003452:	430a      	orrs	r2, r1
 8003454:	61da      	str	r2, [r3, #28]
      break;
 8003456:	e000      	b.n	800345a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003458:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_TIM_ConfigClockSource+0x18>
 8003480:	2302      	movs	r3, #2
 8003482:	e0a6      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x166>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d067      	beq.n	800358c <HAL_TIM_ConfigClockSource+0x120>
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d80b      	bhi.n	80034d8 <HAL_TIM_ConfigClockSource+0x6c>
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	d073      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0x140>
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d802      	bhi.n	80034ce <HAL_TIM_ConfigClockSource+0x62>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d06f      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034cc:	e078      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d06c      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0x140>
 80034d2:	2b30      	cmp	r3, #48	; 0x30
 80034d4:	d06a      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80034d6:	e073      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034d8:	2b70      	cmp	r3, #112	; 0x70
 80034da:	d00d      	beq.n	80034f8 <HAL_TIM_ConfigClockSource+0x8c>
 80034dc:	2b70      	cmp	r3, #112	; 0x70
 80034de:	d804      	bhi.n	80034ea <HAL_TIM_ConfigClockSource+0x7e>
 80034e0:	2b50      	cmp	r3, #80	; 0x50
 80034e2:	d033      	beq.n	800354c <HAL_TIM_ConfigClockSource+0xe0>
 80034e4:	2b60      	cmp	r3, #96	; 0x60
 80034e6:	d041      	beq.n	800356c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80034e8:	e06a      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ee:	d066      	beq.n	80035be <HAL_TIM_ConfigClockSource+0x152>
 80034f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f4:	d017      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80034f6:	e063      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	6899      	ldr	r1, [r3, #8]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f000 faed 	bl	8003ae6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800351a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	609a      	str	r2, [r3, #8]
      break;
 8003524:	e04c      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6899      	ldr	r1, [r3, #8]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f000 fad6 	bl	8003ae6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	6892      	ldr	r2, [r2, #8]
 8003544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003548:	609a      	str	r2, [r3, #8]
      break;
 800354a:	e039      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	461a      	mov	r2, r3
 800355a:	f000 fa4d 	bl	80039f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2150      	movs	r1, #80	; 0x50
 8003564:	4618      	mov	r0, r3
 8003566:	f000 faa4 	bl	8003ab2 <TIM_ITRx_SetConfig>
      break;
 800356a:	e029      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	461a      	mov	r2, r3
 800357a:	f000 fa6b 	bl	8003a54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2160      	movs	r1, #96	; 0x60
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fa94 	bl	8003ab2 <TIM_ITRx_SetConfig>
      break;
 800358a:	e019      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	461a      	mov	r2, r3
 800359a:	f000 fa2d 	bl	80039f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fa84 	bl	8003ab2 <TIM_ITRx_SetConfig>
      break;
 80035aa:	e009      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 fa7b 	bl	8003ab2 <TIM_ITRx_SetConfig>
        break;
 80035bc:	e000      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80035be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr

080035ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
	...

08003624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a29      	ldr	r2, [pc, #164]	; (80036dc <TIM_Base_SetConfig+0xb8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00b      	beq.n	8003654 <TIM_Base_SetConfig+0x30>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003642:	d007      	beq.n	8003654 <TIM_Base_SetConfig+0x30>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a26      	ldr	r2, [pc, #152]	; (80036e0 <TIM_Base_SetConfig+0xbc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <TIM_Base_SetConfig+0x30>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <TIM_Base_SetConfig+0xc0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d108      	bne.n	8003666 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <TIM_Base_SetConfig+0xb8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00b      	beq.n	8003686 <TIM_Base_SetConfig+0x62>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003674:	d007      	beq.n	8003686 <TIM_Base_SetConfig+0x62>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <TIM_Base_SetConfig+0xbc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d003      	beq.n	8003686 <TIM_Base_SetConfig+0x62>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <TIM_Base_SetConfig+0xc0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d108      	bne.n	8003698 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a07      	ldr	r2, [pc, #28]	; (80036dc <TIM_Base_SetConfig+0xb8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d103      	bne.n	80036cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	615a      	str	r2, [r3, #20]
}
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800

080036e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f023 0201 	bic.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0303 	bic.w	r3, r3, #3
 800371e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f023 0302 	bic.w	r3, r3, #2
 8003730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <TIM_OC1_SetConfig+0xc8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d10c      	bne.n	800375e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f023 0308 	bic.w	r3, r3, #8
 800374a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <TIM_OC1_SetConfig+0xc8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d111      	bne.n	800378a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800376c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	621a      	str	r2, [r3, #32]
}
 80037a4:	bf00      	nop
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40012c00 	.word	0x40012c00

080037b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	f023 0210 	bic.w	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0320 	bic.w	r3, r3, #32
 80037fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <TIM_OC2_SetConfig+0xd0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10d      	bne.n	8003830 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800381a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a14      	ldr	r2, [pc, #80]	; (8003884 <TIM_OC2_SetConfig+0xd0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d113      	bne.n	8003860 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800383e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40012c00 	.word	0x40012c00

08003888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0303 	bic.w	r3, r3, #3
 80038be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <TIM_OC3_SetConfig+0xd0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10d      	bne.n	8003902 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a14      	ldr	r2, [pc, #80]	; (8003958 <TIM_OC3_SetConfig+0xd0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d113      	bne.n	8003932 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	621a      	str	r2, [r3, #32]
}
 800394c:	bf00      	nop
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40012c00 	.word	0x40012c00

0800395c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800398a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	031b      	lsls	r3, r3, #12
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a0f      	ldr	r2, [pc, #60]	; (80039f4 <TIM_OC4_SetConfig+0x98>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d109      	bne.n	80039d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	019b      	lsls	r3, r3, #6
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr
 80039f4:	40012c00 	.word	0x40012c00

080039f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f023 0201 	bic.w	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f023 030a 	bic.w	r3, r3, #10
 8003a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	621a      	str	r2, [r3, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f023 0210 	bic.w	r2, r3, #16
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	031b      	lsls	r3, r3, #12
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	621a      	str	r2, [r3, #32]
}
 8003aa8:	bf00      	nop
 8003aaa:	371c      	adds	r7, #28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f043 0307 	orr.w	r3, r3, #7
 8003ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	609a      	str	r2, [r3, #8]
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr

08003ae6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b087      	sub	sp, #28
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	021a      	lsls	r2, r3, #8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	609a      	str	r2, [r3, #8]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2201      	movs	r2, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1a      	ldr	r2, [r3, #32]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	401a      	ands	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1a      	ldr	r2, [r3, #32]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	621a      	str	r2, [r3, #32]
}
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e046      	b.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00e      	beq.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd0:	d009      	beq.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a10      	ldr	r2, [pc, #64]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d10c      	bne.n	8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr
 8003c1c:	40012c00 	.word	0x40012c00
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800

08003c28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e03d      	b.n	8003cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e03f      	b.n	8003d80 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7fd f895 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2224      	movs	r2, #36	; 0x24
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	68d2      	ldr	r2, [r2, #12]
 8003d2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d30:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fc02 	bl	800453c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	6912      	ldr	r2, [r2, #16]
 8003d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d46:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	6952      	ldr	r2, [r2, #20]
 8003d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d56:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	68d2      	ldr	r2, [r2, #12]
 8003d62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d66:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d130      	bne.n	8003e04 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_UART_Transmit_IT+0x26>
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e029      	b.n	8003e06 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Transmit_IT+0x38>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e022      	b.n	8003e06 <HAL_UART_Transmit_IT+0x7e>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	88fa      	ldrh	r2, [r7, #6]
 8003dd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	88fa      	ldrh	r2, [r7, #6]
 8003dd8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2221      	movs	r2, #33	; 0x21
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	68d2      	ldr	r2, [r2, #12]
 8003dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dfe:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e000      	b.n	8003e06 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003e04:	2302      	movs	r3, #2
  }
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d11d      	bne.n	8003e66 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_UART_Receive_IT+0x26>
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e016      	b.n	8003e68 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_UART_Receive_IT+0x38>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e00f      	b.n	8003e68 <HAL_UART_Receive_IT+0x58>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f9e4 	bl	800422a <UART_Start_Receive_IT>
 8003e62:	4603      	mov	r3, r0
 8003e64:	e000      	b.n	8003e68 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
  }
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10d      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x52>
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fa94 	bl	80043e8 <UART_Receive_IT>
      return;
 8003ec0:	e17c      	b.n	80041bc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80b1 	beq.w	800402c <HAL_UART_IRQHandler+0x1bc>
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <HAL_UART_IRQHandler+0x70>
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80a6 	beq.w	800402c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_UART_IRQHandler+0x90>
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	f043 0201 	orr.w	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_UART_IRQHandler+0xb0>
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	f043 0202 	orr.w	r2, r3, #2
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_UART_IRQHandler+0xd0>
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	f043 0204 	orr.w	r2, r3, #4
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00f      	beq.n	8003f6a <HAL_UART_IRQHandler+0xfa>
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d104      	bne.n	8003f5e <HAL_UART_IRQHandler+0xee>
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0208 	orr.w	r2, r3, #8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 811f 	beq.w	80041b2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <HAL_UART_IRQHandler+0x11e>
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fa2d 	bl	80043e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d102      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x146>
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d031      	beq.n	800401a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f970 	bl	800429c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d023      	beq.n	8004012 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	6952      	ldr	r2, [r2, #20]
 8003fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d013      	beq.n	800400a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	4a77      	ldr	r2, [pc, #476]	; (80041c4 <HAL_UART_IRQHandler+0x354>)
 8003fe8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fd fe1e 	bl	8001c30 <HAL_DMA_Abort_IT>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004004:	4610      	mov	r0, r2
 8004006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	e00e      	b.n	8004028 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8dc 	bl	80041c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004010:	e00a      	b.n	8004028 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8d8 	bl	80041c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004018:	e006      	b.n	8004028 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f8d4 	bl	80041c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004026:	e0c4      	b.n	80041b2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004028:	bf00      	nop
    return;
 800402a:	e0c2      	b.n	80041b2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	2b01      	cmp	r3, #1
 8004032:	f040 80a1 	bne.w	8004178 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 809b 	beq.w	8004178 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8095 	beq.w	8004178 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d04e      	beq.n	8004110 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 800407c:	8a7b      	ldrh	r3, [r7, #18]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8099 	beq.w	80041b6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004088:	8a7a      	ldrh	r2, [r7, #18]
 800408a:	429a      	cmp	r2, r3
 800408c:	f080 8093 	bcs.w	80041b6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8a7a      	ldrh	r2, [r7, #18]
 8004094:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b20      	cmp	r3, #32
 800409e:	d02b      	beq.n	80040f8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	68d2      	ldr	r2, [r2, #12]
 80040aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ae:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	6952      	ldr	r2, [r2, #20]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	6952      	ldr	r2, [r2, #20]
 80040ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ce:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	68d2      	ldr	r2, [r2, #12]
 80040e8:	f022 0210 	bic.w	r2, r2, #16
 80040ec:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fd fd61 	bl	8001bba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004100:	b29b      	uxth	r3, r3
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	b29b      	uxth	r3, r3
 8004106:	4619      	mov	r1, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f866 	bl	80041da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800410e:	e052      	b.n	80041b6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004118:	b29b      	uxth	r3, r3
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d048      	beq.n	80041ba <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004128:	8a3b      	ldrh	r3, [r7, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d045      	beq.n	80041ba <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	68d2      	ldr	r2, [r2, #12]
 8004138:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800413c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	6952      	ldr	r2, [r2, #20]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	68d2      	ldr	r2, [r2, #12]
 8004166:	f022 0210 	bic.w	r2, r2, #16
 800416a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800416c:	8a3b      	ldrh	r3, [r7, #16]
 800416e:	4619      	mov	r1, r3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f832 	bl	80041da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004176:	e020      	b.n	80041ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b00      	cmp	r3, #0
 8004180:	d008      	beq.n	8004194 <HAL_UART_IRQHandler+0x324>
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f8c5 	bl	800431c <UART_Transmit_IT>
    return;
 8004192:	e013      	b.n	80041bc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00e      	beq.n	80041bc <HAL_UART_IRQHandler+0x34c>
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d009      	beq.n	80041bc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f905 	bl	80043b8 <UART_EndTransmit_IT>
    return;
 80041ae:	bf00      	nop
 80041b0:	e004      	b.n	80041bc <HAL_UART_IRQHandler+0x34c>
    return;
 80041b2:	bf00      	nop
 80041b4:	e002      	b.n	80041bc <HAL_UART_IRQHandler+0x34c>
      return;
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <HAL_UART_IRQHandler+0x34c>
      return;
 80041ba:	bf00      	nop
  }
}
 80041bc:	3728      	adds	r7, #40	; 0x28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	080042f5 	.word	0x080042f5

080041c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr

080041da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	460b      	mov	r3, r1
 80041e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	2300      	movs	r3, #0
 80041fe:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004206:	b2db      	uxtb	r3, r3
 8004208:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004210:	b2db      	uxtb	r3, r3
 8004212:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	4313      	orrs	r3, r2
 800421e:	b2db      	uxtb	r3, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	4613      	mov	r3, r2
 8004236:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	88fa      	ldrh	r2, [r7, #6]
 8004242:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2222      	movs	r2, #34	; 0x22
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	68d2      	ldr	r2, [r2, #12]
 800426a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	6952      	ldr	r2, [r2, #20]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	68d2      	ldr	r2, [r2, #12]
 800428a:	f042 0220 	orr.w	r2, r2, #32
 800428e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	68d2      	ldr	r2, [r2, #12]
 80042ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	6952      	ldr	r2, [r2, #20]
 80042be:	f022 0201 	bic.w	r2, r2, #1
 80042c2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d107      	bne.n	80042dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	68d2      	ldr	r2, [r2, #12]
 80042d6:	f022 0210 	bic.w	r2, r2, #16
 80042da:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff ff5a 	bl	80041c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b21      	cmp	r3, #33	; 0x21
 800432e:	d13d      	bne.n	80043ac <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004338:	d113      	bne.n	8004362 <UART_Transmit_IT+0x46>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10f      	bne.n	8004362 <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	8812      	ldrh	r2, [r2, #0]
 8004350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004354:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	1c9a      	adds	r2, r3, #2
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	621a      	str	r2, [r3, #32]
 8004360:	e008      	b.n	8004374 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	1c58      	adds	r0, r3, #1
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	6208      	str	r0, [r1, #32]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29b      	uxth	r3, r3
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4619      	mov	r1, r3
 8004382:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10f      	bne.n	80043a8 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	68d2      	ldr	r2, [r2, #12]
 8004392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004396:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	68d2      	ldr	r2, [r2, #12]
 80043a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr

080043b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	68d2      	ldr	r2, [r2, #12]
 80043ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f001 fc37 	bl	8005c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b22      	cmp	r3, #34	; 0x22
 80043fa:	f040 8099 	bne.w	8004530 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004406:	d117      	bne.n	8004438 <UART_Receive_IT+0x50>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d113      	bne.n	8004438 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004418:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	b29b      	uxth	r3, r3
 8004422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004426:	b29a      	uxth	r2, r3
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	1c9a      	adds	r2, r3, #2
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	629a      	str	r2, [r3, #40]	; 0x28
 8004436:	e026      	b.n	8004486 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444a:	d007      	beq.n	800445c <UART_Receive_IT+0x74>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <UART_Receive_IT+0x82>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d106      	bne.n	800446a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	e008      	b.n	800447c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004476:	b2da      	uxtb	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29b      	uxth	r3, r3
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4619      	mov	r1, r3
 8004494:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004496:	2b00      	cmp	r3, #0
 8004498:	d148      	bne.n	800452c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	68d2      	ldr	r2, [r2, #12]
 80044a4:	f022 0220 	bic.w	r2, r2, #32
 80044a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	68d2      	ldr	r2, [r2, #12]
 80044b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	6952      	ldr	r2, [r2, #20]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d123      	bne.n	8004522 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	68d2      	ldr	r2, [r2, #12]
 80044ea:	f022 0210 	bic.w	r2, r2, #16
 80044ee:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d10a      	bne.n	8004514 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7ff fe5d 	bl	80041da <HAL_UARTEx_RxEventCallback>
 8004520:	e002      	b.n	8004528 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f001 fbd0 	bl	8005cc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	e002      	b.n	8004532 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	e000      	b.n	8004532 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004530:	2302      	movs	r3, #2
  }
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800453c:	b590      	push	{r4, r7, lr}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	6912      	ldr	r2, [r2, #16]
 800454e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	68d2      	ldr	r2, [r2, #12]
 8004556:	430a      	orrs	r2, r1
 8004558:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800457a:	f023 030c 	bic.w	r3, r3, #12
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	430b      	orrs	r3, r1
 8004582:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	6952      	ldr	r2, [r2, #20]
 800458e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6992      	ldr	r2, [r2, #24]
 8004596:	430a      	orrs	r2, r1
 8004598:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a2c      	ldr	r2, [pc, #176]	; (8004650 <UART_SetConfig+0x114>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d103      	bne.n	80045ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045a4:	f7fe f936 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	e002      	b.n	80045b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045ac:	f7fe f91e 	bl	80027ec <HAL_RCC_GetPCLK1Freq>
 80045b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6819      	ldr	r1, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009a      	lsls	r2, r3, #2
 80045c0:	441a      	add	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	4a21      	ldr	r2, [pc, #132]	; (8004654 <UART_SetConfig+0x118>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	0118      	lsls	r0, r3, #4
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	009a      	lsls	r2, r3, #2
 80045e0:	441a      	add	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045ec:	4b19      	ldr	r3, [pc, #100]	; (8004654 <UART_SetConfig+0x118>)
 80045ee:	fba3 4302 	umull	r4, r3, r3, r2
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	2464      	movs	r4, #100	; 0x64
 80045f6:	fb04 f303 	mul.w	r3, r4, r3
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	3332      	adds	r3, #50	; 0x32
 8004600:	4a14      	ldr	r2, [pc, #80]	; (8004654 <UART_SetConfig+0x118>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460c:	4418      	add	r0, r3
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009a      	lsls	r2, r3, #2
 8004618:	441a      	add	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	fbb2 f2f3 	udiv	r2, r2, r3
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <UART_SetConfig+0x118>)
 8004626:	fba3 4302 	umull	r4, r3, r3, r2
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	2464      	movs	r4, #100	; 0x64
 800462e:	fb04 f303 	mul.w	r3, r4, r3
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	3332      	adds	r3, #50	; 0x32
 8004638:	4a06      	ldr	r2, [pc, #24]	; (8004654 <UART_SetConfig+0x118>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	4403      	add	r3, r0
 8004646:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	bd90      	pop	{r4, r7, pc}
 8004650:	40013800 	.word	0x40013800
 8004654:	51eb851f 	.word	0x51eb851f

08004658 <RingAdd>:




void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800466a:	4619      	mov	r1, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004678:	3301      	adds	r3, #1
 800467a:	425a      	negs	r2, r3
 800467c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004680:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004684:	bf58      	it	pl
 8004686:	4253      	negpl	r3, r2
 8004688:	b2da      	uxtb	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8004696:	2b80      	cmp	r3, #128	; 0x80
 8004698:	d10f      	bne.n	80046ba <RingAdd+0x62>
	{
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046a0:	3301      	adds	r3, #1
 80046a2:	425a      	negs	r2, r3
 80046a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046ac:	bf58      	it	pl
 80046ae:	4253      	negpl	r3, r2
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	else
	{
		xRingBuffer->u8available++;
	}

}
 80046b8:	e007      	b.n	80046ca <RingAdd+0x72>
		xRingBuffer->u8available++;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80046c0:	3301      	adds	r3, #1
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <RingGetAllBytes>:

uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80046e4:	461a      	mov	r2, r3
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f805 	bl	80046f8 <RingGetNBytes>
 80046ee:	4603      	mov	r3, r0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <RingGetNBytes>:

uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	4613      	mov	r3, r2
 8004704:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <RingGetNBytes+0x1e>
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <RingGetNBytes+0x22>
 8004716:	2300      	movs	r3, #0
 8004718:	e037      	b.n	800478a <RingGetNBytes+0x92>
	if(uNumber > MAX_BUFFER) return 0;
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	2b80      	cmp	r3, #128	; 0x80
 800471e:	d901      	bls.n	8004724 <RingGetNBytes+0x2c>
 8004720:	2300      	movs	r3, #0
 8004722:	e032      	b.n	800478a <RingGetNBytes+0x92>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8004724:	2300      	movs	r3, #0
 8004726:	75fb      	strb	r3, [r7, #23]
 8004728:	e01b      	b.n	8004762 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	4413      	add	r3, r2
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8004736:	4611      	mov	r1, r2
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	5c52      	ldrb	r2, [r2, r1]
 800473c:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004744:	3301      	adds	r3, #1
 8004746:	425a      	negs	r2, r3
 8004748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800474c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004750:	bf58      	it	pl
 8004752:	4253      	negpl	r3, r2
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	3301      	adds	r3, #1
 8004760:	75fb      	strb	r3, [r7, #23]
 8004762:	7dfa      	ldrb	r2, [r7, #23]
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	429a      	cmp	r2, r3
 8004768:	d205      	bcs.n	8004776 <RingGetNBytes+0x7e>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8004770:	7dfa      	ldrb	r2, [r7, #23]
 8004772:	429a      	cmp	r2, r3
 8004774:	d3d9      	bcc.n	800472a <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800477c:	7dfb      	ldrb	r3, [r7, #23]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	b2da      	uxtb	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

	return uCounter;
 8004788:	7dfb      	ldrb	r3, [r7, #23]
}
 800478a:	4618      	mov	r0, r3
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <RingCountBytes>:

uint8_t RingCountBytes(modbusRingBuffer_t *xRingBuffer)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
return xRingBuffer->u8available;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <RingClear>:

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr
	...

080047d8 <ModbusInit>:
 * @param EN_Port_v port for txen RS-485
 * @param EN_Pin_v pin for txen RS-485 (NULL means RS232C mode)
 * @ingroup setup
 */
void ModbusInit(modbusHandler_t * modH)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af02      	add	r7, sp, #8
 80047de:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 80047e0:	4b43      	ldr	r3, [pc, #268]	; (80048f0 <ModbusInit+0x118>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d87f      	bhi.n	80048e8 <ModbusInit+0x110>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	33c8      	adds	r3, #200	; 0xc8
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff ffdd 	bl	80047ac <RingClear>

	  if(modH->uiModbusType == SLAVE_RTU)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d109      	bne.n	800480e <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
	  	  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 80047fa:	4a3e      	ldr	r2, [pc, #248]	; (80048f4 <ModbusInit+0x11c>)
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	483e      	ldr	r0, [pc, #248]	; (80048f8 <ModbusInit+0x120>)
 8004800:	f001 fb28 	bl	8005e54 <osThreadNew>
 8004804:	4602      	mov	r2, r0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800480c:	e034      	b.n	8004878 <ModbusInit+0xa0>
	  }
	  else if (modH->uiModbusType == MASTER_RTU)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b04      	cmp	r3, #4
 8004814:	d12f      	bne.n	8004876 <ModbusInit+0x9e>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8004816:	4a39      	ldr	r2, [pc, #228]	; (80048fc <ModbusInit+0x124>)
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4839      	ldr	r0, [pc, #228]	; (8004900 <ModbusInit+0x128>)
 800481c:	f001 fb1a 	bl	8005e54 <osThreadNew>
 8004820:	4602      	mov	r2, r0
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800482e:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8004836:	4b33      	ldr	r3, [pc, #204]	; (8004904 <ModbusInit+0x12c>)
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	4613      	mov	r3, r2
 800483c:	2200      	movs	r2, #0
 800483e:	4832      	ldr	r0, [pc, #200]	; (8004908 <ModbusInit+0x130>)
 8004840:	f004 fa72 	bl	8008d28 <xTimerCreate>
 8004844:	4602      	mov	r2, r0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d100      	bne.n	8004858 <ModbusInit+0x80>
		  {
			  while(1); //error creating timer, check heap and stack size
 8004856:	e7fe      	b.n	8004856 <ModbusInit+0x7e>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8004858:	4a2c      	ldr	r2, [pc, #176]	; (800490c <ModbusInit+0x134>)
 800485a:	2110      	movs	r1, #16
 800485c:	2002      	movs	r0, #2
 800485e:	f001 fc6f 	bl	8006140 <osMessageQueueNew>
 8004862:	4602      	mov	r2, r0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

		  if(modH->QueueTelegramHandle == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <ModbusInit+0xa0>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8004874:	e7fe      	b.n	8004874 <ModbusInit+0x9c>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8004876:	e7fe      	b.n	8004876 <ModbusInit+0x9e>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d100      	bne.n	8004884 <ModbusInit+0xac>
	  {
		  while(1); //Error creating modbus task, check heap and stack size
 8004882:	e7fe      	b.n	8004882 <ModbusInit+0xaa>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	5 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800488a:	4b21      	ldr	r3, [pc, #132]	; (8004910 <ModbusInit+0x138>)
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	4613      	mov	r3, r2
 8004890:	2200      	movs	r2, #0
 8004892:	2105      	movs	r1, #5
 8004894:	481f      	ldr	r0, [pc, #124]	; (8004914 <ModbusInit+0x13c>)
 8004896:	f004 fa47 	bl	8008d28 <xTimerCreate>
 800489a:	4602      	mov	r2, r0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d100      	bne.n	80048ae <ModbusInit+0xd6>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 80048ac:	e7fe      	b.n	80048ac <ModbusInit+0xd4>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 80048ae:	4a1a      	ldr	r2, [pc, #104]	; (8004918 <ModbusInit+0x140>)
 80048b0:	2101      	movs	r1, #1
 80048b2:	2001      	movs	r0, #1
 80048b4:	f001 fba6 	bl	8006004 <osSemaphoreNew>
 80048b8:	4602      	mov	r2, r0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	  if(modH->ModBusSphrHandle == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d100      	bne.n	80048cc <ModbusInit+0xf4>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 80048ca:	e7fe      	b.n	80048ca <ModbusInit+0xf2>
	  }

	  mHandlers[numberHandlers] = modH;
 80048cc:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <ModbusInit+0x118>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	4619      	mov	r1, r3
 80048d2:	4a12      	ldr	r2, [pc, #72]	; (800491c <ModbusInit+0x144>)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 80048da:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <ModbusInit+0x118>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	3301      	adds	r3, #1
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <ModbusInit+0x118>)
 80048e4:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 80048e6:	e000      	b.n	80048ea <ModbusInit+0x112>
	  while(1); //error no more Modbus handlers supported
 80048e8:	e7fe      	b.n	80048e8 <ModbusInit+0x110>
}
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20000031 	.word	0x20000031
 80048f4:	08009554 	.word	0x08009554
 80048f8:	08004a95 	.word	0x08004a95
 80048fc:	08009578 	.word	0x08009578
 8004900:	08004f09 	.word	0x08004f09
 8004904:	08004a3d 	.word	0x08004a3d
 8004908:	080094a8 	.word	0x080094a8
 800490c:	0800953c 	.word	0x0800953c
 8004910:	080049bd 	.word	0x080049bd
 8004914:	080094b8 	.word	0x080094b8
 8004918:	0800959c 	.word	0x0800959c
 800491c:	2000193c 	.word	0x2000193c

08004920 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

	if (modH->EN_Port != NULL )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <ModbusStart+0x20>
    {
        // return RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68d8      	ldr	r0, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8a1b      	ldrh	r3, [r3, #16]
 8004938:	2200      	movs	r2, #0
 800493a:	4619      	mov	r1, r3
 800493c:	f7fd fb4e 	bl	8001fdc <HAL_GPIO_WritePin>
    }

    if (modH->uiModbusType == SLAVE_RTU &&  modH->au16regs == NULL )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b03      	cmp	r3, #3
 8004946:	d105      	bne.n	8004954 <ModbusStart+0x34>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800494e:	2b00      	cmp	r3, #0
 8004950:	d100      	bne.n	8004954 <ModbusStart+0x34>
    {
    	while(1); //ERROR define the DATA pointer shared through Modbus
 8004952:	e7fe      	b.n	8004952 <ModbusStart+0x32>
    }

    //check that port is initialized
    while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8004954:	bf00      	nop
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fc48 	bl	80041f0 <HAL_UART_GetState>
 8004960:	4603      	mov	r3, r0
 8004962:	2b20      	cmp	r3, #32
 8004964:	d1f7      	bne.n	8004956 <ModbusStart+0x36>
    {
    }
    // Receive data from serial port for Modbus using interrupt
    if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6858      	ldr	r0, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	33b2      	adds	r3, #178	; 0xb2
 800496e:	2201      	movs	r2, #1
 8004970:	4619      	mov	r1, r3
 8004972:	f7ff fa4d 	bl	8003e10 <HAL_UART_Receive_IT>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d000      	beq.n	800497e <ModbusStart+0x5e>
    {
        while(1)
 800497c:	e7fe      	b.n	800497c <ModbusStart+0x5c>
        {
        }
    }

    modH->u8lastRec = modH->u8BufferSize = 0;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
#if ENABLE_USB_CDC ==1
    modH->u8TypeHW = USART_HW;
#endif
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e02a      	b.n	8004a20 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 80049ca:	4a1a      	ldr	r2, [pc, #104]	; (8004a34 <vTimerCallbackT35+0x78>)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d11e      	bne.n	8004a1a <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uiModbusType == MASTER_RTU)
 80049dc:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <vTimerCallbackT35+0x78>)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d10c      	bne.n	8004a04 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 80049ea:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <vTimerCallbackT35+0x78>)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80049f6:	2300      	movs	r3, #0
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	2300      	movs	r3, #0
 80049fc:	2200      	movs	r2, #0
 80049fe:	2103      	movs	r1, #3
 8004a00:	f004 f9e4 	bl	8008dcc <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8004a04:	4a0b      	ldr	r2, [pc, #44]	; (8004a34 <vTimerCallbackT35+0x78>)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0c:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8004a10:	2300      	movs	r3, #0
 8004a12:	2203      	movs	r2, #3
 8004a14:	2100      	movs	r1, #0
 8004a16:	f003 ff81 	bl	800891c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <vTimerCallbackT35+0x7c>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	dcce      	bgt.n	80049ca <vTimerCallbackT35+0xe>
		}

	}
}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	2000193c 	.word	0x2000193c
 8004a38:	20000031 	.word	0x20000031

08004a3c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	e016      	b.n	8004a78 <vTimerCallbackTimeout+0x3c>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8004a4a:	4a10      	ldr	r2, [pc, #64]	; (8004a8c <vTimerCallbackTimeout+0x50>)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a52:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d10a      	bne.n	8004a72 <vTimerCallbackTimeout+0x36>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
 8004a5c:	4a0b      	ldr	r2, [pc, #44]	; (8004a8c <vTimerCallbackTimeout+0x50>)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a64:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8004a68:	2300      	movs	r3, #0
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	21ff      	movs	r1, #255	; 0xff
 8004a6e:	f003 ff55 	bl	800891c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <vTimerCallbackTimeout+0x54>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	dce2      	bgt.n	8004a4a <vTimerCallbackTimeout+0xe>
		}

	}

}
 8004a84:	bf00      	nop
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	2000193c 	.word	0x2000193c
 8004a90:	20000031 	.word	0x20000031

08004a94 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]
  int8_t i8state;

  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block indefinitely until a Modbus Frame arrives */
 8004aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	f003 fef1 	bl	800888c <ulTaskNotifyTake>

	  modH->i8lastError = 0;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	749a      	strb	r2, [r3, #18]
	  }


#else

	  modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	33c8      	adds	r3, #200	; 0xc8
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fe6d 	bl	8004794 <RingCountBytes>
 8004aba:	4603      	mov	r3, r0
 8004abc:	461a      	mov	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	  if (modH->EN_Port != NULL )
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <StartTaskModbusSlave+0x48>
	  {
	   	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET); // is this required?
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	68d8      	ldr	r0, [r3, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8a1b      	ldrh	r3, [r3, #16]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	f7fd fa80 	bl	8001fdc <HAL_GPIO_WritePin>
	  }
 	  i8state = getRxBuffer(modH);
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fbdd 	bl	800529c <getRxBuffer>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	72fb      	strb	r3, [r7, #11]

#endif


	  if (i8state < 7){
 8004ae6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004aea:	2b06      	cmp	r3, #6
 8004aec:	dc0b      	bgt.n	8004b06 <StartTaskModbusSlave+0x72>
		  //The size of the frame is invalid
		  modH->i8lastError = ERR_BAD_SIZE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	22fa      	movs	r2, #250	; 0xfa
 8004af2:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004afa:	3301      	adds	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  //RingClear(modH->xBufferRX); //this is not necessary the ring buffer is cleaned by the read operation
		  continue;
 8004b04:	e093      	b.n	8004c2e <StartTaskModbusSlave+0x19a>
	  }


		// check slave id
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	7cda      	ldrb	r2, [r3, #19]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	7a1b      	ldrb	r3, [r3, #8]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	f040 808c 	bne.w	8004c2c <StartTaskModbusSlave+0x198>

	  // validate message: CRC, FCT, address and size
	  uint8_t u8exception = validateRequest(modH);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fc05 	bl	8005324 <validateRequest>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	72bb      	strb	r3, [r7, #10]
	  if (u8exception > 0)
 8004b1e:	7abb      	ldrb	r3, [r7, #10]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00f      	beq.n	8004b44 <StartTaskModbusSlave+0xb0>
	  {
		  if (u8exception != NO_REPLY)
 8004b24:	7abb      	ldrb	r3, [r7, #10]
 8004b26:	2bff      	cmp	r3, #255	; 0xff
 8004b28:	d007      	beq.n	8004b3a <StartTaskModbusSlave+0xa6>
		  {
			  buildException( u8exception, modH);
 8004b2a:	7abb      	ldrb	r3, [r7, #10]
 8004b2c:	68f9      	ldr	r1, [r7, #12]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fd48 	bl	80055c4 <buildException>
			  sendTxBuffer(modH);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fd63 	bl	8005600 <sendTxBuffer>
		  }
		  modH->i8lastError = u8exception;
 8004b3a:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	749a      	strb	r2, [r3, #18]
		  //return u8exception
		  continue;
 8004b42:	e074      	b.n	8004c2e <StartTaskModbusSlave+0x19a>
	  }

	  //u32timeOut = millis(); TODO is this really need?
	  modH->i8lastError = 0;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	749a      	strb	r2, [r3, #18]


	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004b50:	f04f 31ff 	mov.w	r1, #4294967295
 8004b54:	4618      	mov	r0, r3
 8004b56:	f002 fc1b 	bl	8007390 <xQueueSemaphoreTake>

	  // process message
	    switch(modH->au8Buffer[ FUNC ] )
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	7d1b      	ldrb	r3, [r3, #20]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	2b0f      	cmp	r3, #15
 8004b62:	d859      	bhi.n	8004c18 <StartTaskModbusSlave+0x184>
 8004b64:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <StartTaskModbusSlave+0xd8>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004bad 	.word	0x08004bad
 8004b70:	08004bad 	.word	0x08004bad
 8004b74:	08004bbf 	.word	0x08004bbf
 8004b78:	08004bbf 	.word	0x08004bbf
 8004b7c:	08004bd1 	.word	0x08004bd1
 8004b80:	08004be3 	.word	0x08004be3
 8004b84:	08004c19 	.word	0x08004c19
 8004b88:	08004c19 	.word	0x08004c19
 8004b8c:	08004c19 	.word	0x08004c19
 8004b90:	08004c19 	.word	0x08004c19
 8004b94:	08004c19 	.word	0x08004c19
 8004b98:	08004c19 	.word	0x08004c19
 8004b9c:	08004c19 	.word	0x08004c19
 8004ba0:	08004c19 	.word	0x08004c19
 8004ba4:	08004bf5 	.word	0x08004bf5
 8004ba8:	08004c07 	.word	0x08004c07
	    {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 fdb9 	bl	8005724 <process_FC1>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 8004bbc:	e02d      	b.n	8004c1a <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fe68 	bl	8005894 <process_FC3>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 8004bce:	e024      	b.n	8004c1a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 feca 	bl	800596a <process_FC5>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 8004be0:	e01b      	b.n	8004c1a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 ff1b 	bl	8005a1e <process_FC6>
 8004be8:	4603      	mov	r3, r0
 8004bea:	461a      	mov	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 8004bf2:	e012      	b.n	8004c1a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 ff44 	bl	8005a82 <process_FC15>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 8004c04:	e009      	b.n	8004c1a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 ffca 	bl	8005ba0 <process_FC16>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
				break;
 8004c16:	e000      	b.n	8004c1a <StartTaskModbusSlave+0x186>
			default:
				break;
 8004c18:	bf00      	nop
	    }

	    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8004c20:	2300      	movs	r3, #0
 8004c22:	2200      	movs	r2, #0
 8004c24:	2100      	movs	r1, #0
 8004c26:	f002 f949 	bl	8006ebc <xQueueGenericSend>
	    //return i8state;
	    continue;
 8004c2a:	e000      	b.n	8004c2e <StartTaskModbusSlave+0x19a>
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 8004c2c:	bf00      	nop
  {
 8004c2e:	e737      	b.n	8004aa0 <StartTaskModbusSlave+0xc>

08004c30 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8004c30:	b084      	sub	sp, #16
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	f107 001c 	add.w	r0, r7, #28
 8004c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c50:	4618      	mov	r0, r3
 8004c52:	f002 fb9d 	bl	8007390 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	7a1b      	ldrb	r3, [r3, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <SendQuery+0x32>
 8004c5e:	23ff      	movs	r3, #255	; 0xff
 8004c60:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f993 30b3 	ldrsb.w	r3, [r3, #179]	; 0xb3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <SendQuery+0x40>
 8004c6c:	23fe      	movs	r3, #254	; 0xfe
 8004c6e:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8004c70:	7f3b      	ldrb	r3, [r7, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <SendQuery+0x4c>
 8004c76:	7f3b      	ldrb	r3, [r7, #28]
 8004c78:	2bf7      	cmp	r3, #247	; 0xf7
 8004c7a:	d901      	bls.n	8004c80 <SendQuery+0x50>
 8004c7c:	23f7      	movs	r3, #247	; 0xf7
 8004c7e:	73bb      	strb	r3, [r7, #14]

	if(error)
 8004c80:	7bbb      	ldrb	r3, [r7, #14]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00e      	beq.n	8004ca4 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 8004c86:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8004c94:	2300      	movs	r3, #0
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	f002 f90f 	bl	8006ebc <xQueueGenericSend>
		 return error;
 8004c9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ca2:	e129      	b.n	8004ef8 <SendQuery+0x2c8>
	}


	modH->au16regs = telegram.au16reg;
 8004ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->au8Buffer[ ID ]         = telegram.u8id;
 8004cac:	7f3a      	ldrb	r2, [r7, #28]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	74da      	strb	r2, [r3, #19]
	modH->au8Buffer[ FUNC ]       = telegram.u8fct;
 8004cb2:	7f7a      	ldrb	r2, [r7, #29]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	751a      	strb	r2, [r3, #20]
	modH->au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8004cb8:	8bfb      	ldrh	r3, [r7, #30]
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	755a      	strb	r2, [r3, #21]
	modH->au8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8004cc4:	8bfb      	ldrh	r3, [r7, #30]
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8004ccc:	7f7b      	ldrb	r3, [r7, #29]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	2b0f      	cmp	r3, #15
 8004cd2:	f200 80fe 	bhi.w	8004ed2 <SendQuery+0x2a2>
 8004cd6:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <SendQuery+0xac>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004d1d 	.word	0x08004d1d
 8004ce0:	08004d1d 	.word	0x08004d1d
 8004ce4:	08004d1d 	.word	0x08004d1d
 8004ce8:	08004d1d 	.word	0x08004d1d
 8004cec:	08004d3b 	.word	0x08004d3b
 8004cf0:	08004d5d 	.word	0x08004d5d
 8004cf4:	08004ed3 	.word	0x08004ed3
 8004cf8:	08004ed3 	.word	0x08004ed3
 8004cfc:	08004ed3 	.word	0x08004ed3
 8004d00:	08004ed3 	.word	0x08004ed3
 8004d04:	08004ed3 	.word	0x08004ed3
 8004d08:	08004ed3 	.word	0x08004ed3
 8004d0c:	08004ed3 	.word	0x08004ed3
 8004d10:	08004ed3 	.word	0x08004ed3
 8004d14:	08004d7f 	.word	0x08004d7f
 8004d18:	08004e3d 	.word	0x08004e3d
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8004d1c:	8c3b      	ldrh	r3, [r7, #32]
 8004d1e:	0a1b      	lsrs	r3, r3, #8
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8004d28:	8c3b      	ldrh	r3, [r7, #32]
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2206      	movs	r2, #6
 8004d34:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8004d38:	e0cb      	b.n	8004ed2 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->au8Buffer[ NB_HI ]      = (( telegram.au16reg[0]> 0) ? 0xff : 0);
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <SendQuery+0x116>
 8004d42:	22ff      	movs	r2, #255	; 0xff
 8004d44:	e000      	b.n	8004d48 <SendQuery+0x118>
 8004d46:	2200      	movs	r2, #0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = 0;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2206      	movs	r2, #6
 8004d56:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8004d5a:	e0ba      	b.n	8004ed2 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte( telegram.au16reg[0]);
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.au16reg[0]);
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2206      	movs	r2, #6
 8004d78:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8004d7c:	e0a9      	b.n	8004ed2 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8004d7e:	8c3b      	ldrh	r3, [r7, #32]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 8004d86:	7a7b      	ldrb	r3, [r7, #9]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8004d8c:	8c3b      	ldrh	r3, [r7, #32]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <SendQuery+0x174>
	    {
	        u8bytesno++;
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 8004d9e:	7a7b      	ldrb	r3, [r7, #9]
 8004da0:	3301      	adds	r3, #1
 8004da2:	727b      	strb	r3, [r7, #9]
	    }

	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8004da4:	8c3b      	ldrh	r3, [r7, #32]
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8004db0:	8c3b      	ldrh	r3, [r7, #32]
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = u8bytesno;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2207      	movs	r2, #7
 8004dc2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	81bb      	strh	r3, [r7, #12]
 8004dca:	e031      	b.n	8004e30 <SendQuery+0x200>
	    {
	        if(i%2)
 8004dcc:	89bb      	ldrh	r3, [r7, #12]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00f      	beq.n	8004df8 <SendQuery+0x1c8>
	        {
	        	modH->au8Buffer[ modH->u8BufferSize ] = lowByte( telegram.au16reg[ i/2 ] );
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004dde:	4619      	mov	r1, r3
 8004de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de2:	89bb      	ldrh	r3, [r7, #12]
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	440b      	add	r3, r1
 8004df4:	74da      	strb	r2, [r3, #19]
 8004df6:	e010      	b.n	8004e1a <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->au8Buffer[  modH->u8BufferSize ] = highByte( telegram.au16reg[ i/2 ] );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e02:	89bb      	ldrh	r3, [r7, #12]
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	4413      	add	r3, r2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	440b      	add	r3, r1
 8004e18:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004e20:	3301      	adds	r3, #1
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8004e2a:	89bb      	ldrh	r3, [r7, #12]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	81bb      	strh	r3, [r7, #12]
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	89ba      	ldrh	r2, [r7, #12]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d3c8      	bcc.n	8004dcc <SendQuery+0x19c>
	    }
	    break;
 8004e3a:	e04a      	b.n	8004ed2 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8004e3c:	8c3b      	ldrh	r3, [r7, #32]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8004e48:	8c3b      	ldrh	r3, [r7, #32]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8004e50:	8c3b      	ldrh	r3, [r7, #32]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2207      	movs	r2, #7
 8004e60:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8004e64:	2300      	movs	r3, #0
 8004e66:	817b      	strh	r3, [r7, #10]
 8004e68:	e02e      	b.n	8004ec8 <SendQuery+0x298>
	    {

	        modH->au8Buffer[  modH->u8BufferSize ] = highByte(  telegram.au16reg[ i ] );
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004e70:	4619      	mov	r1, r3
 8004e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e74:	897b      	ldrh	r3, [r7, #10]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	440b      	add	r3, r1
 8004e86:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004e8e:	3301      	adds	r3, #1
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte( telegram.au16reg[ i ] );
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea2:	897b      	ldrh	r3, [r7, #10]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	4413      	add	r3, r2
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	440b      	add	r3, r1
 8004eb0:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004eb8:	3301      	adds	r3, #1
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8004ec2:	897b      	ldrh	r3, [r7, #10]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	817b      	strh	r3, [r7, #10]
 8004ec8:	8c3b      	ldrh	r3, [r7, #32]
 8004eca:	897a      	ldrh	r2, [r7, #10]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d3cc      	bcc.n	8004e6a <SendQuery+0x23a>
	    }
	    break;
 8004ed0:	bf00      	nop
	}

	xSemaphoreGive(modH->ModBusSphrHandle);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8004ed8:	2300      	movs	r3, #0
 8004eda:	2200      	movs	r2, #0
 8004edc:	2100      	movs	r1, #0
 8004ede:	f001 ffed 	bl	8006ebc <xQueueGenericSend>

	sendTxBuffer(modH);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fb8c 	bl	8005600 <sendTxBuffer>
	modH->i8state = COM_WAITING;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	modH->i8lastError = 0;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	749a      	strb	r2, [r3, #18]
	return 0;
 8004ef6:	2300      	movs	r3, #0


}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f02:	b004      	add	sp, #16
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop

08004f08 <StartTaskModbusMaster>:




void StartTaskModbusMaster(void *argument)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08c      	sub	sp, #48	; 0x30
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
  int8_t i8state;

  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f1a:	f107 010c 	add.w	r1, r7, #12
 8004f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f22:	4618      	mov	r0, r3
 8004f24:	f002 f958 	bl	80071d8 <xQueueReceive>

	  /*Format and Send query */
	  SendQuery(modH, telegram);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	f107 030c 	add.w	r3, r7, #12
 8004f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f34:	f7ff fe7c 	bl	8004c30 <SendQuery>

	  /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
	  ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8004f38:	f04f 31ff 	mov.w	r1, #4294967295
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	f003 fca5 	bl	800888c <ulTaskNotifyTake>
 8004f42:	6238      	str	r0, [r7, #32]
	  modH->i8lastError = 0;
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	2200      	movs	r2, #0
 8004f48:	749a      	strb	r2, [r3, #18]

      if(ulNotificationValue == NO_REPLY)
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	2bff      	cmp	r3, #255	; 0xff
 8004f4e:	d118      	bne.n	8004f82 <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    	  modH->i8lastError = NO_REPLY;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	22ff      	movs	r2, #255	; 0xff
 8004f5c:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004f64:	3301      	adds	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004f6e:	69b8      	ldr	r0, [r7, #24]
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8004f76:	4619      	mov	r1, r3
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	f003 fcce 	bl	800891c <xTaskGenericNotify>
    	  continue;
 8004f80:	e097      	b.n	80050b2 <StartTaskModbusMaster+0x1aa>
      {
    	  i8state = getRxBuffer(modH);
      }

#else
      i8state = getRxBuffer(modH);
 8004f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f84:	f000 f98a 	bl	800529c <getRxBuffer>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	77fb      	strb	r3, [r7, #31]
#endif

	  //modH->u8lastError = i8state;

	  if (i8state < 6){
 8004f8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f90:	2b05      	cmp	r3, #5
 8004f92:	dc18      	bgt.n	8004fc6 <StartTaskModbusMaster+0xbe>

		  modH->i8state = COM_IDLE;
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
		  modH->i8lastError = ERR_BAD_SIZE;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	22fa      	movs	r2, #250	; 0xfa
 8004fa0:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004fa8:	3301      	adds	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004fb2:	69b8      	ldr	r0, [r7, #24]
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	f003 fcac 	bl	800891c <xTaskGenericNotify>
		  continue;
 8004fc4:	e075      	b.n	80050b2 <StartTaskModbusMaster+0x1aa>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2103      	movs	r1, #3
 8004fd6:	f003 fef9 	bl	8008dcc <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8004fda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fdc:	f000 f8f0 	bl	80051c0 <validateAnswer>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	77bb      	strb	r3, [r7, #30]
	  if (u8exception != 0)
 8004fe4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d010      	beq.n	800500e <StartTaskModbusMaster+0x106>
	  {
		 modH->i8state = COM_IDLE;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
         modH->i8lastError = u8exception;
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	7fba      	ldrb	r2, [r7, #30]
 8004ff8:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004ffa:	69b8      	ldr	r0, [r7, #24]
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8005002:	4619      	mov	r1, r3
 8005004:	2300      	movs	r3, #0
 8005006:	2203      	movs	r2, #3
 8005008:	f003 fc88 	bl	800891c <xTaskGenericNotify>
	     continue;
 800500c:	e051      	b.n	80050b2 <StartTaskModbusMaster+0x1aa>
	  }



	  modH->i8lastError = u8exception;
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	7fba      	ldrb	r2, [r7, #30]
 8005012:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800501a:	f04f 31ff 	mov.w	r1, #4294967295
 800501e:	4618      	mov	r0, r3
 8005020:	f002 f9b6 	bl	8007390 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->au8Buffer[ FUNC ] )
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	7d1b      	ldrb	r3, [r3, #20]
 8005028:	3b01      	subs	r3, #1
 800502a:	2b0f      	cmp	r3, #15
 800502c:	d82a      	bhi.n	8005084 <StartTaskModbusMaster+0x17c>
 800502e:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <StartTaskModbusMaster+0x12c>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	08005075 	.word	0x08005075
 8005038:	08005075 	.word	0x08005075
 800503c:	0800507d 	.word	0x0800507d
 8005040:	0800507d 	.word	0x0800507d
 8005044:	08005085 	.word	0x08005085
 8005048:	08005085 	.word	0x08005085
 800504c:	08005085 	.word	0x08005085
 8005050:	08005085 	.word	0x08005085
 8005054:	08005085 	.word	0x08005085
 8005058:	08005085 	.word	0x08005085
 800505c:	08005085 	.word	0x08005085
 8005060:	08005085 	.word	0x08005085
 8005064:	08005085 	.word	0x08005085
 8005068:	08005085 	.word	0x08005085
 800506c:	08005085 	.word	0x08005085
 8005070:	08005085 	.word	0x08005085
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to au16regs buffer
	      get_FC1(modH);
 8005074:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005076:	f000 f81d 	bl	80050b4 <get_FC1>
	      break;
 800507a:	e004      	b.n	8005086 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to au16regs buffer
	      get_FC3(modH);
 800507c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800507e:	f000 f871 	bl	8005164 <get_FC3>
	      break;
 8005082:	e000      	b.n	8005086 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8005084:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	2200      	movs	r2, #0
 800508a:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8005094:	2300      	movs	r3, #0
 8005096:	2200      	movs	r2, #0
 8005098:	2100      	movs	r1, #0
 800509a:	f001 ff0f 	bl	8006ebc <xQueueGenericSend>
	  //return i8state;
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800509e:	69b8      	ldr	r0, [r7, #24]
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80050a6:	4619      	mov	r1, r3
 80050a8:	2300      	movs	r3, #0
 80050aa:	2203      	movs	r2, #3
 80050ac:	f003 fc36 	bl	800891c <xTaskGenericNotify>
	  continue;
 80050b0:	bf00      	nop
  {
 80050b2:	e72f      	b.n	8004f14 <StartTaskModbusMaster+0xc>

080050b4 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 80050b4:	b590      	push	{r4, r7, lr}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80050bc:	2303      	movs	r3, #3
 80050be:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 80050c0:	2300      	movs	r3, #0
 80050c2:	73fb      	strb	r3, [r7, #15]
 80050c4:	e045      	b.n	8005152 <get_FC1+0x9e>

        if(i%2)
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d01d      	beq.n	800510e <get_FC1+0x5a>
        {
        	modH->au16regs[i/2]= word(modH->au8Buffer[i+u8byte], lowByte(modH->au16regs[i/2]));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	18d4      	adds	r4, r2, r3
 80050e2:	7bfa      	ldrb	r2, [r7, #15]
 80050e4:	7bbb      	ldrb	r3, [r7, #14]
 80050e6:	4413      	add	r3, r2
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	4413      	add	r3, r2
 80050ec:	7cd8      	ldrb	r0, [r3, #19]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	4413      	add	r3, r2
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	4619      	mov	r1, r3
 8005104:	f000 fa06 	bl	8005514 <word>
 8005108:	4603      	mov	r3, r0
 800510a:	8023      	strh	r3, [r4, #0]
 800510c:	e01e      	b.n	800514c <get_FC1+0x98>
        }
        else
        {

        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	b2db      	uxtb	r3, r3
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	18d4      	adds	r4, r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	b2db      	uxtb	r3, r3
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4413      	add	r3, r2
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	0a1b      	lsrs	r3, r3, #8
 8005132:	b29b      	uxth	r3, r3
 8005134:	b2d8      	uxtb	r0, r3
 8005136:	7bfa      	ldrb	r2, [r7, #15]
 8005138:	7bbb      	ldrb	r3, [r7, #14]
 800513a:	4413      	add	r3, r2
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	4413      	add	r3, r2
 8005140:	7cdb      	ldrb	r3, [r3, #19]
 8005142:	4619      	mov	r1, r3
 8005144:	f000 f9e6 	bl	8005514 <word>
 8005148:	4603      	mov	r3, r0
 800514a:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	3301      	adds	r3, #1
 8005150:	73fb      	strb	r3, [r7, #15]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	7d5b      	ldrb	r3, [r3, #21]
 8005156:	7bfa      	ldrb	r2, [r7, #15]
 8005158:	429a      	cmp	r2, r3
 800515a:	d3b4      	bcc.n	80050c6 <get_FC1+0x12>
        }

     }
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	bd90      	pop	{r4, r7, pc}

08005164 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800516c:	2303      	movs	r3, #3
 800516e:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8005170:	2300      	movs	r3, #0
 8005172:	73bb      	strb	r3, [r7, #14]
 8005174:	e019      	b.n	80051aa <get_FC3+0x46>
    {
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800517c:	7bbb      	ldrb	r3, [r7, #14]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	18d4      	adds	r4, r2, r3
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	4413      	add	r3, r2
 8005188:	7cd8      	ldrb	r0, [r3, #19]
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	3301      	adds	r3, #1
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	4413      	add	r3, r2
 8005192:	7cdb      	ldrb	r3, [r3, #19]
 8005194:	4619      	mov	r1, r3
 8005196:	f000 f9bd 	bl	8005514 <word>
 800519a:	4603      	mov	r3, r0
 800519c:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	3302      	adds	r3, #2
 80051a2:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 80051a4:	7bbb      	ldrb	r3, [r7, #14]
 80051a6:	3301      	adds	r3, #1
 80051a8:	73bb      	strb	r3, [r7, #14]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	7d5b      	ldrb	r3, [r3, #21]
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	7bba      	ldrb	r2, [r7, #14]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d3de      	bcc.n	8005176 <get_FC3+0x12>
    }
}
 80051b8:	bf00      	nop
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd90      	pop	{r4, r7, pc}

080051c0 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc
    uint16_t u16MsgCRC =
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80051ce:	3b02      	subs	r3, #2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	7cdb      	ldrb	r3, [r3, #19]
 80051d6:	021b      	lsls	r3, r3, #8
         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80051d8:	b21a      	sxth	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80051e0:	3b01      	subs	r3, #1
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	440b      	add	r3, r1
 80051e6:	7cdb      	ldrb	r3, [r3, #19]
 80051e8:	b21b      	sxth	r3, r3
 80051ea:	4313      	orrs	r3, r2
 80051ec:	b21b      	sxth	r3, r3
    uint16_t u16MsgCRC =
 80051ee:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f103 0213 	add.w	r2, r3, #19
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80051fc:	3b02      	subs	r3, #2
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f000 f998 	bl	8005538 <calcCRC>
 8005208:	4603      	mov	r3, r0
 800520a:	461a      	mov	r2, r3
 800520c:	89bb      	ldrh	r3, [r7, #12]
 800520e:	4293      	cmp	r3, r2
 8005210:	d009      	beq.n	8005226 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8005218:	3301      	adds	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 8005222:	23fc      	movs	r3, #252	; 0xfc
 8005224:	e034      	b.n	8005290 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->au8Buffer[ FUNC ] & 0x80) != 0)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	7d1b      	ldrb	r3, [r3, #20]
 800522a:	b25b      	sxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	da09      	bge.n	8005244 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8005236:	3301      	adds	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 8005240:	23fb      	movs	r3, #251	; 0xfb
 8005242:	e025      	b.n	8005290 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8005244:	2300      	movs	r3, #0
 8005246:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8005248:	2300      	movs	r3, #0
 800524a:	73bb      	strb	r3, [r7, #14]
 800524c:	e00c      	b.n	8005268 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->au8Buffer[FUNC])
 800524e:	7bbb      	ldrb	r3, [r7, #14]
 8005250:	4a11      	ldr	r2, [pc, #68]	; (8005298 <validateAnswer+0xd8>)
 8005252:	5cd2      	ldrb	r2, [r2, r3]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	7d1b      	ldrb	r3, [r3, #20]
 8005258:	429a      	cmp	r2, r3
 800525a:	d102      	bne.n	8005262 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
            break;
 8005260:	e005      	b.n	800526e <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8005262:	7bbb      	ldrb	r3, [r7, #14]
 8005264:	3301      	adds	r3, #1
 8005266:	73bb      	strb	r3, [r7, #14]
 8005268:	7bbb      	ldrb	r3, [r7, #14]
 800526a:	2b07      	cmp	r3, #7
 800526c:	d9ef      	bls.n	800524e <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	f083 0301 	eor.w	r3, r3, #1
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8005280:	3301      	adds	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	080095ac 	.word	0x080095ac

0800529c <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int8_t getRxBuffer(modbusHandler_t *modH)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
    bool bBuffOverflow = false;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]

    if (modH->EN_Port)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d007      	beq.n	80052c0 <getRxBuffer+0x24>
    {
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68d8      	ldr	r0, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8a1b      	ldrh	r3, [r3, #16]
 80052b8:	2200      	movs	r2, #0
 80052ba:	4619      	mov	r1, r3
 80052bc:	f7fc fe8e 	bl	8001fdc <HAL_GPIO_WritePin>
    }

    modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	33c8      	adds	r3, #200	; 0xc8
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fa65 	bl	8004794 <RingCountBytes>
 80052ca:	4603      	mov	r3, r0
 80052cc:	461a      	mov	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    RingGetAllBytes(&modH->xBufferRX, modH->au8Buffer);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3313      	adds	r3, #19
 80052de:	4619      	mov	r1, r3
 80052e0:	4610      	mov	r0, r2
 80052e2:	f7ff f9f7 	bl	80046d4 <RingGetAllBytes>

    modH->u16InCnt++;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80052ec:	3301      	adds	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c


    if (bBuffOverflow)
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <getRxBuffer+0x76>
    {
    	modH->u16errCnt++;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8005302:	3301      	adds	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BUFF_OVERFLOW;  //using queues this will not happen
 800530c:	f06f 0302 	mvn.w	r3, #2
 8005310:	e003      	b.n	800531a <getRxBuffer+0x7e>
    }
    return modH->u8BufferSize;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005318:	b25b      	sxtb	r3, r3
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc
	    uint16_t u16MsgCRC =
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005332:	3b02      	subs	r3, #2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	4413      	add	r3, r2
 8005338:	7cdb      	ldrb	r3, [r3, #19]
 800533a:	021b      	lsls	r3, r3, #8
	         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800533c:	b21a      	sxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005344:	3b01      	subs	r3, #1
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	440b      	add	r3, r1
 800534a:	7cdb      	ldrb	r3, [r3, #19]
 800534c:	b21b      	sxth	r3, r3
 800534e:	4313      	orrs	r3, r2
 8005350:	b21b      	sxth	r3, r3
	    uint16_t u16MsgCRC =
 8005352:	81bb      	strh	r3, [r7, #12]
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f103 0213 	add.w	r2, r3, #19
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005360:	3b02      	subs	r3, #2
 8005362:	b2db      	uxtb	r3, r3
 8005364:	4619      	mov	r1, r3
 8005366:	4610      	mov	r0, r2
 8005368:	f000 f8e6 	bl	8005538 <calcCRC>
 800536c:	4603      	mov	r3, r0
 800536e:	461a      	mov	r2, r3
 8005370:	89bb      	ldrh	r3, [r7, #12]
 8005372:	4293      	cmp	r3, r2
 8005374:	d009      	beq.n	800538a <validateRequest+0x66>
	    {
	    	modH->u16errCnt ++;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800537c:	3301      	adds	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return NO_REPLY;
 8005386:	23ff      	movs	r3, #255	; 0xff
 8005388:	e0be      	b.n	8005508 <validateRequest+0x1e4>
	    }

	    // check fct code
	    bool isSupported = false;
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800538e:	2300      	movs	r3, #0
 8005390:	73bb      	strb	r3, [r7, #14]
 8005392:	e00c      	b.n	80053ae <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->au8Buffer[FUNC])
 8005394:	7bbb      	ldrb	r3, [r7, #14]
 8005396:	4a5e      	ldr	r2, [pc, #376]	; (8005510 <validateRequest+0x1ec>)
 8005398:	5cd2      	ldrb	r2, [r2, r3]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7d1b      	ldrb	r3, [r3, #20]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d102      	bne.n	80053a8 <validateRequest+0x84>
	        {
	            isSupported = 1;
 80053a2:	2301      	movs	r3, #1
 80053a4:	73fb      	strb	r3, [r7, #15]
	            break;
 80053a6:	e005      	b.n	80053b4 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80053a8:	7bbb      	ldrb	r3, [r7, #14]
 80053aa:	3301      	adds	r3, #1
 80053ac:	73bb      	strb	r3, [r7, #14]
 80053ae:	7bbb      	ldrb	r3, [r7, #14]
 80053b0:	2b07      	cmp	r3, #7
 80053b2:	d9ef      	bls.n	8005394 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	f083 0301 	eor.w	r3, r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d009      	beq.n	80053d4 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80053c6:	3301      	adds	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e099      	b.n	8005508 <validateRequest+0x1e4>
	    }

	    // check start address & nb range
	    uint16_t u16regs = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	817b      	strh	r3, [r7, #10]
	    //uint8_t u8regs;
	    switch ( modH->au8Buffer[ FUNC ] )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	7d1b      	ldrb	r3, [r3, #20]
 80053dc:	3b01      	subs	r3, #1
 80053de:	2b0f      	cmp	r3, #15
 80053e0:	f200 8091 	bhi.w	8005506 <validateRequest+0x1e2>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <validateRequest+0xc8>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	0800542d 	.word	0x0800542d
 80053f0:	0800542d 	.word	0x0800542d
 80053f4:	080054bb 	.word	0x080054bb
 80053f8:	080054bb 	.word	0x080054bb
 80053fc:	08005471 	.word	0x08005471
 8005400:	08005497 	.word	0x08005497
 8005404:	08005507 	.word	0x08005507
 8005408:	08005507 	.word	0x08005507
 800540c:	08005507 	.word	0x08005507
 8005410:	08005507 	.word	0x08005507
 8005414:	08005507 	.word	0x08005507
 8005418:	08005507 	.word	0x08005507
 800541c:	08005507 	.word	0x08005507
 8005420:	08005507 	.word	0x08005507
 8005424:	0800542d 	.word	0x0800542d
 8005428:	080054bb 	.word	0x080054bb
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	7d5a      	ldrb	r2, [r3, #21]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	7d9b      	ldrb	r3, [r3, #22]
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f000 f86c 	bl	8005514 <word>
 800543c:	4603      	mov	r3, r0
 800543e:	091b      	lsrs	r3, r3, #4
 8005440:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	7dda      	ldrb	r2, [r3, #23]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	7e1b      	ldrb	r3, [r3, #24]
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f000 f861 	bl	8005514 <word>
 8005452:	4603      	mov	r3, r0
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	b29b      	uxth	r3, r3
 8005458:	b29a      	uxth	r2, r3
 800545a:	897b      	ldrh	r3, [r7, #10]
 800545c:	4413      	add	r3, r2
 800545e:	817b      	strh	r3, [r7, #10]
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8005466:	897a      	ldrh	r2, [r7, #10]
 8005468:	429a      	cmp	r2, r3
 800546a:	d945      	bls.n	80054f8 <validateRequest+0x1d4>
 800546c:	2302      	movs	r3, #2
 800546e:	e04b      	b.n	8005508 <validateRequest+0x1e4>
	        break;
	    case MB_FC_WRITE_COIL:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	7d5a      	ldrb	r2, [r3, #21]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	7d9b      	ldrb	r3, [r3, #22]
 8005478:	4619      	mov	r1, r3
 800547a:	4610      	mov	r0, r2
 800547c:	f000 f84a 	bl	8005514 <word>
 8005480:	4603      	mov	r3, r0
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	817b      	strh	r3, [r7, #10]
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800548c:	897a      	ldrh	r2, [r7, #10]
 800548e:	429a      	cmp	r2, r3
 8005490:	d934      	bls.n	80054fc <validateRequest+0x1d8>
 8005492:	2302      	movs	r3, #2
 8005494:	e038      	b.n	8005508 <validateRequest+0x1e4>
	        break;
	    case MB_FC_WRITE_REGISTER :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	7d5a      	ldrb	r2, [r3, #21]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	7d9b      	ldrb	r3, [r3, #22]
 800549e:	4619      	mov	r1, r3
 80054a0:	4610      	mov	r0, r2
 80054a2:	f000 f837 	bl	8005514 <word>
 80054a6:	4603      	mov	r3, r0
 80054a8:	817b      	strh	r3, [r7, #10]
	        if (u16regs > modH-> u16regsize) return EXC_ADDR_RANGE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80054b0:	897a      	ldrh	r2, [r7, #10]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d924      	bls.n	8005500 <validateRequest+0x1dc>
 80054b6:	2302      	movs	r3, #2
 80054b8:	e026      	b.n	8005508 <validateRequest+0x1e4>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	7d5a      	ldrb	r2, [r3, #21]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	7d9b      	ldrb	r3, [r3, #22]
 80054c2:	4619      	mov	r1, r3
 80054c4:	4610      	mov	r0, r2
 80054c6:	f000 f825 	bl	8005514 <word>
 80054ca:	4603      	mov	r3, r0
 80054cc:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	7dda      	ldrb	r2, [r3, #23]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	7e1b      	ldrb	r3, [r3, #24]
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f000 f81b 	bl	8005514 <word>
 80054de:	4603      	mov	r3, r0
 80054e0:	461a      	mov	r2, r3
 80054e2:	897b      	ldrh	r3, [r7, #10]
 80054e4:	4413      	add	r3, r2
 80054e6:	817b      	strh	r3, [r7, #10]
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80054ee:	897a      	ldrh	r2, [r7, #10]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d907      	bls.n	8005504 <validateRequest+0x1e0>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e007      	b.n	8005508 <validateRequest+0x1e4>
	        break;
 80054f8:	bf00      	nop
 80054fa:	e004      	b.n	8005506 <validateRequest+0x1e2>
	        break;
 80054fc:	bf00      	nop
 80054fe:	e002      	b.n	8005506 <validateRequest+0x1e2>
	        break;
 8005500:	bf00      	nop
 8005502:	e000      	b.n	8005506 <validateRequest+0x1e2>
	        break;
 8005504:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8005506:	2300      	movs	r3, #0

}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	080095ac 	.word	0x080095ac

08005514 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	460a      	mov	r2, r1
 800551e:	71fb      	strb	r3, [r7, #7]
 8005520:	4613      	mov	r3, r2
 8005522:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8005524:	79bb      	ldrb	r3, [r7, #6]
 8005526:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800552c:	89bb      	ldrh	r3, [r7, #12]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8005544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005548:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800554a:	2300      	movs	r3, #0
 800554c:	74fb      	strb	r3, [r7, #19]
 800554e:	e023      	b.n	8005598 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8005550:	7cfb      	ldrb	r3, [r7, #19]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	4413      	add	r3, r2
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	4053      	eors	r3, r2
 800555e:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8005560:	2301      	movs	r3, #1
 8005562:	74bb      	strb	r3, [r7, #18]
 8005564:	e012      	b.n	800558c <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
            temp >>=1;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	085b      	lsrs	r3, r3, #1
 8005572:	617b      	str	r3, [r7, #20]
            if (flag)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <calcCRC+0x4e>
                temp ^= 0xA001;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8005580:	f083 0301 	eor.w	r3, r3, #1
 8005584:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8005586:	7cbb      	ldrb	r3, [r7, #18]
 8005588:	3301      	adds	r3, #1
 800558a:	74bb      	strb	r3, [r7, #18]
 800558c:	7cbb      	ldrb	r3, [r7, #18]
 800558e:	2b08      	cmp	r3, #8
 8005590:	d9e9      	bls.n	8005566 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8005592:	7cfb      	ldrb	r3, [r7, #19]
 8005594:	3301      	adds	r3, #1
 8005596:	74fb      	strb	r3, [r7, #19]
 8005598:	7cfa      	ldrb	r2, [r7, #19]
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	429a      	cmp	r2, r3
 800559e:	d3d7      	bcc.n	8005550 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	0a1b      	lsrs	r3, r3, #8
 80055a4:	60bb      	str	r3, [r7, #8]
    temp = (temp << 8) | temp2;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	021a      	lsls	r2, r3, #8
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	b29b      	uxth	r3, r3

}
 80055ba:	4618      	mov	r0, r3
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	bc80      	pop	{r7}
 80055c2:	4770      	bx	lr

080055c4 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	6039      	str	r1, [r7, #0]
 80055ce:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->au8Buffer[ FUNC ];  // get the original FUNC code
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	7d1b      	ldrb	r3, [r3, #20]
 80055d4:	73fb      	strb	r3, [r7, #15]

    modH->au8Buffer[ ID ]      = modH->u8id;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	7a1a      	ldrb	r2, [r3, #8]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	74da      	strb	r2, [r3, #19]
    modH->au8Buffer[ FUNC ]    = u8func + 0x80;
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	3b80      	subs	r3, #128	; 0x80
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	751a      	strb	r2, [r3, #20]
    modH->au8Buffer[ 2 ]       = u8exception;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	79fa      	ldrb	r2, [r7, #7]
 80055ec:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2203      	movs	r2, #3
 80055f2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr

08005600 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
void sendTxBuffer(modbusHandler_t *modH)
{
 8005600:	b590      	push	{r4, r7, lr}
 8005602:	b087      	sub	sp, #28
 8005604:	af02      	add	r7, sp, #8
 8005606:	6078      	str	r0, [r7, #4]
    // append CRC to message
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f103 0213 	add.w	r2, r3, #19
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005614:	4619      	mov	r1, r3
 8005616:	4610      	mov	r0, r2
 8005618:	f7ff ff8e 	bl	8005538 <calcCRC>
 800561c:	4603      	mov	r3, r0
 800561e:	81fb      	strh	r3, [r7, #14]
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005626:	4619      	mov	r1, r3
 8005628:	89fb      	ldrh	r3, [r7, #14]
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	b29b      	uxth	r3, r3
 800562e:	b2da      	uxtb	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	440b      	add	r3, r1
 8005634:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800563c:	3301      	adds	r3, #1
 800563e:	b2da      	uxtb	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800564c:	4619      	mov	r1, r3
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	440b      	add	r3, r1
 8005656:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800565e:	3301      	adds	r3, #1
 8005660:	b2da      	uxtb	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC ==1
    if(modH->u8TypeHW == USART_HW)
    {
#endif
    	if (modH->EN_Port != NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d007      	beq.n	8005680 <sendTxBuffer+0x80>
        {
            // set RS485 transceiver to transmit mode
        	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68d8      	ldr	r0, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8a1b      	ldrh	r3, [r3, #16]
 8005678:	2201      	movs	r2, #1
 800567a:	4619      	mov	r1, r3
 800567c:	f7fc fcae 	bl	8001fdc <HAL_GPIO_WritePin>
        }

        // transfer buffer to serial line
        HAL_UART_Transmit_IT(modH->port, modH->au8Buffer,  modH->u8BufferSize);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6858      	ldr	r0, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f103 0113 	add.w	r1, r3, #19
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005690:	b29b      	uxth	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	f7fe fb78 	bl	8003d88 <HAL_UART_Transmit_IT>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait notification from TXE interrupt
 8005698:	f04f 31ff 	mov.w	r1, #4294967295
 800569c:	2001      	movs	r0, #1
 800569e:	f003 f8f5 	bl	800888c <ulTaskNotifyTake>


         if (modH->EN_Port != NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d018      	beq.n	80056dc <sendTxBuffer+0xdc>
             //return RS485 transceiver to receive mode

        	 #if defined(STM32H745xx) || defined(STM32H743xx)  || defined(STM32F303xE)
        	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
             #else
        	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 80056aa:	e007      	b.n	80056bc <sendTxBuffer+0xbc>
	    	 #endif
        	 {
        		taskYIELD();
 80056ac:	4b1c      	ldr	r3, [pc, #112]	; (8005720 <sendTxBuffer+0x120>)
 80056ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	f3bf 8f6f 	isb	sy
        	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ef      	beq.n	80056ac <sendTxBuffer+0xac>
        	 }
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68d8      	ldr	r0, [r3, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8a1b      	ldrh	r3, [r3, #16]
 80056d4:	2200      	movs	r2, #0
 80056d6:	4619      	mov	r1, r3
 80056d8:	f7fc fc80 	bl	8001fdc <HAL_GPIO_WritePin>
         }


         // set timeout for master query
         if(modH->uiModbusType == MASTER_RTU )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d10c      	bne.n	80056fe <sendTxBuffer+0xfe>
         {
 	    	xTimerReset(modH->xTimerTimeout,0);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 80056ea:	f002 fbfd 	bl	8007ee8 <xTaskGetTickCount>
 80056ee:	4602      	mov	r2, r0
 80056f0:	2300      	movs	r3, #0
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2300      	movs	r3, #0
 80056f6:	2102      	movs	r1, #2
 80056f8:	4620      	mov	r0, r4
 80056fa:	f003 fb67 	bl	8008dcc <xTimerGenericCommand>

	}
#endif


     modH->u8BufferSize = 0;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800570c:	3301      	adds	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	bd90      	pop	{r4, r7, pc}
 800571e:	bf00      	nop
 8005720:	e000ed04 	.word	0xe000ed04

08005724 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	7d5a      	ldrb	r2, [r3, #21]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	7d9b      	ldrb	r3, [r3, #22]
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f7ff feec 	bl	8005514 <word>
 800573c:	4603      	mov	r3, r0
 800573e:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	7dda      	ldrb	r2, [r3, #23]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	7e1b      	ldrb	r3, [r3, #24]
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f7ff fee2 	bl	8005514 <word>
 8005750:	4603      	mov	r3, r0
 8005752:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8005754:	8a3b      	ldrh	r3, [r7, #16]
 8005756:	08db      	lsrs	r3, r3, #3
 8005758:	b29b      	uxth	r3, r3
 800575a:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800575c:	8a3b      	ldrh	r3, [r7, #16]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <process_FC1+0x4a>
 8005768:	7dfb      	ldrb	r3, [r7, #23]
 800576a:	3301      	adds	r3, #1
 800576c:	75fb      	strb	r3, [r7, #23]
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	7dfa      	ldrb	r2, [r7, #23]
 8005772:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2203      	movs	r2, #3
 8005778:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->au8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005782:	461a      	mov	r2, r3
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	4413      	add	r3, r2
 8005788:	3b01      	subs	r3, #1
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	4413      	add	r3, r2
 800578e:	2200      	movs	r2, #0
 8005790:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8005796:	2300      	movs	r3, #0
 8005798:	82bb      	strh	r3, [r7, #20]
 800579a:	e05b      	b.n	8005854 <process_FC1+0x130>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800579c:	8a7a      	ldrh	r2, [r7, #18]
 800579e:	8abb      	ldrh	r3, [r7, #20]
 80057a0:	4413      	add	r3, r2
 80057a2:	81fb      	strh	r3, [r7, #14]
        u8currentRegister = (uint8_t) (u16coil / 16);
 80057a4:	89fb      	ldrh	r3, [r7, #14]
 80057a6:	091b      	lsrs	r3, r3, #4
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	737b      	strb	r3, [r7, #13]
        u8currentBit = (uint8_t) (u16coil % 16);
 80057ac:	89fb      	ldrh	r3, [r7, #14]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	733b      	strb	r3, [r7, #12]

        bitWrite(
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80057bc:	7b7b      	ldrb	r3, [r7, #13]
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	4413      	add	r3, r2
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	7b3b      	ldrb	r3, [r7, #12]
 80057c8:	fa42 f303 	asr.w	r3, r2, r3
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d015      	beq.n	8005800 <process_FC1+0xdc>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80057da:	4618      	mov	r0, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80057e2:	461a      	mov	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4413      	add	r3, r2
 80057e8:	7cda      	ldrb	r2, [r3, #19]
 80057ea:	7dbb      	ldrb	r3, [r7, #22]
 80057ec:	2101      	movs	r1, #1
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	4313      	orrs	r3, r2
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4403      	add	r3, r0
 80057fc:	74da      	strb	r2, [r3, #19]
 80057fe:	e016      	b.n	800582e <process_FC1+0x10a>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005806:	4618      	mov	r0, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800580e:	461a      	mov	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4413      	add	r3, r2
 8005814:	7cda      	ldrb	r2, [r3, #19]
 8005816:	7dbb      	ldrb	r3, [r7, #22]
 8005818:	2101      	movs	r1, #1
 800581a:	fa01 f303 	lsl.w	r3, r1, r3
 800581e:	b2db      	uxtb	r3, r3
 8005820:	43db      	mvns	r3, r3
 8005822:	b2db      	uxtb	r3, r3
 8005824:	4013      	ands	r3, r2
 8005826:	b2da      	uxtb	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4403      	add	r3, r0
 800582c:	74da      	strb	r2, [r3, #19]
        	modH->au8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->au16regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800582e:	7dbb      	ldrb	r3, [r7, #22]
 8005830:	3301      	adds	r3, #1
 8005832:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8005834:	7dbb      	ldrb	r3, [r7, #22]
 8005836:	2b07      	cmp	r3, #7
 8005838:	d909      	bls.n	800584e <process_FC1+0x12a>
        {
            u8bitsno = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005844:	3301      	adds	r3, #1
 8005846:	b2da      	uxtb	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800584e:	8abb      	ldrh	r3, [r7, #20]
 8005850:	3301      	adds	r3, #1
 8005852:	82bb      	strh	r3, [r7, #20]
 8005854:	8aba      	ldrh	r2, [r7, #20]
 8005856:	8a3b      	ldrh	r3, [r7, #16]
 8005858:	429a      	cmp	r2, r3
 800585a:	d39f      	bcc.n	800579c <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800585c:	8a3b      	ldrh	r3, [r7, #16]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d007      	beq.n	8005878 <process_FC1+0x154>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800586e:	3301      	adds	r3, #1
 8005870:	b2da      	uxtb	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800587e:	3302      	adds	r3, #2
 8005880:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff febc 	bl	8005600 <sendTxBuffer>
    return u8CopyBufferSize;
 8005888:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]

    uint8_t u8StartAdd = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	7d5a      	ldrb	r2, [r3, #21]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	7d9b      	ldrb	r3, [r3, #22]
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f7ff fe34 	bl	8005514 <word>
 80058ac:	4603      	mov	r3, r0
 80058ae:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	7dda      	ldrb	r2, [r3, #23]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	7e1b      	ldrb	r3, [r3, #24]
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f7ff fe2a 	bl	8005514 <word>
 80058c0:	4603      	mov	r3, r0
 80058c2:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;

    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 80058c4:	7b7b      	ldrb	r3, [r7, #13]
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2203      	movs	r2, #3
 80058d2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 80058d6:	7bbb      	ldrb	r3, [r7, #14]
 80058d8:	73fb      	strb	r3, [r7, #15]
 80058da:	e032      	b.n	8005942 <process_FC3+0xae>
    {
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80058e2:	4619      	mov	r1, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	4413      	add	r3, r2
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	0a1b      	lsrs	r3, r3, #8
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	440b      	add	r3, r1
 80058fc:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005904:	3301      	adds	r3, #1
 8005906:	b2da      	uxtb	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->au8Buffer[ modH->u8BufferSize ] = lowByte(modH->au16regs[i]);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005914:	4619      	mov	r1, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	4413      	add	r3, r2
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	b2da      	uxtb	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	440b      	add	r3, r1
 800592a:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005932:	3301      	adds	r3, #1
 8005934:	b2da      	uxtb	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	3301      	adds	r3, #1
 8005940:	73fb      	strb	r3, [r7, #15]
 8005942:	7bfa      	ldrb	r2, [r7, #15]
 8005944:	7bb9      	ldrb	r1, [r7, #14]
 8005946:	7b7b      	ldrb	r3, [r7, #13]
 8005948:	440b      	add	r3, r1
 800594a:	429a      	cmp	r2, r3
 800594c:	dbc6      	blt.n	80058dc <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005954:	3302      	adds	r3, #2
 8005956:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff fe51 	bl	8005600 <sendTxBuffer>

    return u8CopyBufferSize;
 800595e:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	7d5a      	ldrb	r2, [r3, #21]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	7d9b      	ldrb	r3, [r3, #22]
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f7ff fdc9 	bl	8005514 <word>
 8005982:	4603      	mov	r3, r0
 8005984:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
 8005986:	89fb      	ldrh	r3, [r7, #14]
 8005988:	091b      	lsrs	r3, r3, #4
 800598a:	b29b      	uxth	r3, r3
 800598c:	737b      	strb	r3, [r7, #13]
    u8currentBit = (uint8_t) (u16coil % 16);
 800598e:	89fb      	ldrh	r3, [r7, #14]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	733b      	strb	r3, [r7, #12]

    // write to coil
    bitWrite(
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7ddb      	ldrb	r3, [r3, #23]
 800599c:	2bff      	cmp	r3, #255	; 0xff
 800599e:	d115      	bne.n	80059cc <process_FC5+0x62>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80059a6:	7b7b      	ldrb	r3, [r7, #13]
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	4413      	add	r3, r2
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 80059b2:	7b7a      	ldrb	r2, [r7, #13]
 80059b4:	0052      	lsls	r2, r2, #1
 80059b6:	440a      	add	r2, r1
 80059b8:	8811      	ldrh	r1, [r2, #0]
 80059ba:	7b3a      	ldrb	r2, [r7, #12]
 80059bc:	2001      	movs	r0, #1
 80059be:	fa00 f202 	lsl.w	r2, r0, r2
 80059c2:	b292      	uxth	r2, r2
 80059c4:	430a      	orrs	r2, r1
 80059c6:	b292      	uxth	r2, r2
 80059c8:	801a      	strh	r2, [r3, #0]
 80059ca:	e016      	b.n	80059fa <process_FC5+0x90>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80059d2:	7b7b      	ldrb	r3, [r7, #13]
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	4413      	add	r3, r2
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 80059de:	7b7a      	ldrb	r2, [r7, #13]
 80059e0:	0052      	lsls	r2, r2, #1
 80059e2:	440a      	add	r2, r1
 80059e4:	8811      	ldrh	r1, [r2, #0]
 80059e6:	7b3a      	ldrb	r2, [r7, #12]
 80059e8:	2001      	movs	r0, #1
 80059ea:	fa00 f202 	lsl.w	r2, r0, r2
 80059ee:	b292      	uxth	r2, r2
 80059f0:	43d2      	mvns	r2, r2
 80059f2:	b292      	uxth	r2, r2
 80059f4:	400a      	ands	r2, r1
 80059f6:	b292      	uxth	r2, r2
 80059f8:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2206      	movs	r2, #6
 80059fe:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005a08:	3302      	adds	r3, #2
 8005a0a:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff fdf7 	bl	8005600 <sendTxBuffer>

    return u8CopyBufferSize;
 8005a12:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]

    uint8_t u8add = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	7d5a      	ldrb	r2, [r3, #21]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	7d9b      	ldrb	r3, [r3, #22]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4610      	mov	r0, r2
 8005a32:	f7ff fd6f 	bl	8005514 <word>
 8005a36:	4603      	mov	r3, r0
 8005a38:	73fb      	strb	r3, [r7, #15]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	7dda      	ldrb	r2, [r3, #23]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	7e1b      	ldrb	r3, [r3, #24]
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f7ff fd65 	bl	8005514 <word>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	81bb      	strh	r3, [r7, #12]

    modH->au16regs[ u8add ] = u16val;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	4413      	add	r3, r2
 8005a5a:	89ba      	ldrh	r2, [r7, #12]
 8005a5c:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2206      	movs	r2, #6
 8005a62:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize +2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005a6c:	3302      	adds	r3, #2
 8005a6e:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff fdc5 	bl	8005600 <sendTxBuffer>

    return u8CopyBufferSize;
 8005a76:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b086      	sub	sp, #24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7d5a      	ldrb	r2, [r3, #21]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	7d9b      	ldrb	r3, [r3, #22]
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f7ff fd3d 	bl	8005514 <word>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	7dda      	ldrb	r2, [r3, #23]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	7e1b      	ldrb	r3, [r3, #24]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f7ff fd33 	bl	8005514 <word>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8005ab6:	2307      	movs	r3, #7
 8005ab8:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8005aba:	2300      	movs	r3, #0
 8005abc:	82bb      	strh	r3, [r7, #20]
 8005abe:	e059      	b.n	8005b74 <process_FC15+0xf2>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8005ac0:	8a7a      	ldrh	r2, [r7, #18]
 8005ac2:	8abb      	ldrh	r3, [r7, #20]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	81fb      	strh	r3, [r7, #14]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8005ac8:	89fb      	ldrh	r3, [r7, #14]
 8005aca:	091b      	lsrs	r3, r3, #4
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	737b      	strb	r3, [r7, #13]
        u8currentBit = (uint8_t) (u16coil % 16);
 8005ad0:	89fb      	ldrh	r3, [r7, #14]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	733b      	strb	r3, [r7, #12]

        bTemp = bitRead(
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	4413      	add	r3, r2
 8005ae0:	7cdb      	ldrb	r3, [r3, #19]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	7dbb      	ldrb	r3, [r7, #22]
 8005ae6:	fa42 f303 	asr.w	r3, r2, r3
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bf14      	ite	ne
 8005af2:	2301      	movne	r3, #1
 8005af4:	2300      	moveq	r3, #0
 8005af6:	72fb      	strb	r3, [r7, #11]
        			modH->au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8005af8:	7afb      	ldrb	r3, [r7, #11]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d015      	beq.n	8005b2a <process_FC15+0xa8>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005b04:	7b7b      	ldrb	r3, [r7, #13]
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 8005b10:	7b7a      	ldrb	r2, [r7, #13]
 8005b12:	0052      	lsls	r2, r2, #1
 8005b14:	440a      	add	r2, r1
 8005b16:	8811      	ldrh	r1, [r2, #0]
 8005b18:	7b3a      	ldrb	r2, [r7, #12]
 8005b1a:	2001      	movs	r0, #1
 8005b1c:	fa00 f202 	lsl.w	r2, r0, r2
 8005b20:	b292      	uxth	r2, r2
 8005b22:	430a      	orrs	r2, r1
 8005b24:	b292      	uxth	r2, r2
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	e016      	b.n	8005b58 <process_FC15+0xd6>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005b30:	7b7b      	ldrb	r3, [r7, #13]
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	4413      	add	r3, r2
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 8005b3c:	7b7a      	ldrb	r2, [r7, #13]
 8005b3e:	0052      	lsls	r2, r2, #1
 8005b40:	440a      	add	r2, r1
 8005b42:	8811      	ldrh	r1, [r2, #0]
 8005b44:	7b3a      	ldrb	r2, [r7, #12]
 8005b46:	2001      	movs	r0, #1
 8005b48:	fa00 f202 	lsl.w	r2, r0, r2
 8005b4c:	b292      	uxth	r2, r2
 8005b4e:	43d2      	mvns	r2, r2
 8005b50:	b292      	uxth	r2, r2
 8005b52:	400a      	ands	r2, r1
 8005b54:	b292      	uxth	r2, r2
 8005b56:	801a      	strh	r2, [r3, #0]
            modH->au16regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8005b58:	7dbb      	ldrb	r3, [r7, #22]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8005b5e:	7dbb      	ldrb	r3, [r7, #22]
 8005b60:	2b07      	cmp	r3, #7
 8005b62:	d904      	bls.n	8005b6e <process_FC15+0xec>
        {
            u8bitsno = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8005b6e:	8abb      	ldrh	r3, [r7, #20]
 8005b70:	3301      	adds	r3, #1
 8005b72:	82bb      	strh	r3, [r7, #20]
 8005b74:	8aba      	ldrh	r2, [r7, #20]
 8005b76:	8a3b      	ldrh	r3, [r7, #16]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d3a1      	bcc.n	8005ac0 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2206      	movs	r2, #6
 8005b80:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005b8a:	3302      	adds	r3, #2
 8005b8c:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff fd36 	bl	8005600 <sendTxBuffer>
    return u8CopyBufferSize;
 8005b94:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
    uint8_t u8StartAdd = modH->au8Buffer[ ADD_HI ] << 8 | modH->au8Buffer[ ADD_LO ];
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	7d5b      	ldrb	r3, [r3, #21]
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	b25a      	sxtb	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	7d9b      	ldrb	r3, [r3, #22]
 8005bb4:	b25b      	sxtb	r3, r3
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	b25b      	sxtb	r3, r3
 8005bba:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = modH->au8Buffer[ NB_HI ] << 8 | modH->au8Buffer[ NB_LO ];
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	7ddb      	ldrb	r3, [r3, #23]
 8005bc0:	021b      	lsls	r3, r3, #8
 8005bc2:	b25a      	sxtb	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	7e1b      	ldrb	r3, [r3, #24]
 8005bc8:	b25b      	sxtb	r3, r3
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	b25b      	sxtb	r3, r3
 8005bce:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    modH->au8Buffer[ NB_HI ]   = 0;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	75da      	strb	r2, [r3, #23]
    modH->au8Buffer[ NB_LO ]   = u8regsno;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	7b7a      	ldrb	r2, [r7, #13]
 8005bda:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2206      	movs	r2, #6
 8005be0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u8regsno; i++)
 8005be4:	2300      	movs	r3, #0
 8005be6:	73fb      	strb	r3, [r7, #15]
 8005be8:	e01d      	b.n	8005c26 <process_FC16+0x86>
    {
        temp = word(
        		modH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	3307      	adds	r3, #7
        temp = word(
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	7cd8      	ldrb	r0, [r3, #19]
				modH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	005b      	lsls	r3, r3, #1
        temp = word(
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	4413      	add	r3, r2
 8005c00:	7cdb      	ldrb	r3, [r3, #19]
 8005c02:	4619      	mov	r1, r3
 8005c04:	f7ff fc86 	bl	8005514 <word>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	817b      	strh	r3, [r7, #10]

        modH->au16regs[ u8StartAdd + i ] = temp;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005c12:	7bb9      	ldrb	r1, [r7, #14]
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	440b      	add	r3, r1
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	4413      	add	r3, r2
 8005c1c:	897a      	ldrh	r2, [r7, #10]
 8005c1e:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u8regsno; i++)
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	3301      	adds	r3, #1
 8005c24:	73fb      	strb	r3, [r7, #15]
 8005c26:	7bfa      	ldrb	r2, [r7, #15]
 8005c28:	7b7b      	ldrb	r3, [r7, #13]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d3dd      	bcc.n	8005bea <process_FC16+0x4a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005c34:	3302      	adds	r3, #2
 8005c36:	727b      	strb	r3, [r7, #9]
    sendTxBuffer(modH);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff fce1 	bl	8005600 <sendTxBuffer>

    return u8CopyBufferSize;
 8005c3e:	f997 3009 	ldrsb.w	r3, [r7, #9]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	e019      	b.n	8005c92 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart )
 8005c5e:	4a17      	ldr	r2, [pc, #92]	; (8005cbc <HAL_UART_TxCpltCallback+0x70>)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d10e      	bne.n	8005c8c <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8005c6e:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <HAL_UART_TxCpltCallback+0x70>)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c76:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8005c7a:	f107 0308 	add.w	r3, r7, #8
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	2300      	movs	r3, #0
 8005c82:	2200      	movs	r2, #0
 8005c84:	2100      	movs	r1, #0
 8005c86:	f002 feeb 	bl	8008a60 <xTaskGenericNotifyFromISR>

	   		break;
 8005c8a:	e008      	b.n	8005c9e <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_UART_TxCpltCallback+0x74>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	dcdf      	bgt.n	8005c5e <HAL_UART_TxCpltCallback+0x12>

	   	}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <HAL_UART_TxCpltCallback+0x68>
 8005ca4:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <HAL_UART_TxCpltCallback+0x78>)
 8005ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8005cb4:	bf00      	nop
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	2000193c 	.word	0x2000193c
 8005cc0:	20000031 	.word	0x20000031
 8005cc4:	e000ed04 	.word	0xe000ed04

08005cc8 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005cc8:	b590      	push	{r4, r7, lr}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	e03b      	b.n	8005d52 <HAL_UART_RxCpltCallback+0x8a>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8005cda:	4a28      	ldr	r2, [pc, #160]	; (8005d7c <HAL_UART_RxCpltCallback+0xb4>)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d130      	bne.n	8005d4c <HAL_UART_RxCpltCallback+0x84>
    	{
    		RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8005cea:	4a24      	ldr	r2, [pc, #144]	; (8005d7c <HAL_UART_RxCpltCallback+0xb4>)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf2:	f103 00c8 	add.w	r0, r3, #200	; 0xc8
 8005cf6:	4a21      	ldr	r2, [pc, #132]	; (8005d7c <HAL_UART_RxCpltCallback+0xb4>)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cfe:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8005d02:	4619      	mov	r1, r3
 8005d04:	f7fe fca8 	bl	8004658 <RingAdd>
    		HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8005d08:	4a1c      	ldr	r2, [pc, #112]	; (8005d7c <HAL_UART_RxCpltCallback+0xb4>)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d10:	6858      	ldr	r0, [r3, #4]
 8005d12:	4a1a      	ldr	r2, [pc, #104]	; (8005d7c <HAL_UART_RxCpltCallback+0xb4>)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1a:	33b2      	adds	r3, #178	; 0xb2
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	4619      	mov	r1, r3
 8005d20:	f7fe f876 	bl	8003e10 <HAL_UART_Receive_IT>
    		xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8005d24:	4a15      	ldr	r2, [pc, #84]	; (8005d7c <HAL_UART_RxCpltCallback+0xb4>)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2c:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 8005d30:	f002 f8e8 	bl	8007f04 <xTaskGetTickCountFromISR>
 8005d34:	4601      	mov	r1, r0
 8005d36:	f107 0208 	add.w	r2, r7, #8
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	460a      	mov	r2, r1
 8005d42:	2107      	movs	r1, #7
 8005d44:	4620      	mov	r0, r4
 8005d46:	f003 f841 	bl	8008dcc <xTimerGenericCommand>
    		break;
 8005d4a:	e008      	b.n	8005d5e <HAL_UART_RxCpltCallback+0x96>
    for (i = 0; i < numberHandlers; i++ )
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <HAL_UART_RxCpltCallback+0xb8>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	dcbd      	bgt.n	8005cda <HAL_UART_RxCpltCallback+0x12>
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <HAL_UART_RxCpltCallback+0xac>
 8005d64:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <HAL_UART_RxCpltCallback+0xbc>)
 8005d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd90      	pop	{r4, r7, pc}
 8005d7c:	2000193c 	.word	0x2000193c
 8005d80:	20000031 	.word	0x20000031
 8005d84:	e000ed04 	.word	0xe000ed04

08005d88 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d8e:	f3ef 8305 	mrs	r3, IPSR
 8005d92:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10f      	bne.n	8005dba <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d9e:	607b      	str	r3, [r7, #4]
  return(result);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <osKernelInitialize+0x32>
 8005da6:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <osKernelInitialize+0x60>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d109      	bne.n	8005dc2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dae:	f3ef 8311 	mrs	r3, BASEPRI
 8005db2:	603b      	str	r3, [r7, #0]
  return(result);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005dba:	f06f 0305 	mvn.w	r3, #5
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	e00c      	b.n	8005ddc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005dc2:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <osKernelInitialize+0x60>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d105      	bne.n	8005dd6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005dca:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <osKernelInitialize+0x60>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e002      	b.n	8005ddc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bc80      	pop	{r7}
 8005de6:	4770      	bx	lr
 8005de8:	20000034 	.word	0x20000034

08005dec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005df2:	f3ef 8305 	mrs	r3, IPSR
 8005df6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005df8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10f      	bne.n	8005e1e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005e02:	607b      	str	r3, [r7, #4]
  return(result);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d109      	bne.n	8005e1e <osKernelStart+0x32>
 8005e0a:	4b11      	ldr	r3, [pc, #68]	; (8005e50 <osKernelStart+0x64>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d109      	bne.n	8005e26 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e12:	f3ef 8311 	mrs	r3, BASEPRI
 8005e16:	603b      	str	r3, [r7, #0]
  return(result);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005e1e:	f06f 0305 	mvn.w	r3, #5
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e00e      	b.n	8005e44 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e26:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <osKernelStart+0x64>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d107      	bne.n	8005e3e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005e2e:	4b08      	ldr	r3, [pc, #32]	; (8005e50 <osKernelStart+0x64>)
 8005e30:	2202      	movs	r2, #2
 8005e32:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005e34:	f001 ff4a 	bl	8007ccc <vTaskStartScheduler>
      stat = osOK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	e002      	b.n	8005e44 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e44:	68fb      	ldr	r3, [r7, #12]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000034 	.word	0x20000034

08005e54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b092      	sub	sp, #72	; 0x48
 8005e58:	af04      	add	r7, sp, #16
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e64:	f3ef 8305 	mrs	r3, IPSR
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f040 8094 	bne.w	8005f9a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e72:	f3ef 8310 	mrs	r3, PRIMASK
 8005e76:	623b      	str	r3, [r7, #32]
  return(result);
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f040 808d 	bne.w	8005f9a <osThreadNew+0x146>
 8005e80:	4b48      	ldr	r3, [pc, #288]	; (8005fa4 <osThreadNew+0x150>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d106      	bne.n	8005e96 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e88:	f3ef 8311 	mrs	r3, BASEPRI
 8005e8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 8082 	bne.w	8005f9a <osThreadNew+0x146>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d07e      	beq.n	8005f9a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005e9c:	2380      	movs	r3, #128	; 0x80
 8005e9e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005ea0:	2318      	movs	r3, #24
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005ea8:	f107 031b 	add.w	r3, r7, #27
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005eae:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d045      	beq.n	8005f46 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <osThreadNew+0x74>
        name = attr->name;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d008      	beq.n	8005eee <osThreadNew+0x9a>
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	2b38      	cmp	r3, #56	; 0x38
 8005ee0:	d805      	bhi.n	8005eee <osThreadNew+0x9a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <osThreadNew+0x9e>
        return (NULL);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	e054      	b.n	8005f9c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	089b      	lsrs	r3, r3, #2
 8005f00:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00e      	beq.n	8005f28 <osThreadNew+0xd4>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	2b5b      	cmp	r3, #91	; 0x5b
 8005f10:	d90a      	bls.n	8005f28 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d006      	beq.n	8005f28 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <osThreadNew+0xd4>
        mem = 1;
 8005f22:	2301      	movs	r3, #1
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f26:	e010      	b.n	8005f4a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10c      	bne.n	8005f4a <osThreadNew+0xf6>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d108      	bne.n	8005f4a <osThreadNew+0xf6>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <osThreadNew+0xf6>
          mem = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f44:	e001      	b.n	8005f4a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d110      	bne.n	8005f72 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f58:	9202      	str	r2, [sp, #8]
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f001 fce8 	bl	800793c <xTaskCreateStatic>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	e013      	b.n	8005f9a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d110      	bne.n	8005f9a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	f107 0314 	add.w	r3, r7, #20
 8005f80:	9301      	str	r3, [sp, #4]
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f001 fd2f 	bl	80079ee <xTaskCreate>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d001      	beq.n	8005f9a <osThreadNew+0x146>
          hTask = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f9a:	697b      	ldr	r3, [r7, #20]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3738      	adds	r7, #56	; 0x38
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20000034 	.word	0x20000034

08005fa8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fb0:	f3ef 8305 	mrs	r3, IPSR
 8005fb4:	613b      	str	r3, [r7, #16]
  return(result);
 8005fb6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10f      	bne.n	8005fdc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8005fc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d109      	bne.n	8005fdc <osDelay+0x34>
 8005fc8:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <osDelay+0x58>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d109      	bne.n	8005fe4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <osDelay+0x3c>
    stat = osErrorISR;
 8005fdc:	f06f 0305 	mvn.w	r3, #5
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	e007      	b.n	8005ff4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f001 fe38 	bl	8007c64 <vTaskDelay>
    }
  }

  return (stat);
 8005ff4:	697b      	ldr	r3, [r7, #20]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000034 	.word	0x20000034

08006004 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b08c      	sub	sp, #48	; 0x30
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006010:	2300      	movs	r3, #0
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006014:	f3ef 8305 	mrs	r3, IPSR
 8006018:	61bb      	str	r3, [r7, #24]
  return(result);
 800601a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800601c:	2b00      	cmp	r3, #0
 800601e:	f040 8088 	bne.w	8006132 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006022:	f3ef 8310 	mrs	r3, PRIMASK
 8006026:	617b      	str	r3, [r7, #20]
  return(result);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	f040 8081 	bne.w	8006132 <osSemaphoreNew+0x12e>
 8006030:	4b42      	ldr	r3, [pc, #264]	; (800613c <osSemaphoreNew+0x138>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d105      	bne.n	8006044 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006038:	f3ef 8311 	mrs	r3, BASEPRI
 800603c:	613b      	str	r3, [r7, #16]
  return(result);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d176      	bne.n	8006132 <osSemaphoreNew+0x12e>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d073      	beq.n	8006132 <osSemaphoreNew+0x12e>
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	429a      	cmp	r2, r3
 8006050:	d86f      	bhi.n	8006132 <osSemaphoreNew+0x12e>
    mem = -1;
 8006052:	f04f 33ff 	mov.w	r3, #4294967295
 8006056:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d015      	beq.n	800608a <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d006      	beq.n	8006074 <osSemaphoreNew+0x70>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	2b4f      	cmp	r3, #79	; 0x4f
 800606c:	d902      	bls.n	8006074 <osSemaphoreNew+0x70>
        mem = 1;
 800606e:	2301      	movs	r3, #1
 8006070:	623b      	str	r3, [r7, #32]
 8006072:	e00c      	b.n	800608e <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d108      	bne.n	800608e <osSemaphoreNew+0x8a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d104      	bne.n	800608e <osSemaphoreNew+0x8a>
          mem = 0;
 8006084:	2300      	movs	r3, #0
 8006086:	623b      	str	r3, [r7, #32]
 8006088:	e001      	b.n	800608e <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006094:	d04d      	beq.n	8006132 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d129      	bne.n	80060f0 <osSemaphoreNew+0xec>
        if (mem == 1) {
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d10b      	bne.n	80060ba <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	2303      	movs	r3, #3
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	4613      	mov	r3, r2
 80060ac:	2200      	movs	r2, #0
 80060ae:	2100      	movs	r1, #0
 80060b0:	2001      	movs	r0, #1
 80060b2:	f000 fdcb 	bl	8006c4c <xQueueGenericCreateStatic>
 80060b6:	6278      	str	r0, [r7, #36]	; 0x24
 80060b8:	e005      	b.n	80060c6 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80060ba:	2203      	movs	r2, #3
 80060bc:	2100      	movs	r1, #0
 80060be:	2001      	movs	r0, #1
 80060c0:	f000 fe36 	bl	8006d30 <xQueueGenericCreate>
 80060c4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d022      	beq.n	8006112 <osSemaphoreNew+0x10e>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d01f      	beq.n	8006112 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80060d2:	2300      	movs	r3, #0
 80060d4:	2200      	movs	r2, #0
 80060d6:	2100      	movs	r1, #0
 80060d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060da:	f000 feef 	bl	8006ebc <xQueueGenericSend>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d016      	beq.n	8006112 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 80060e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060e6:	f001 fa5b 	bl	80075a0 <vQueueDelete>
            hSemaphore = NULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
 80060ee:	e010      	b.n	8006112 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d108      	bne.n	8006108 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	461a      	mov	r2, r3
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fe76 	bl	8006df0 <xQueueCreateCountingSemaphoreStatic>
 8006104:	6278      	str	r0, [r7, #36]	; 0x24
 8006106:	e004      	b.n	8006112 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 fea5 	bl	8006e5a <xQueueCreateCountingSemaphore>
 8006110:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00c      	beq.n	8006132 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <osSemaphoreNew+0x122>
          name = attr->name;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	61fb      	str	r3, [r7, #28]
 8006124:	e001      	b.n	800612a <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8006126:	2300      	movs	r3, #0
 8006128:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800612a:	69f9      	ldr	r1, [r7, #28]
 800612c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800612e:	f001 fb81 	bl	8007834 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006134:	4618      	mov	r0, r3
 8006136:	3728      	adds	r7, #40	; 0x28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000034 	.word	0x20000034

08006140 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006140:	b580      	push	{r7, lr}
 8006142:	b08c      	sub	sp, #48	; 0x30
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800614c:	2300      	movs	r3, #0
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006150:	f3ef 8305 	mrs	r3, IPSR
 8006154:	61bb      	str	r3, [r7, #24]
  return(result);
 8006156:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006158:	2b00      	cmp	r3, #0
 800615a:	d170      	bne.n	800623e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800615c:	f3ef 8310 	mrs	r3, PRIMASK
 8006160:	617b      	str	r3, [r7, #20]
  return(result);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d16a      	bne.n	800623e <osMessageQueueNew+0xfe>
 8006168:	4b37      	ldr	r3, [pc, #220]	; (8006248 <osMessageQueueNew+0x108>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d105      	bne.n	800617c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006170:	f3ef 8311 	mrs	r3, BASEPRI
 8006174:	613b      	str	r3, [r7, #16]
  return(result);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d160      	bne.n	800623e <osMessageQueueNew+0xfe>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d05d      	beq.n	800623e <osMessageQueueNew+0xfe>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d05a      	beq.n	800623e <osMessageQueueNew+0xfe>
    mem = -1;
 8006188:	f04f 33ff 	mov.w	r3, #4294967295
 800618c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d029      	beq.n	80061e8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d012      	beq.n	80061c2 <osMessageQueueNew+0x82>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2b4f      	cmp	r3, #79	; 0x4f
 80061a2:	d90e      	bls.n	80061c2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	695a      	ldr	r2, [r3, #20]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	fb01 f303 	mul.w	r3, r1, r3
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d302      	bcc.n	80061c2 <osMessageQueueNew+0x82>
        mem = 1;
 80061bc:	2301      	movs	r3, #1
 80061be:	623b      	str	r3, [r7, #32]
 80061c0:	e014      	b.n	80061ec <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d110      	bne.n	80061ec <osMessageQueueNew+0xac>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10c      	bne.n	80061ec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d108      	bne.n	80061ec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d104      	bne.n	80061ec <osMessageQueueNew+0xac>
          mem = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	e001      	b.n	80061ec <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d10c      	bne.n	800620c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691a      	ldr	r2, [r3, #16]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6899      	ldr	r1, [r3, #8]
 80061fa:	2300      	movs	r3, #0
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	460b      	mov	r3, r1
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 fd22 	bl	8006c4c <xQueueGenericCreateStatic>
 8006208:	6278      	str	r0, [r7, #36]	; 0x24
 800620a:	e008      	b.n	800621e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d105      	bne.n	800621e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006212:	2200      	movs	r2, #0
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 fd8a 	bl	8006d30 <xQueueGenericCreate>
 800621c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00c      	beq.n	800623e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <osMessageQueueNew+0xf2>
        name = attr->name;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	e001      	b.n	8006236 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8006232:	2300      	movs	r3, #0
 8006234:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006236:	69f9      	ldr	r1, [r7, #28]
 8006238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800623a:	f001 fafb 	bl	8007834 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006240:	4618      	mov	r0, r3
 8006242:	3728      	adds	r7, #40	; 0x28
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20000034 	.word	0x20000034

0800624c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4a06      	ldr	r2, [pc, #24]	; (8006274 <vApplicationGetIdleTaskMemory+0x28>)
 800625c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	4a05      	ldr	r2, [pc, #20]	; (8006278 <vApplicationGetIdleTaskMemory+0x2c>)
 8006262:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2280      	movs	r2, #128	; 0x80
 8006268:	601a      	str	r2, [r3, #0]
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr
 8006274:	20000038 	.word	0x20000038
 8006278:	20000094 	.word	0x20000094

0800627c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4a07      	ldr	r2, [pc, #28]	; (80062a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800628c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4a06      	ldr	r2, [pc, #24]	; (80062ac <vApplicationGetTimerTaskMemory+0x30>)
 8006292:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800629a:	601a      	str	r2, [r3, #0]
}
 800629c:	bf00      	nop
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000294 	.word	0x20000294
 80062ac:	200002f0 	.word	0x200002f0

080062b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f103 0208 	add.w	r2, r3, #8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f04f 32ff 	mov.w	r2, #4294967295
 80062c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f103 0208 	add.w	r2, r3, #8
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f103 0208 	add.w	r2, r3, #8
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr

080062ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	bc80      	pop	{r7}
 8006304:	4770      	bx	lr

08006306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	601a      	str	r2, [r3, #0]
}
 8006342:	bf00      	nop
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr

0800634c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006362:	d103      	bne.n	800636c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	e00c      	b.n	8006386 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3308      	adds	r3, #8
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	e002      	b.n	800637a <vListInsert+0x2e>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	429a      	cmp	r2, r3
 8006384:	d9f6      	bls.n	8006374 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	601a      	str	r2, [r3, #0]
}
 80063b2:	bf00      	nop
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6892      	ldr	r2, [r2, #8]
 80063d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6852      	ldr	r2, [r2, #4]
 80063dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d103      	bne.n	80063f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	1e5a      	subs	r2, r3, #1
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	bc80      	pop	{r7}
 800640c:	4770      	bx	lr
	...

08006410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3b04      	subs	r3, #4
 8006420:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3b04      	subs	r3, #4
 800642e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f023 0201 	bic.w	r2, r3, #1
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3b04      	subs	r3, #4
 800643e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006440:	4a08      	ldr	r2, [pc, #32]	; (8006464 <pxPortInitialiseStack+0x54>)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3b14      	subs	r3, #20
 800644a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3b20      	subs	r3, #32
 8006456:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006458:	68fb      	ldr	r3, [r7, #12]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr
 8006464:	08006469 	.word	0x08006469

08006468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800646e:	2300      	movs	r3, #0
 8006470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <prvTaskExitError+0x4c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d009      	beq.n	8006490 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	e7fe      	b.n	800648e <prvTaskExitError+0x26>
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064a2:	bf00      	nop
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0fc      	beq.n	80064a4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr
 80064b4:	20000010 	.word	0x20000010
	...

080064c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064c0:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <pxCurrentTCBConst2>)
 80064c2:	6819      	ldr	r1, [r3, #0]
 80064c4:	6808      	ldr	r0, [r1, #0]
 80064c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064ca:	f380 8809 	msr	PSP, r0
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f04f 0000 	mov.w	r0, #0
 80064d6:	f380 8811 	msr	BASEPRI, r0
 80064da:	f04e 0e0d 	orr.w	lr, lr, #13
 80064de:	4770      	bx	lr

080064e0 <pxCurrentTCBConst2>:
 80064e0:	20001310 	.word	0x20001310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop

080064e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80064e8:	4806      	ldr	r0, [pc, #24]	; (8006504 <prvPortStartFirstTask+0x1c>)
 80064ea:	6800      	ldr	r0, [r0, #0]
 80064ec:	6800      	ldr	r0, [r0, #0]
 80064ee:	f380 8808 	msr	MSP, r0
 80064f2:	b662      	cpsie	i
 80064f4:	b661      	cpsie	f
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	df00      	svc	0
 8006500:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006502:	bf00      	nop
 8006504:	e000ed08 	.word	0xe000ed08

08006508 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800650e:	4b31      	ldr	r3, [pc, #196]	; (80065d4 <xPortStartScheduler+0xcc>)
 8006510:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	22ff      	movs	r2, #255	; 0xff
 800651e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006530:	b2da      	uxtb	r2, r3
 8006532:	4b29      	ldr	r3, [pc, #164]	; (80065d8 <xPortStartScheduler+0xd0>)
 8006534:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006536:	4b29      	ldr	r3, [pc, #164]	; (80065dc <xPortStartScheduler+0xd4>)
 8006538:	2207      	movs	r2, #7
 800653a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800653c:	e009      	b.n	8006552 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800653e:	4b27      	ldr	r3, [pc, #156]	; (80065dc <xPortStartScheduler+0xd4>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3b01      	subs	r3, #1
 8006544:	4a25      	ldr	r2, [pc, #148]	; (80065dc <xPortStartScheduler+0xd4>)
 8006546:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	b2db      	uxtb	r3, r3
 8006550:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006552:	78fb      	ldrb	r3, [r7, #3]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655a:	2b80      	cmp	r3, #128	; 0x80
 800655c:	d0ef      	beq.n	800653e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800655e:	4b1f      	ldr	r3, [pc, #124]	; (80065dc <xPortStartScheduler+0xd4>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f1c3 0307 	rsb	r3, r3, #7
 8006566:	2b04      	cmp	r3, #4
 8006568:	d009      	beq.n	800657e <xPortStartScheduler+0x76>
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	e7fe      	b.n	800657c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800657e:	4b17      	ldr	r3, [pc, #92]	; (80065dc <xPortStartScheduler+0xd4>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	4a15      	ldr	r2, [pc, #84]	; (80065dc <xPortStartScheduler+0xd4>)
 8006586:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006588:	4b14      	ldr	r3, [pc, #80]	; (80065dc <xPortStartScheduler+0xd4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006590:	4a12      	ldr	r2, [pc, #72]	; (80065dc <xPortStartScheduler+0xd4>)
 8006592:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800659c:	4a10      	ldr	r2, [pc, #64]	; (80065e0 <xPortStartScheduler+0xd8>)
 800659e:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <xPortStartScheduler+0xd8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065a8:	4a0d      	ldr	r2, [pc, #52]	; (80065e0 <xPortStartScheduler+0xd8>)
 80065aa:	4b0d      	ldr	r3, [pc, #52]	; (80065e0 <xPortStartScheduler+0xd8>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065b4:	f000 f8b0 	bl	8006718 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <xPortStartScheduler+0xdc>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065be:	f7ff ff93 	bl	80064e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065c2:	f001 fd6f 	bl	80080a4 <vTaskSwitchContext>
	prvTaskExitError();
 80065c6:	f7ff ff4f 	bl	8006468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	e000e400 	.word	0xe000e400
 80065d8:	200006f0 	.word	0x200006f0
 80065dc:	200006f4 	.word	0x200006f4
 80065e0:	e000ed20 	.word	0xe000ed20
 80065e4:	20000010 	.word	0x20000010

080065e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006600:	4b0e      	ldr	r3, [pc, #56]	; (800663c <vPortEnterCritical+0x54>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3301      	adds	r3, #1
 8006606:	4a0d      	ldr	r2, [pc, #52]	; (800663c <vPortEnterCritical+0x54>)
 8006608:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800660a:	4b0c      	ldr	r3, [pc, #48]	; (800663c <vPortEnterCritical+0x54>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d10e      	bne.n	8006630 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006612:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <vPortEnterCritical+0x58>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d009      	beq.n	8006630 <vPortEnterCritical+0x48>
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	603b      	str	r3, [r7, #0]
 800662e:	e7fe      	b.n	800662e <vPortEnterCritical+0x46>
	}
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	bc80      	pop	{r7}
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000010 	.word	0x20000010
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800664a:	4b10      	ldr	r3, [pc, #64]	; (800668c <vPortExitCritical+0x48>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d109      	bne.n	8006666 <vPortExitCritical+0x22>
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	607b      	str	r3, [r7, #4]
 8006664:	e7fe      	b.n	8006664 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006666:	4b09      	ldr	r3, [pc, #36]	; (800668c <vPortExitCritical+0x48>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3b01      	subs	r3, #1
 800666c:	4a07      	ldr	r2, [pc, #28]	; (800668c <vPortExitCritical+0x48>)
 800666e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006670:	4b06      	ldr	r3, [pc, #24]	; (800668c <vPortExitCritical+0x48>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <vPortExitCritical+0x3e>
 8006678:	2300      	movs	r3, #0
 800667a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr
 800668c:	20000010 	.word	0x20000010

08006690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006690:	f3ef 8009 	mrs	r0, PSP
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <pxCurrentTCBConst>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066a0:	6010      	str	r0, [r2, #0]
 80066a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80066a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066aa:	f380 8811 	msr	BASEPRI, r0
 80066ae:	f001 fcf9 	bl	80080a4 <vTaskSwitchContext>
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f380 8811 	msr	BASEPRI, r0
 80066ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066be:	6819      	ldr	r1, [r3, #0]
 80066c0:	6808      	ldr	r0, [r1, #0]
 80066c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066c6:	f380 8809 	msr	PSP, r0
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	4770      	bx	lr

080066d0 <pxCurrentTCBConst>:
 80066d0:	20001310 	.word	0x20001310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066f0:	f001 fc1a 	bl	8007f28 <xTaskIncrementTick>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <SysTick_Handler+0x3c>)
 80066fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	2300      	movs	r3, #0
 8006704:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800671c:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <vPortSetupTimerInterrupt+0x30>)
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006722:	4b0a      	ldr	r3, [pc, #40]	; (800674c <vPortSetupTimerInterrupt+0x34>)
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006728:	4a09      	ldr	r2, [pc, #36]	; (8006750 <vPortSetupTimerInterrupt+0x38>)
 800672a:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <vPortSetupTimerInterrupt+0x3c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	490a      	ldr	r1, [pc, #40]	; (8006758 <vPortSetupTimerInterrupt+0x40>)
 8006730:	fba1 1303 	umull	r1, r3, r1, r3
 8006734:	099b      	lsrs	r3, r3, #6
 8006736:	3b01      	subs	r3, #1
 8006738:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673a:	4b03      	ldr	r3, [pc, #12]	; (8006748 <vPortSetupTimerInterrupt+0x30>)
 800673c:	2207      	movs	r2, #7
 800673e:	601a      	str	r2, [r3, #0]
}
 8006740:	bf00      	nop
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr
 8006748:	e000e010 	.word	0xe000e010
 800674c:	e000e018 	.word	0xe000e018
 8006750:	e000e014 	.word	0xe000e014
 8006754:	20000004 	.word	0x20000004
 8006758:	10624dd3 	.word	0x10624dd3

0800675c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006762:	f3ef 8305 	mrs	r3, IPSR
 8006766:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b0f      	cmp	r3, #15
 800676c:	d913      	bls.n	8006796 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800676e:	4a15      	ldr	r2, [pc, #84]	; (80067c4 <vPortValidateInterruptPriority+0x68>)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006778:	4b13      	ldr	r3, [pc, #76]	; (80067c8 <vPortValidateInterruptPriority+0x6c>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	7afa      	ldrb	r2, [r7, #11]
 800677e:	429a      	cmp	r2, r3
 8006780:	d209      	bcs.n	8006796 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	607b      	str	r3, [r7, #4]
 8006794:	e7fe      	b.n	8006794 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006796:	4b0d      	ldr	r3, [pc, #52]	; (80067cc <vPortValidateInterruptPriority+0x70>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800679e:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <vPortValidateInterruptPriority+0x74>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d909      	bls.n	80067ba <vPortValidateInterruptPriority+0x5e>
 80067a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	e7fe      	b.n	80067b8 <vPortValidateInterruptPriority+0x5c>
	}
 80067ba:	bf00      	nop
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr
 80067c4:	e000e3f0 	.word	0xe000e3f0
 80067c8:	200006f0 	.word	0x200006f0
 80067cc:	e000ed0c 	.word	0xe000ed0c
 80067d0:	200006f4 	.word	0x200006f4

080067d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	; 0x28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067dc:	2300      	movs	r3, #0
 80067de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067e0:	f001 fad8 	bl	8007d94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067e4:	4b57      	ldr	r3, [pc, #348]	; (8006944 <pvPortMalloc+0x170>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067ec:	f000 f90c 	bl	8006a08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067f0:	4b55      	ldr	r3, [pc, #340]	; (8006948 <pvPortMalloc+0x174>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f040 808c 	bne.w	8006916 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01c      	beq.n	800683e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006804:	2208      	movs	r2, #8
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4413      	add	r3, r2
 800680a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f003 0307 	and.w	r3, r3, #7
 8006812:	2b00      	cmp	r3, #0
 8006814:	d013      	beq.n	800683e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f023 0307 	bic.w	r3, r3, #7
 800681c:	3308      	adds	r3, #8
 800681e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	2b00      	cmp	r3, #0
 8006828:	d009      	beq.n	800683e <pvPortMalloc+0x6a>
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	e7fe      	b.n	800683c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d068      	beq.n	8006916 <pvPortMalloc+0x142>
 8006844:	4b41      	ldr	r3, [pc, #260]	; (800694c <pvPortMalloc+0x178>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	429a      	cmp	r2, r3
 800684c:	d863      	bhi.n	8006916 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800684e:	4b40      	ldr	r3, [pc, #256]	; (8006950 <pvPortMalloc+0x17c>)
 8006850:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006852:	4b3f      	ldr	r3, [pc, #252]	; (8006950 <pvPortMalloc+0x17c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006858:	e004      	b.n	8006864 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	429a      	cmp	r2, r3
 800686c:	d203      	bcs.n	8006876 <pvPortMalloc+0xa2>
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f1      	bne.n	800685a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006876:	4b33      	ldr	r3, [pc, #204]	; (8006944 <pvPortMalloc+0x170>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687c:	429a      	cmp	r2, r3
 800687e:	d04a      	beq.n	8006916 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2208      	movs	r2, #8
 8006886:	4413      	add	r3, r2
 8006888:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	1ad2      	subs	r2, r2, r3
 800689a:	2308      	movs	r3, #8
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	429a      	cmp	r2, r3
 80068a0:	d91e      	bls.n	80068e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4413      	add	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <pvPortMalloc+0xf4>
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	e7fe      	b.n	80068c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	1ad2      	subs	r2, r2, r3
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068da:	69b8      	ldr	r0, [r7, #24]
 80068dc:	f000 f8f6 	bl	8006acc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068e0:	4b1a      	ldr	r3, [pc, #104]	; (800694c <pvPortMalloc+0x178>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	4a18      	ldr	r2, [pc, #96]	; (800694c <pvPortMalloc+0x178>)
 80068ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068ee:	4b17      	ldr	r3, [pc, #92]	; (800694c <pvPortMalloc+0x178>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	4b18      	ldr	r3, [pc, #96]	; (8006954 <pvPortMalloc+0x180>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d203      	bcs.n	8006902 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068fa:	4b14      	ldr	r3, [pc, #80]	; (800694c <pvPortMalloc+0x178>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a15      	ldr	r2, [pc, #84]	; (8006954 <pvPortMalloc+0x180>)
 8006900:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	4b10      	ldr	r3, [pc, #64]	; (8006948 <pvPortMalloc+0x174>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	431a      	orrs	r2, r3
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006916:	f001 fa4b 	bl	8007db0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	f003 0307 	and.w	r3, r3, #7
 8006920:	2b00      	cmp	r3, #0
 8006922:	d009      	beq.n	8006938 <pvPortMalloc+0x164>
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	e7fe      	b.n	8006936 <pvPortMalloc+0x162>
	return pvReturn;
 8006938:	69fb      	ldr	r3, [r7, #28]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3728      	adds	r7, #40	; 0x28
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20001300 	.word	0x20001300
 8006948:	2000130c 	.word	0x2000130c
 800694c:	20001304 	.word	0x20001304
 8006950:	200012f8 	.word	0x200012f8
 8006954:	20001308 	.word	0x20001308

08006958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d046      	beq.n	80069f8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800696a:	2308      	movs	r3, #8
 800696c:	425b      	negs	r3, r3
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4413      	add	r3, r2
 8006972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	4b20      	ldr	r3, [pc, #128]	; (8006a00 <vPortFree+0xa8>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4013      	ands	r3, r2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <vPortFree+0x42>
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e7fe      	b.n	8006998 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <vPortFree+0x5e>
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	60bb      	str	r3, [r7, #8]
 80069b4:	e7fe      	b.n	80069b4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	4b11      	ldr	r3, [pc, #68]	; (8006a00 <vPortFree+0xa8>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4013      	ands	r3, r2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d019      	beq.n	80069f8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d115      	bne.n	80069f8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <vPortFree+0xa8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	43db      	mvns	r3, r3
 80069d6:	401a      	ands	r2, r3
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069dc:	f001 f9da 	bl	8007d94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	4b07      	ldr	r3, [pc, #28]	; (8006a04 <vPortFree+0xac>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4413      	add	r3, r2
 80069ea:	4a06      	ldr	r2, [pc, #24]	; (8006a04 <vPortFree+0xac>)
 80069ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069ee:	6938      	ldr	r0, [r7, #16]
 80069f0:	f000 f86c 	bl	8006acc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80069f4:	f001 f9dc 	bl	8007db0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069f8:	bf00      	nop
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	2000130c 	.word	0x2000130c
 8006a04:	20001304 	.word	0x20001304

08006a08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006a12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a14:	4b27      	ldr	r3, [pc, #156]	; (8006ab4 <prvHeapInit+0xac>)
 8006a16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00c      	beq.n	8006a3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3307      	adds	r3, #7
 8006a26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0307 	bic.w	r3, r3, #7
 8006a2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	4a1f      	ldr	r2, [pc, #124]	; (8006ab4 <prvHeapInit+0xac>)
 8006a38:	4413      	add	r3, r2
 8006a3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a40:	4a1d      	ldr	r2, [pc, #116]	; (8006ab8 <prvHeapInit+0xb0>)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a46:	4b1c      	ldr	r3, [pc, #112]	; (8006ab8 <prvHeapInit+0xb0>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4413      	add	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a54:	2208      	movs	r2, #8
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	1a9b      	subs	r3, r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0307 	bic.w	r3, r3, #7
 8006a62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4a15      	ldr	r2, [pc, #84]	; (8006abc <prvHeapInit+0xb4>)
 8006a68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a6a:	4b14      	ldr	r3, [pc, #80]	; (8006abc <prvHeapInit+0xb4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a72:	4b12      	ldr	r3, [pc, #72]	; (8006abc <prvHeapInit+0xb4>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	1ad2      	subs	r2, r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <prvHeapInit+0xb4>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	4a0a      	ldr	r2, [pc, #40]	; (8006ac0 <prvHeapInit+0xb8>)
 8006a96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	4a09      	ldr	r2, [pc, #36]	; (8006ac4 <prvHeapInit+0xbc>)
 8006a9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aa0:	4b09      	ldr	r3, [pc, #36]	; (8006ac8 <prvHeapInit+0xc0>)
 8006aa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006aa6:	601a      	str	r2, [r3, #0]
}
 8006aa8:	bf00      	nop
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bc80      	pop	{r7}
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	200006f8 	.word	0x200006f8
 8006ab8:	200012f8 	.word	0x200012f8
 8006abc:	20001300 	.word	0x20001300
 8006ac0:	20001308 	.word	0x20001308
 8006ac4:	20001304 	.word	0x20001304
 8006ac8:	2000130c 	.word	0x2000130c

08006acc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ad4:	4b27      	ldr	r3, [pc, #156]	; (8006b74 <prvInsertBlockIntoFreeList+0xa8>)
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	e002      	b.n	8006ae0 <prvInsertBlockIntoFreeList+0x14>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d3f7      	bcc.n	8006ada <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	441a      	add	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d108      	bne.n	8006b0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	441a      	add	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	441a      	add	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d118      	bne.n	8006b54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <prvInsertBlockIntoFreeList+0xac>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d00d      	beq.n	8006b4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	441a      	add	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	e008      	b.n	8006b5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <prvInsertBlockIntoFreeList+0xac>)
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e003      	b.n	8006b5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d002      	beq.n	8006b6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b6a:	bf00      	nop
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr
 8006b74:	200012f8 	.word	0x200012f8
 8006b78:	20001300 	.word	0x20001300

08006b7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d109      	bne.n	8006ba4 <xQueueGenericReset+0x28>
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	e7fe      	b.n	8006ba2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006ba4:	f7ff fd20 	bl	80065e8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb0:	68f9      	ldr	r1, [r7, #12]
 8006bb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bb4:	fb01 f303 	mul.w	r3, r1, r3
 8006bb8:	441a      	add	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	68f9      	ldr	r1, [r7, #12]
 8006bd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bda:	fb01 f303 	mul.w	r3, r1, r3
 8006bde:	441a      	add	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	22ff      	movs	r2, #255	; 0xff
 8006be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	22ff      	movs	r2, #255	; 0xff
 8006bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d114      	bne.n	8006c24 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d01a      	beq.n	8006c38 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3310      	adds	r3, #16
 8006c06:	4618      	mov	r0, r3
 8006c08:	f001 faf6 	bl	80081f8 <xTaskRemoveFromEventList>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d012      	beq.n	8006c38 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c12:	4b0d      	ldr	r3, [pc, #52]	; (8006c48 <xQueueGenericReset+0xcc>)
 8006c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	e009      	b.n	8006c38 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3310      	adds	r3, #16
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fb41 	bl	80062b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3324      	adds	r3, #36	; 0x24
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7ff fb3c 	bl	80062b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c38:	f7ff fd04 	bl	8006644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c3c:	2301      	movs	r3, #1
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	e000ed04 	.word	0xe000ed04

08006c4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08e      	sub	sp, #56	; 0x38
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d109      	bne.n	8006c74 <xQueueGenericCreateStatic+0x28>
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c72:	e7fe      	b.n	8006c72 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <xQueueGenericCreateStatic+0x42>
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8c:	e7fe      	b.n	8006c8c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <xQueueGenericCreateStatic+0x4e>
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <xQueueGenericCreateStatic+0x52>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e000      	b.n	8006ca0 <xQueueGenericCreateStatic+0x54>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d109      	bne.n	8006cb8 <xQueueGenericCreateStatic+0x6c>
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	623b      	str	r3, [r7, #32]
 8006cb6:	e7fe      	b.n	8006cb6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d102      	bne.n	8006cc4 <xQueueGenericCreateStatic+0x78>
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <xQueueGenericCreateStatic+0x7c>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <xQueueGenericCreateStatic+0x7e>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <xQueueGenericCreateStatic+0x96>
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	61fb      	str	r3, [r7, #28]
 8006ce0:	e7fe      	b.n	8006ce0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ce2:	2350      	movs	r3, #80	; 0x50
 8006ce4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b50      	cmp	r3, #80	; 0x50
 8006cea:	d009      	beq.n	8006d00 <xQueueGenericCreateStatic+0xb4>
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	e7fe      	b.n	8006cfe <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00d      	beq.n	8006d26 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 f842 	bl	8006daa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3730      	adds	r7, #48	; 0x30
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08a      	sub	sp, #40	; 0x28
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d109      	bne.n	8006d58 <xQueueGenericCreate+0x28>
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	e7fe      	b.n	8006d56 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d102      	bne.n	8006d64 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61fb      	str	r3, [r7, #28]
 8006d62:	e004      	b.n	8006d6e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	fb02 f303 	mul.w	r3, r2, r3
 8006d6c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	3350      	adds	r3, #80	; 0x50
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fd2e 	bl	80067d4 <pvPortMalloc>
 8006d78:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00f      	beq.n	8006da0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	3350      	adds	r3, #80	; 0x50
 8006d84:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d8e:	79fa      	ldrb	r2, [r7, #7]
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	4613      	mov	r3, r2
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 f805 	bl	8006daa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006da0:	69bb      	ldr	r3, [r7, #24]
	}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
 8006db6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d103      	bne.n	8006dc6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	e002      	b.n	8006dcc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dd8:	2101      	movs	r1, #1
 8006dda:	69b8      	ldr	r0, [r7, #24]
 8006ddc:	f7ff fece 	bl	8006b7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	78fa      	ldrb	r2, [r7, #3]
 8006de4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006de8:	bf00      	nop
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08a      	sub	sp, #40	; 0x28
 8006df4:	af02      	add	r7, sp, #8
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <xQueueCreateCountingSemaphoreStatic+0x26>
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	e7fe      	b.n	8006e14 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d909      	bls.n	8006e32 <xQueueCreateCountingSemaphoreStatic+0x42>
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	e7fe      	b.n	8006e30 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006e32:	2302      	movs	r3, #2
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f7ff ff05 	bl	8006c4c <xQueueGenericCreateStatic>
 8006e42:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e50:	69fb      	ldr	r3, [r7, #28]
	}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3720      	adds	r7, #32
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b086      	sub	sp, #24
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d109      	bne.n	8006e7e <xQueueCreateCountingSemaphore+0x24>
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	613b      	str	r3, [r7, #16]
 8006e7c:	e7fe      	b.n	8006e7c <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d909      	bls.n	8006e9a <xQueueCreateCountingSemaphore+0x40>
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	e7fe      	b.n	8006e98 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff ff46 	bl	8006d30 <xQueueGenericCreate>
 8006ea4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006eb2:	697b      	ldr	r3, [r7, #20]
	}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08e      	sub	sp, #56	; 0x38
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d109      	bne.n	8006eec <xQueueGenericSend+0x30>
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eea:	e7fe      	b.n	8006eea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <xQueueGenericSend+0x3e>
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <xQueueGenericSend+0x42>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <xQueueGenericSend+0x44>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d109      	bne.n	8006f18 <xQueueGenericSend+0x5c>
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
 8006f16:	e7fe      	b.n	8006f16 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d103      	bne.n	8006f26 <xQueueGenericSend+0x6a>
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d101      	bne.n	8006f2a <xQueueGenericSend+0x6e>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <xQueueGenericSend+0x70>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d109      	bne.n	8006f44 <xQueueGenericSend+0x88>
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	623b      	str	r3, [r7, #32]
 8006f42:	e7fe      	b.n	8006f42 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f44:	f001 fb12 	bl	800856c <xTaskGetSchedulerState>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d102      	bne.n	8006f54 <xQueueGenericSend+0x98>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <xQueueGenericSend+0x9c>
 8006f54:	2301      	movs	r3, #1
 8006f56:	e000      	b.n	8006f5a <xQueueGenericSend+0x9e>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d109      	bne.n	8006f72 <xQueueGenericSend+0xb6>
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	e7fe      	b.n	8006f70 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f72:	f7ff fb39 	bl	80065e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d302      	bcc.n	8006f88 <xQueueGenericSend+0xcc>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d129      	bne.n	8006fdc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f8e:	f000 fb40 	bl	8007612 <prvCopyDataToQueue>
 8006f92:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d010      	beq.n	8006fbe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9e:	3324      	adds	r3, #36	; 0x24
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f001 f929 	bl	80081f8 <xTaskRemoveFromEventList>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d013      	beq.n	8006fd4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006fac:	4b3f      	ldr	r3, [pc, #252]	; (80070ac <xQueueGenericSend+0x1f0>)
 8006fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	e00a      	b.n	8006fd4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d007      	beq.n	8006fd4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006fc4:	4b39      	ldr	r3, [pc, #228]	; (80070ac <xQueueGenericSend+0x1f0>)
 8006fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fd4:	f7ff fb36 	bl	8006644 <vPortExitCritical>
				return pdPASS;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e063      	b.n	80070a4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d103      	bne.n	8006fea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fe2:	f7ff fb2f 	bl	8006644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e05c      	b.n	80070a4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d106      	bne.n	8006ffe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ff0:	f107 0314 	add.w	r3, r7, #20
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 f961 	bl	80082bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ffe:	f7ff fb21 	bl	8006644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007002:	f000 fec7 	bl	8007d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007006:	f7ff faef 	bl	80065e8 <vPortEnterCritical>
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007010:	b25b      	sxtb	r3, r3
 8007012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007016:	d103      	bne.n	8007020 <xQueueGenericSend+0x164>
 8007018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007026:	b25b      	sxtb	r3, r3
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d103      	bne.n	8007036 <xQueueGenericSend+0x17a>
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007036:	f7ff fb05 	bl	8006644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800703a:	1d3a      	adds	r2, r7, #4
 800703c:	f107 0314 	add.w	r3, r7, #20
 8007040:	4611      	mov	r1, r2
 8007042:	4618      	mov	r0, r3
 8007044:	f001 f950 	bl	80082e8 <xTaskCheckForTimeOut>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d124      	bne.n	8007098 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800704e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007050:	f000 fbd7 	bl	8007802 <prvIsQueueFull>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d018      	beq.n	800708c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	3310      	adds	r3, #16
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	4611      	mov	r1, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f001 f87a 	bl	800815c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800706a:	f000 fb62 	bl	8007732 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800706e:	f000 fe9f 	bl	8007db0 <xTaskResumeAll>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	f47f af7c 	bne.w	8006f72 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800707a:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <xQueueGenericSend+0x1f0>)
 800707c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	e772      	b.n	8006f72 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800708c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800708e:	f000 fb50 	bl	8007732 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007092:	f000 fe8d 	bl	8007db0 <xTaskResumeAll>
 8007096:	e76c      	b.n	8006f72 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800709a:	f000 fb4a 	bl	8007732 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800709e:	f000 fe87 	bl	8007db0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80070a2:	2300      	movs	r3, #0
		}
	}
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3738      	adds	r7, #56	; 0x38
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	e000ed04 	.word	0xe000ed04

080070b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08e      	sub	sp, #56	; 0x38
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d109      	bne.n	80070dc <xQueueGenericSendFromISR+0x2c>
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
 80070da:	e7fe      	b.n	80070da <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d103      	bne.n	80070ea <xQueueGenericSendFromISR+0x3a>
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <xQueueGenericSendFromISR+0x3e>
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <xQueueGenericSendFromISR+0x40>
 80070ee:	2300      	movs	r3, #0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d109      	bne.n	8007108 <xQueueGenericSendFromISR+0x58>
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	623b      	str	r3, [r7, #32]
 8007106:	e7fe      	b.n	8007106 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d103      	bne.n	8007116 <xQueueGenericSendFromISR+0x66>
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <xQueueGenericSendFromISR+0x6a>
 8007116:	2301      	movs	r3, #1
 8007118:	e000      	b.n	800711c <xQueueGenericSendFromISR+0x6c>
 800711a:	2300      	movs	r3, #0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <xQueueGenericSendFromISR+0x84>
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	61fb      	str	r3, [r7, #28]
 8007132:	e7fe      	b.n	8007132 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007134:	f7ff fb12 	bl	800675c <vPortValidateInterruptPriority>
	__asm volatile
 8007138:	f3ef 8211 	mrs	r2, BASEPRI
 800713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	61ba      	str	r2, [r7, #24]
 800714e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007150:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007152:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715c:	429a      	cmp	r2, r3
 800715e:	d302      	bcc.n	8007166 <xQueueGenericSendFromISR+0xb6>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2b02      	cmp	r3, #2
 8007164:	d12c      	bne.n	80071c0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800716c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	68b9      	ldr	r1, [r7, #8]
 8007174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007176:	f000 fa4c 	bl	8007612 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800717a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	d112      	bne.n	80071aa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	d016      	beq.n	80071ba <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	3324      	adds	r3, #36	; 0x24
 8007190:	4618      	mov	r0, r3
 8007192:	f001 f831 	bl	80081f8 <xTaskRemoveFromEventList>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00e      	beq.n	80071ba <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e007      	b.n	80071ba <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071ae:	3301      	adds	r3, #1
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	b25a      	sxtb	r2, r3
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80071ba:	2301      	movs	r3, #1
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80071be:	e001      	b.n	80071c4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	637b      	str	r3, [r7, #52]	; 0x34
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	613b      	str	r3, [r7, #16]
	__asm volatile
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3738      	adds	r7, #56	; 0x38
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08c      	sub	sp, #48	; 0x30
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d109      	bne.n	8007206 <xQueueReceive+0x2e>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	623b      	str	r3, [r7, #32]
 8007204:	e7fe      	b.n	8007204 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d103      	bne.n	8007214 <xQueueReceive+0x3c>
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <xQueueReceive+0x40>
 8007214:	2301      	movs	r3, #1
 8007216:	e000      	b.n	800721a <xQueueReceive+0x42>
 8007218:	2300      	movs	r3, #0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <xQueueReceive+0x5a>
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	61fb      	str	r3, [r7, #28]
 8007230:	e7fe      	b.n	8007230 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007232:	f001 f99b 	bl	800856c <xTaskGetSchedulerState>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d102      	bne.n	8007242 <xQueueReceive+0x6a>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <xQueueReceive+0x6e>
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <xQueueReceive+0x70>
 8007246:	2300      	movs	r3, #0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d109      	bne.n	8007260 <xQueueReceive+0x88>
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	e7fe      	b.n	800725e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007260:	f7ff f9c2 	bl	80065e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01f      	beq.n	80072b0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007274:	f000 fa37 	bl	80076e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	1e5a      	subs	r2, r3, #1
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00f      	beq.n	80072a8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	3310      	adds	r3, #16
 800728c:	4618      	mov	r0, r3
 800728e:	f000 ffb3 	bl	80081f8 <xTaskRemoveFromEventList>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d007      	beq.n	80072a8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007298:	4b3c      	ldr	r3, [pc, #240]	; (800738c <xQueueReceive+0x1b4>)
 800729a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072a8:	f7ff f9cc 	bl	8006644 <vPortExitCritical>
				return pdPASS;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e069      	b.n	8007384 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d103      	bne.n	80072be <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072b6:	f7ff f9c5 	bl	8006644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072ba:	2300      	movs	r3, #0
 80072bc:	e062      	b.n	8007384 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d106      	bne.n	80072d2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072c4:	f107 0310 	add.w	r3, r7, #16
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 fff7 	bl	80082bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072ce:	2301      	movs	r3, #1
 80072d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072d2:	f7ff f9b7 	bl	8006644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072d6:	f000 fd5d 	bl	8007d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072da:	f7ff f985 	bl	80065e8 <vPortEnterCritical>
 80072de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072e4:	b25b      	sxtb	r3, r3
 80072e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ea:	d103      	bne.n	80072f4 <xQueueReceive+0x11c>
 80072ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072fa:	b25b      	sxtb	r3, r3
 80072fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007300:	d103      	bne.n	800730a <xQueueReceive+0x132>
 8007302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800730a:	f7ff f99b 	bl	8006644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800730e:	1d3a      	adds	r2, r7, #4
 8007310:	f107 0310 	add.w	r3, r7, #16
 8007314:	4611      	mov	r1, r2
 8007316:	4618      	mov	r0, r3
 8007318:	f000 ffe6 	bl	80082e8 <xTaskCheckForTimeOut>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d123      	bne.n	800736a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007324:	f000 fa57 	bl	80077d6 <prvIsQueueEmpty>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d017      	beq.n	800735e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	3324      	adds	r3, #36	; 0x24
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	4611      	mov	r1, r2
 8007336:	4618      	mov	r0, r3
 8007338:	f000 ff10 	bl	800815c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800733c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800733e:	f000 f9f8 	bl	8007732 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007342:	f000 fd35 	bl	8007db0 <xTaskResumeAll>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d189      	bne.n	8007260 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800734c:	4b0f      	ldr	r3, [pc, #60]	; (800738c <xQueueReceive+0x1b4>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	e780      	b.n	8007260 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800735e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007360:	f000 f9e7 	bl	8007732 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007364:	f000 fd24 	bl	8007db0 <xTaskResumeAll>
 8007368:	e77a      	b.n	8007260 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800736a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800736c:	f000 f9e1 	bl	8007732 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007370:	f000 fd1e 	bl	8007db0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007376:	f000 fa2e 	bl	80077d6 <prvIsQueueEmpty>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	f43f af6f 	beq.w	8007260 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007382:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007384:	4618      	mov	r0, r3
 8007386:	3730      	adds	r7, #48	; 0x30
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	e000ed04 	.word	0xe000ed04

08007390 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08e      	sub	sp, #56	; 0x38
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800739a:	2300      	movs	r3, #0
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80073a2:	2300      	movs	r3, #0
 80073a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d109      	bne.n	80073c0 <xQueueSemaphoreTake+0x30>
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	623b      	str	r3, [r7, #32]
 80073be:	e7fe      	b.n	80073be <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <xQueueSemaphoreTake+0x4c>
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	61fb      	str	r3, [r7, #28]
 80073da:	e7fe      	b.n	80073da <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073dc:	f001 f8c6 	bl	800856c <xTaskGetSchedulerState>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d102      	bne.n	80073ec <xQueueSemaphoreTake+0x5c>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <xQueueSemaphoreTake+0x60>
 80073ec:	2301      	movs	r3, #1
 80073ee:	e000      	b.n	80073f2 <xQueueSemaphoreTake+0x62>
 80073f0:	2300      	movs	r3, #0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <xQueueSemaphoreTake+0x7a>
 80073f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	e7fe      	b.n	8007408 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800740a:	f7ff f8ed 	bl	80065e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	2b00      	cmp	r3, #0
 8007418:	d024      	beq.n	8007464 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	1e5a      	subs	r2, r3, #1
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800742a:	f001 fa1b 	bl	8008864 <pvTaskIncrementMutexHeldCount>
 800742e:	4602      	mov	r2, r0
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00f      	beq.n	800745c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	3310      	adds	r3, #16
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fed9 	bl	80081f8 <xTaskRemoveFromEventList>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d007      	beq.n	800745c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800744c:	4b53      	ldr	r3, [pc, #332]	; (800759c <xQueueSemaphoreTake+0x20c>)
 800744e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800745c:	f7ff f8f2 	bl	8006644 <vPortExitCritical>
				return pdPASS;
 8007460:	2301      	movs	r3, #1
 8007462:	e096      	b.n	8007592 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d110      	bne.n	800748c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	2b00      	cmp	r3, #0
 800746e:	d009      	beq.n	8007484 <xQueueSemaphoreTake+0xf4>
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	e7fe      	b.n	8007482 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007484:	f7ff f8de 	bl	8006644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007488:	2300      	movs	r3, #0
 800748a:	e082      	b.n	8007592 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800748c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007492:	f107 030c 	add.w	r3, r7, #12
 8007496:	4618      	mov	r0, r3
 8007498:	f000 ff10 	bl	80082bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800749c:	2301      	movs	r3, #1
 800749e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074a0:	f7ff f8d0 	bl	8006644 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074a4:	f000 fc76 	bl	8007d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074a8:	f7ff f89e 	bl	80065e8 <vPortEnterCritical>
 80074ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074b2:	b25b      	sxtb	r3, r3
 80074b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b8:	d103      	bne.n	80074c2 <xQueueSemaphoreTake+0x132>
 80074ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074c8:	b25b      	sxtb	r3, r3
 80074ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ce:	d103      	bne.n	80074d8 <xQueueSemaphoreTake+0x148>
 80074d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074d8:	f7ff f8b4 	bl	8006644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074dc:	463a      	mov	r2, r7
 80074de:	f107 030c 	add.w	r3, r7, #12
 80074e2:	4611      	mov	r1, r2
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 feff 	bl	80082e8 <xTaskCheckForTimeOut>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d132      	bne.n	8007556 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074f2:	f000 f970 	bl	80077d6 <prvIsQueueEmpty>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d026      	beq.n	800754a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d109      	bne.n	8007518 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007504:	f7ff f870 	bl	80065e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	4618      	mov	r0, r3
 800750e:	f001 f84b 	bl	80085a8 <xTaskPriorityInherit>
 8007512:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007514:	f7ff f896 	bl	8006644 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751a:	3324      	adds	r3, #36	; 0x24
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	4611      	mov	r1, r2
 8007520:	4618      	mov	r0, r3
 8007522:	f000 fe1b 	bl	800815c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007528:	f000 f903 	bl	8007732 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800752c:	f000 fc40 	bl	8007db0 <xTaskResumeAll>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	f47f af69 	bne.w	800740a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007538:	4b18      	ldr	r3, [pc, #96]	; (800759c <xQueueSemaphoreTake+0x20c>)
 800753a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	e75f      	b.n	800740a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800754a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800754c:	f000 f8f1 	bl	8007732 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007550:	f000 fc2e 	bl	8007db0 <xTaskResumeAll>
 8007554:	e759      	b.n	800740a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007558:	f000 f8eb 	bl	8007732 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800755c:	f000 fc28 	bl	8007db0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007562:	f000 f938 	bl	80077d6 <prvIsQueueEmpty>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	f43f af4e 	beq.w	800740a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00d      	beq.n	8007590 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007574:	f7ff f838 	bl	80065e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800757a:	f000 f833 	bl	80075e4 <prvGetDisinheritPriorityAfterTimeout>
 800757e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007586:	4618      	mov	r0, r3
 8007588:	f001 f8e8 	bl	800875c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800758c:	f7ff f85a 	bl	8006644 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007590:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007592:	4618      	mov	r0, r3
 8007594:	3738      	adds	r7, #56	; 0x38
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	e000ed04 	.word	0xe000ed04

080075a0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d109      	bne.n	80075c6 <vQueueDelete+0x26>
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	60bb      	str	r3, [r7, #8]
 80075c4:	e7fe      	b.n	80075c4 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f95c 	bl	8007884 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d102      	bne.n	80075dc <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f7ff f9be 	bl	8006958 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80075dc:	bf00      	nop
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d006      	beq.n	8007602 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	e001      	b.n	8007606 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007606:	68fb      	ldr	r3, [r7, #12]
	}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	bc80      	pop	{r7}
 8007610:	4770      	bx	lr

08007612 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b086      	sub	sp, #24
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800761e:	2300      	movs	r3, #0
 8007620:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10d      	bne.n	800764c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d14d      	bne.n	80076d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	4618      	mov	r0, r3
 800763e:	f001 f821 	bl	8008684 <xTaskPriorityDisinherit>
 8007642:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	605a      	str	r2, [r3, #4]
 800764a:	e043      	b.n	80076d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d119      	bne.n	8007686 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6898      	ldr	r0, [r3, #8]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	461a      	mov	r2, r3
 800765c:	68b9      	ldr	r1, [r7, #8]
 800765e:	f001 fec1 	bl	80093e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	441a      	add	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	429a      	cmp	r2, r3
 800767a:	d32b      	bcc.n	80076d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	609a      	str	r2, [r3, #8]
 8007684:	e026      	b.n	80076d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	68d8      	ldr	r0, [r3, #12]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	461a      	mov	r2, r3
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	f001 fea7 	bl	80093e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	68da      	ldr	r2, [r3, #12]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	425b      	negs	r3, r3
 80076a0:	441a      	add	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d207      	bcs.n	80076c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	425b      	negs	r3, r3
 80076bc:	441a      	add	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d105      	bne.n	80076d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80076dc:	697b      	ldr	r3, [r7, #20]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d018      	beq.n	800772a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007700:	441a      	add	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68da      	ldr	r2, [r3, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	429a      	cmp	r2, r3
 8007710:	d303      	bcc.n	800771a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68d9      	ldr	r1, [r3, #12]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	461a      	mov	r2, r3
 8007724:	6838      	ldr	r0, [r7, #0]
 8007726:	f001 fe5d 	bl	80093e4 <memcpy>
	}
}
 800772a:	bf00      	nop
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800773a:	f7fe ff55 	bl	80065e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007744:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007746:	e011      	b.n	800776c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	d012      	beq.n	8007776 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3324      	adds	r3, #36	; 0x24
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fd4f 	bl	80081f8 <xTaskRemoveFromEventList>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007760:	f000 fe22 	bl	80083a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	3b01      	subs	r3, #1
 8007768:	b2db      	uxtb	r3, r3
 800776a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800776c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007770:	2b00      	cmp	r3, #0
 8007772:	dce9      	bgt.n	8007748 <prvUnlockQueue+0x16>
 8007774:	e000      	b.n	8007778 <prvUnlockQueue+0x46>
					break;
 8007776:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	22ff      	movs	r2, #255	; 0xff
 800777c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007780:	f7fe ff60 	bl	8006644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007784:	f7fe ff30 	bl	80065e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800778e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007790:	e011      	b.n	80077b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d012      	beq.n	80077c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3310      	adds	r3, #16
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fd2a 	bl	80081f8 <xTaskRemoveFromEventList>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077aa:	f000 fdfd 	bl	80083a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	dce9      	bgt.n	8007792 <prvUnlockQueue+0x60>
 80077be:	e000      	b.n	80077c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80077c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	22ff      	movs	r2, #255	; 0xff
 80077c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80077ca:	f7fe ff3b 	bl	8006644 <vPortExitCritical>
}
 80077ce:	bf00      	nop
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077de:	f7fe ff03 	bl	80065e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d102      	bne.n	80077f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80077ea:	2301      	movs	r3, #1
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	e001      	b.n	80077f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077f4:	f7fe ff26 	bl	8006644 <vPortExitCritical>

	return xReturn;
 80077f8:	68fb      	ldr	r3, [r7, #12]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800780a:	f7fe feed 	bl	80065e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007816:	429a      	cmp	r2, r3
 8007818:	d102      	bne.n	8007820 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800781a:	2301      	movs	r3, #1
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	e001      	b.n	8007824 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007824:	f7fe ff0e 	bl	8006644 <vPortExitCritical>

	return xReturn;
 8007828:	68fb      	ldr	r3, [r7, #12]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800783e:	2300      	movs	r3, #0
 8007840:	60fb      	str	r3, [r7, #12]
 8007842:	e014      	b.n	800786e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007844:	4a0e      	ldr	r2, [pc, #56]	; (8007880 <vQueueAddToRegistry+0x4c>)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10b      	bne.n	8007868 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007850:	490b      	ldr	r1, [pc, #44]	; (8007880 <vQueueAddToRegistry+0x4c>)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800785a:	4a09      	ldr	r2, [pc, #36]	; (8007880 <vQueueAddToRegistry+0x4c>)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	4413      	add	r3, r2
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007866:	e005      	b.n	8007874 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3301      	adds	r3, #1
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b07      	cmp	r3, #7
 8007872:	d9e7      	bls.n	8007844 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007874:	bf00      	nop
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	bc80      	pop	{r7}
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	20001c30 	.word	0x20001c30

08007884 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	e016      	b.n	80078c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007892:	4a0f      	ldr	r2, [pc, #60]	; (80078d0 <vQueueUnregisterQueue+0x4c>)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	4413      	add	r3, r2
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d10b      	bne.n	80078ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80078a2:	4a0b      	ldr	r2, [pc, #44]	; (80078d0 <vQueueUnregisterQueue+0x4c>)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2100      	movs	r1, #0
 80078a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80078ac:	4a08      	ldr	r2, [pc, #32]	; (80078d0 <vQueueUnregisterQueue+0x4c>)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	4413      	add	r3, r2
 80078b4:	2200      	movs	r2, #0
 80078b6:	605a      	str	r2, [r3, #4]
				break;
 80078b8:	e005      	b.n	80078c6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3301      	adds	r3, #1
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b07      	cmp	r3, #7
 80078c4:	d9e5      	bls.n	8007892 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80078c6:	bf00      	nop
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr
 80078d0:	20001c30 	.word	0x20001c30

080078d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078e4:	f7fe fe80 	bl	80065e8 <vPortEnterCritical>
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ee:	b25b      	sxtb	r3, r3
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f4:	d103      	bne.n	80078fe <vQueueWaitForMessageRestricted+0x2a>
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007904:	b25b      	sxtb	r3, r3
 8007906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790a:	d103      	bne.n	8007914 <vQueueWaitForMessageRestricted+0x40>
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007914:	f7fe fe96 	bl	8006644 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	2b00      	cmp	r3, #0
 800791e:	d106      	bne.n	800792e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	3324      	adds	r3, #36	; 0x24
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	68b9      	ldr	r1, [r7, #8]
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fc3b 	bl	80081a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800792e:	6978      	ldr	r0, [r7, #20]
 8007930:	f7ff feff 	bl	8007732 <prvUnlockQueue>
	}
 8007934:	bf00      	nop
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08e      	sub	sp, #56	; 0x38
 8007940:	af04      	add	r7, sp, #16
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800794a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794c:	2b00      	cmp	r3, #0
 800794e:	d109      	bne.n	8007964 <xTaskCreateStatic+0x28>
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	623b      	str	r3, [r7, #32]
 8007962:	e7fe      	b.n	8007962 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	2b00      	cmp	r3, #0
 8007968:	d109      	bne.n	800797e <xTaskCreateStatic+0x42>
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	61fb      	str	r3, [r7, #28]
 800797c:	e7fe      	b.n	800797c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800797e:	235c      	movs	r3, #92	; 0x5c
 8007980:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	2b5c      	cmp	r3, #92	; 0x5c
 8007986:	d009      	beq.n	800799c <xTaskCreateStatic+0x60>
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	61bb      	str	r3, [r7, #24]
 800799a:	e7fe      	b.n	800799a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d01e      	beq.n	80079e0 <xTaskCreateStatic+0xa4>
 80079a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d01b      	beq.n	80079e0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	2202      	movs	r2, #2
 80079b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079ba:	2300      	movs	r3, #0
 80079bc:	9303      	str	r3, [sp, #12]
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	9302      	str	r3, [sp, #8]
 80079c2:	f107 0314 	add.w	r3, r7, #20
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	68b9      	ldr	r1, [r7, #8]
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f850 	bl	8007a78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079da:	f000 f8d3 	bl	8007b84 <prvAddNewTaskToReadyList>
 80079de:	e001      	b.n	80079e4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079e4:	697b      	ldr	r3, [r7, #20]
	}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3728      	adds	r7, #40	; 0x28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b08c      	sub	sp, #48	; 0x30
 80079f2:	af04      	add	r7, sp, #16
 80079f4:	60f8      	str	r0, [r7, #12]
 80079f6:	60b9      	str	r1, [r7, #8]
 80079f8:	603b      	str	r3, [r7, #0]
 80079fa:	4613      	mov	r3, r2
 80079fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079fe:	88fb      	ldrh	r3, [r7, #6]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fe fee6 	bl	80067d4 <pvPortMalloc>
 8007a08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00e      	beq.n	8007a2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007a10:	205c      	movs	r0, #92	; 0x5c
 8007a12:	f7fe fedf 	bl	80067d4 <pvPortMalloc>
 8007a16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	631a      	str	r2, [r3, #48]	; 0x30
 8007a24:	e005      	b.n	8007a32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a26:	6978      	ldr	r0, [r7, #20]
 8007a28:	f7fe ff96 	bl	8006958 <vPortFree>
 8007a2c:	e001      	b.n	8007a32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d017      	beq.n	8007a68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a40:	88fa      	ldrh	r2, [r7, #6]
 8007a42:	2300      	movs	r3, #0
 8007a44:	9303      	str	r3, [sp, #12]
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	9302      	str	r3, [sp, #8]
 8007a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68b9      	ldr	r1, [r7, #8]
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 f80e 	bl	8007a78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a5c:	69f8      	ldr	r0, [r7, #28]
 8007a5e:	f000 f891 	bl	8007b84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a62:	2301      	movs	r3, #1
 8007a64:	61bb      	str	r3, [r7, #24]
 8007a66:	e002      	b.n	8007a6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a68:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
	}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3720      	adds	r7, #32
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	461a      	mov	r2, r3
 8007a90:	21a5      	movs	r1, #165	; 0xa5
 8007a92:	f001 fcb2 	bl	80093fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	f023 0307 	bic.w	r3, r3, #7
 8007aae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <prvInitialiseNewTask+0x56>
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	e7fe      	b.n	8007acc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ace:	2300      	movs	r3, #0
 8007ad0:	61fb      	str	r3, [r7, #28]
 8007ad2:	e012      	b.n	8007afa <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	4413      	add	r3, r2
 8007ada:	7819      	ldrb	r1, [r3, #0]
 8007adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	3334      	adds	r3, #52	; 0x34
 8007ae4:	460a      	mov	r2, r1
 8007ae6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	4413      	add	r3, r2
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d006      	beq.n	8007b02 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	3301      	adds	r3, #1
 8007af8:	61fb      	str	r3, [r7, #28]
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	2b0f      	cmp	r3, #15
 8007afe:	d9e9      	bls.n	8007ad4 <prvInitialiseNewTask+0x5c>
 8007b00:	e000      	b.n	8007b04 <prvInitialiseNewTask+0x8c>
		{
			break;
 8007b02:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	2b37      	cmp	r3, #55	; 0x37
 8007b10:	d901      	bls.n	8007b16 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b12:	2337      	movs	r3, #55	; 0x37
 8007b14:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b1a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b20:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	2200      	movs	r2, #0
 8007b26:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fe fbde 	bl	80062ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	3318      	adds	r3, #24
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe fbd9 	bl	80062ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b50:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	2200      	movs	r2, #0
 8007b56:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	68f9      	ldr	r1, [r7, #12]
 8007b64:	69b8      	ldr	r0, [r7, #24]
 8007b66:	f7fe fc53 	bl	8006410 <pxPortInitialiseStack>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b7c:	bf00      	nop
 8007b7e:	3720      	adds	r7, #32
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b8c:	f7fe fd2c 	bl	80065e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b90:	4b2d      	ldr	r3, [pc, #180]	; (8007c48 <prvAddNewTaskToReadyList+0xc4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3301      	adds	r3, #1
 8007b96:	4a2c      	ldr	r2, [pc, #176]	; (8007c48 <prvAddNewTaskToReadyList+0xc4>)
 8007b98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b9a:	4b2c      	ldr	r3, [pc, #176]	; (8007c4c <prvAddNewTaskToReadyList+0xc8>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d109      	bne.n	8007bb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ba2:	4a2a      	ldr	r2, [pc, #168]	; (8007c4c <prvAddNewTaskToReadyList+0xc8>)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ba8:	4b27      	ldr	r3, [pc, #156]	; (8007c48 <prvAddNewTaskToReadyList+0xc4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d110      	bne.n	8007bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007bb0:	f000 fc1e 	bl	80083f0 <prvInitialiseTaskLists>
 8007bb4:	e00d      	b.n	8007bd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007bb6:	4b26      	ldr	r3, [pc, #152]	; (8007c50 <prvAddNewTaskToReadyList+0xcc>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d109      	bne.n	8007bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bbe:	4b23      	ldr	r3, [pc, #140]	; (8007c4c <prvAddNewTaskToReadyList+0xc8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d802      	bhi.n	8007bd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007bcc:	4a1f      	ldr	r2, [pc, #124]	; (8007c4c <prvAddNewTaskToReadyList+0xc8>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007bd2:	4b20      	ldr	r3, [pc, #128]	; (8007c54 <prvAddNewTaskToReadyList+0xd0>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	4a1e      	ldr	r2, [pc, #120]	; (8007c54 <prvAddNewTaskToReadyList+0xd0>)
 8007bda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007bdc:	4b1d      	ldr	r3, [pc, #116]	; (8007c54 <prvAddNewTaskToReadyList+0xd0>)
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be8:	4b1b      	ldr	r3, [pc, #108]	; (8007c58 <prvAddNewTaskToReadyList+0xd4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d903      	bls.n	8007bf8 <prvAddNewTaskToReadyList+0x74>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	4a18      	ldr	r2, [pc, #96]	; (8007c58 <prvAddNewTaskToReadyList+0xd4>)
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4a15      	ldr	r2, [pc, #84]	; (8007c5c <prvAddNewTaskToReadyList+0xd8>)
 8007c06:	441a      	add	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4610      	mov	r0, r2
 8007c10:	f7fe fb79 	bl	8006306 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c14:	f7fe fd16 	bl	8006644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c18:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <prvAddNewTaskToReadyList+0xcc>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00e      	beq.n	8007c3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c20:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <prvAddNewTaskToReadyList+0xc8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d207      	bcs.n	8007c3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <prvAddNewTaskToReadyList+0xdc>)
 8007c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	200017e4 	.word	0x200017e4
 8007c4c:	20001310 	.word	0x20001310
 8007c50:	200017f0 	.word	0x200017f0
 8007c54:	20001800 	.word	0x20001800
 8007c58:	200017ec 	.word	0x200017ec
 8007c5c:	20001314 	.word	0x20001314
 8007c60:	e000ed04 	.word	0xe000ed04

08007c64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d016      	beq.n	8007ca4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c76:	4b13      	ldr	r3, [pc, #76]	; (8007cc4 <vTaskDelay+0x60>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d009      	beq.n	8007c92 <vTaskDelay+0x2e>
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	60bb      	str	r3, [r7, #8]
 8007c90:	e7fe      	b.n	8007c90 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007c92:	f000 f87f 	bl	8007d94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c96:	2100      	movs	r1, #0
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 ffa9 	bl	8008bf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c9e:	f000 f887 	bl	8007db0 <xTaskResumeAll>
 8007ca2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d107      	bne.n	8007cba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007caa:	4b07      	ldr	r3, [pc, #28]	; (8007cc8 <vTaskDelay+0x64>)
 8007cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	2000180c 	.word	0x2000180c
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08a      	sub	sp, #40	; 0x28
 8007cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007cda:	463a      	mov	r2, r7
 8007cdc:	1d39      	adds	r1, r7, #4
 8007cde:	f107 0308 	add.w	r3, r7, #8
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe fab2 	bl	800624c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	9202      	str	r2, [sp, #8]
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	460a      	mov	r2, r1
 8007cfa:	4920      	ldr	r1, [pc, #128]	; (8007d7c <vTaskStartScheduler+0xb0>)
 8007cfc:	4820      	ldr	r0, [pc, #128]	; (8007d80 <vTaskStartScheduler+0xb4>)
 8007cfe:	f7ff fe1d 	bl	800793c <xTaskCreateStatic>
 8007d02:	4602      	mov	r2, r0
 8007d04:	4b1f      	ldr	r3, [pc, #124]	; (8007d84 <vTaskStartScheduler+0xb8>)
 8007d06:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d08:	4b1e      	ldr	r3, [pc, #120]	; (8007d84 <vTaskStartScheduler+0xb8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d10:	2301      	movs	r3, #1
 8007d12:	617b      	str	r3, [r7, #20]
 8007d14:	e001      	b.n	8007d1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d102      	bne.n	8007d26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d20:	f000 ffba 	bl	8008c98 <xTimerCreateTimerTask>
 8007d24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d115      	bne.n	8007d58 <vTaskStartScheduler+0x8c>
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d3e:	4b12      	ldr	r3, [pc, #72]	; (8007d88 <vTaskStartScheduler+0xbc>)
 8007d40:	f04f 32ff 	mov.w	r2, #4294967295
 8007d44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d46:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <vTaskStartScheduler+0xc0>)
 8007d48:	2201      	movs	r2, #1
 8007d4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007d4c:	4b10      	ldr	r3, [pc, #64]	; (8007d90 <vTaskStartScheduler+0xc4>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d52:	f7fe fbd9 	bl	8006508 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d56:	e00d      	b.n	8007d74 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5e:	d109      	bne.n	8007d74 <vTaskStartScheduler+0xa8>
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	e7fe      	b.n	8007d72 <vTaskStartScheduler+0xa6>
}
 8007d74:	bf00      	nop
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	080094c4 	.word	0x080094c4
 8007d80:	080083c1 	.word	0x080083c1
 8007d84:	20001808 	.word	0x20001808
 8007d88:	20001804 	.word	0x20001804
 8007d8c:	200017f0 	.word	0x200017f0
 8007d90:	200017e8 	.word	0x200017e8

08007d94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d98:	4b04      	ldr	r3, [pc, #16]	; (8007dac <vTaskSuspendAll+0x18>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	4a03      	ldr	r2, [pc, #12]	; (8007dac <vTaskSuspendAll+0x18>)
 8007da0:	6013      	str	r3, [r2, #0]
}
 8007da2:	bf00      	nop
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	2000180c 	.word	0x2000180c

08007db0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007dbe:	4b41      	ldr	r3, [pc, #260]	; (8007ec4 <xTaskResumeAll+0x114>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <xTaskResumeAll+0x2a>
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	603b      	str	r3, [r7, #0]
 8007dd8:	e7fe      	b.n	8007dd8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007dda:	f7fe fc05 	bl	80065e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007dde:	4b39      	ldr	r3, [pc, #228]	; (8007ec4 <xTaskResumeAll+0x114>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	4a37      	ldr	r2, [pc, #220]	; (8007ec4 <xTaskResumeAll+0x114>)
 8007de6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007de8:	4b36      	ldr	r3, [pc, #216]	; (8007ec4 <xTaskResumeAll+0x114>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d162      	bne.n	8007eb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007df0:	4b35      	ldr	r3, [pc, #212]	; (8007ec8 <xTaskResumeAll+0x118>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d05e      	beq.n	8007eb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007df8:	e02f      	b.n	8007e5a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007dfa:	4b34      	ldr	r3, [pc, #208]	; (8007ecc <xTaskResumeAll+0x11c>)
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3318      	adds	r3, #24
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe fad8 	bl	80063bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe fad3 	bl	80063bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1a:	4b2d      	ldr	r3, [pc, #180]	; (8007ed0 <xTaskResumeAll+0x120>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d903      	bls.n	8007e2a <xTaskResumeAll+0x7a>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e26:	4a2a      	ldr	r2, [pc, #168]	; (8007ed0 <xTaskResumeAll+0x120>)
 8007e28:	6013      	str	r3, [r2, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e2e:	4613      	mov	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4a27      	ldr	r2, [pc, #156]	; (8007ed4 <xTaskResumeAll+0x124>)
 8007e38:	441a      	add	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4610      	mov	r0, r2
 8007e42:	f7fe fa60 	bl	8006306 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4a:	4b23      	ldr	r3, [pc, #140]	; (8007ed8 <xTaskResumeAll+0x128>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d302      	bcc.n	8007e5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007e54:	4b21      	ldr	r3, [pc, #132]	; (8007edc <xTaskResumeAll+0x12c>)
 8007e56:	2201      	movs	r2, #1
 8007e58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e5a:	4b1c      	ldr	r3, [pc, #112]	; (8007ecc <xTaskResumeAll+0x11c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1cb      	bne.n	8007dfa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e68:	f000 fb5c 	bl	8008524 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e6c:	4b1c      	ldr	r3, [pc, #112]	; (8007ee0 <xTaskResumeAll+0x130>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d010      	beq.n	8007e9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e78:	f000 f856 	bl	8007f28 <xTaskIncrementTick>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007e82:	4b16      	ldr	r3, [pc, #88]	; (8007edc <xTaskResumeAll+0x12c>)
 8007e84:	2201      	movs	r2, #1
 8007e86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1f1      	bne.n	8007e78 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007e94:	4b12      	ldr	r3, [pc, #72]	; (8007ee0 <xTaskResumeAll+0x130>)
 8007e96:	2200      	movs	r2, #0
 8007e98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e9a:	4b10      	ldr	r3, [pc, #64]	; (8007edc <xTaskResumeAll+0x12c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d009      	beq.n	8007eb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ea6:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <xTaskResumeAll+0x134>)
 8007ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007eb6:	f7fe fbc5 	bl	8006644 <vPortExitCritical>

	return xAlreadyYielded;
 8007eba:	68bb      	ldr	r3, [r7, #8]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	2000180c 	.word	0x2000180c
 8007ec8:	200017e4 	.word	0x200017e4
 8007ecc:	200017a4 	.word	0x200017a4
 8007ed0:	200017ec 	.word	0x200017ec
 8007ed4:	20001314 	.word	0x20001314
 8007ed8:	20001310 	.word	0x20001310
 8007edc:	200017f8 	.word	0x200017f8
 8007ee0:	200017f4 	.word	0x200017f4
 8007ee4:	e000ed04 	.word	0xe000ed04

08007ee8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007eee:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <xTaskGetTickCount+0x18>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ef4:	687b      	ldr	r3, [r7, #4]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bc80      	pop	{r7}
 8007efe:	4770      	bx	lr
 8007f00:	200017e8 	.word	0x200017e8

08007f04 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f0a:	f7fe fc27 	bl	800675c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007f0e:	2300      	movs	r3, #0
 8007f10:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007f12:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <xTaskGetTickCountFromISR+0x20>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f18:	683b      	ldr	r3, [r7, #0]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	200017e8 	.word	0x200017e8

08007f28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f32:	4b51      	ldr	r3, [pc, #324]	; (8008078 <xTaskIncrementTick+0x150>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f040 808d 	bne.w	8008056 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f3c:	4b4f      	ldr	r3, [pc, #316]	; (800807c <xTaskIncrementTick+0x154>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3301      	adds	r3, #1
 8007f42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f44:	4a4d      	ldr	r2, [pc, #308]	; (800807c <xTaskIncrementTick+0x154>)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d11f      	bne.n	8007f90 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f50:	4b4b      	ldr	r3, [pc, #300]	; (8008080 <xTaskIncrementTick+0x158>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d009      	beq.n	8007f6e <xTaskIncrementTick+0x46>
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	e7fe      	b.n	8007f6c <xTaskIncrementTick+0x44>
 8007f6e:	4b44      	ldr	r3, [pc, #272]	; (8008080 <xTaskIncrementTick+0x158>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	4b43      	ldr	r3, [pc, #268]	; (8008084 <xTaskIncrementTick+0x15c>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a41      	ldr	r2, [pc, #260]	; (8008080 <xTaskIncrementTick+0x158>)
 8007f7a:	6013      	str	r3, [r2, #0]
 8007f7c:	4a41      	ldr	r2, [pc, #260]	; (8008084 <xTaskIncrementTick+0x15c>)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	4b41      	ldr	r3, [pc, #260]	; (8008088 <xTaskIncrementTick+0x160>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3301      	adds	r3, #1
 8007f88:	4a3f      	ldr	r2, [pc, #252]	; (8008088 <xTaskIncrementTick+0x160>)
 8007f8a:	6013      	str	r3, [r2, #0]
 8007f8c:	f000 faca 	bl	8008524 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f90:	4b3e      	ldr	r3, [pc, #248]	; (800808c <xTaskIncrementTick+0x164>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d34e      	bcc.n	8008038 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f9a:	4b39      	ldr	r3, [pc, #228]	; (8008080 <xTaskIncrementTick+0x158>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <xTaskIncrementTick+0x80>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e000      	b.n	8007faa <xTaskIncrementTick+0x82>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d004      	beq.n	8007fb8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fae:	4b37      	ldr	r3, [pc, #220]	; (800808c <xTaskIncrementTick+0x164>)
 8007fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb4:	601a      	str	r2, [r3, #0]
					break;
 8007fb6:	e03f      	b.n	8008038 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007fb8:	4b31      	ldr	r3, [pc, #196]	; (8008080 <xTaskIncrementTick+0x158>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d203      	bcs.n	8007fd8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007fd0:	4a2e      	ldr	r2, [pc, #184]	; (800808c <xTaskIncrementTick+0x164>)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6013      	str	r3, [r2, #0]
						break;
 8007fd6:	e02f      	b.n	8008038 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	3304      	adds	r3, #4
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe f9ed 	bl	80063bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d004      	beq.n	8007ff4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	3318      	adds	r3, #24
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe f9e4 	bl	80063bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff8:	4b25      	ldr	r3, [pc, #148]	; (8008090 <xTaskIncrementTick+0x168>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d903      	bls.n	8008008 <xTaskIncrementTick+0xe0>
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008004:	4a22      	ldr	r2, [pc, #136]	; (8008090 <xTaskIncrementTick+0x168>)
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4a1f      	ldr	r2, [pc, #124]	; (8008094 <xTaskIncrementTick+0x16c>)
 8008016:	441a      	add	r2, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	3304      	adds	r3, #4
 800801c:	4619      	mov	r1, r3
 800801e:	4610      	mov	r0, r2
 8008020:	f7fe f971 	bl	8006306 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008028:	4b1b      	ldr	r3, [pc, #108]	; (8008098 <xTaskIncrementTick+0x170>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	429a      	cmp	r2, r3
 8008030:	d3b3      	bcc.n	8007f9a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008032:	2301      	movs	r3, #1
 8008034:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008036:	e7b0      	b.n	8007f9a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008038:	4b17      	ldr	r3, [pc, #92]	; (8008098 <xTaskIncrementTick+0x170>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803e:	4915      	ldr	r1, [pc, #84]	; (8008094 <xTaskIncrementTick+0x16c>)
 8008040:	4613      	mov	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d907      	bls.n	8008060 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008050:	2301      	movs	r3, #1
 8008052:	617b      	str	r3, [r7, #20]
 8008054:	e004      	b.n	8008060 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008056:	4b11      	ldr	r3, [pc, #68]	; (800809c <xTaskIncrementTick+0x174>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3301      	adds	r3, #1
 800805c:	4a0f      	ldr	r2, [pc, #60]	; (800809c <xTaskIncrementTick+0x174>)
 800805e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008060:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <xTaskIncrementTick+0x178>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008068:	2301      	movs	r3, #1
 800806a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800806c:	697b      	ldr	r3, [r7, #20]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	2000180c 	.word	0x2000180c
 800807c:	200017e8 	.word	0x200017e8
 8008080:	2000179c 	.word	0x2000179c
 8008084:	200017a0 	.word	0x200017a0
 8008088:	200017fc 	.word	0x200017fc
 800808c:	20001804 	.word	0x20001804
 8008090:	200017ec 	.word	0x200017ec
 8008094:	20001314 	.word	0x20001314
 8008098:	20001310 	.word	0x20001310
 800809c:	200017f4 	.word	0x200017f4
 80080a0:	200017f8 	.word	0x200017f8

080080a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080aa:	4b27      	ldr	r3, [pc, #156]	; (8008148 <vTaskSwitchContext+0xa4>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080b2:	4b26      	ldr	r3, [pc, #152]	; (800814c <vTaskSwitchContext+0xa8>)
 80080b4:	2201      	movs	r2, #1
 80080b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80080b8:	e040      	b.n	800813c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80080ba:	4b24      	ldr	r3, [pc, #144]	; (800814c <vTaskSwitchContext+0xa8>)
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80080c0:	4b23      	ldr	r3, [pc, #140]	; (8008150 <vTaskSwitchContext+0xac>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	e00f      	b.n	80080e8 <vTaskSwitchContext+0x44>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d109      	bne.n	80080e2 <vTaskSwitchContext+0x3e>
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	607b      	str	r3, [r7, #4]
 80080e0:	e7fe      	b.n	80080e0 <vTaskSwitchContext+0x3c>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	491a      	ldr	r1, [pc, #104]	; (8008154 <vTaskSwitchContext+0xb0>)
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	440b      	add	r3, r1
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0e5      	beq.n	80080c8 <vTaskSwitchContext+0x24>
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4a13      	ldr	r2, [pc, #76]	; (8008154 <vTaskSwitchContext+0xb0>)
 8008108:	4413      	add	r3, r2
 800810a:	60bb      	str	r3, [r7, #8]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	605a      	str	r2, [r3, #4]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	3308      	adds	r3, #8
 800811e:	429a      	cmp	r2, r3
 8008120:	d104      	bne.n	800812c <vTaskSwitchContext+0x88>
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	605a      	str	r2, [r3, #4]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	4a09      	ldr	r2, [pc, #36]	; (8008158 <vTaskSwitchContext+0xb4>)
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	4a06      	ldr	r2, [pc, #24]	; (8008150 <vTaskSwitchContext+0xac>)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6013      	str	r3, [r2, #0]
}
 800813c:	bf00      	nop
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	bc80      	pop	{r7}
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	2000180c 	.word	0x2000180c
 800814c:	200017f8 	.word	0x200017f8
 8008150:	200017ec 	.word	0x200017ec
 8008154:	20001314 	.word	0x20001314
 8008158:	20001310 	.word	0x20001310

0800815c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d109      	bne.n	8008180 <vTaskPlaceOnEventList+0x24>
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	e7fe      	b.n	800817e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008180:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <vTaskPlaceOnEventList+0x44>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3318      	adds	r3, #24
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7fe f8df 	bl	800634c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800818e:	2101      	movs	r1, #1
 8008190:	6838      	ldr	r0, [r7, #0]
 8008192:	f000 fd2d 	bl	8008bf0 <prvAddCurrentTaskToDelayedList>
}
 8008196:	bf00      	nop
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	20001310 	.word	0x20001310

080081a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d109      	bne.n	80081ca <vTaskPlaceOnEventListRestricted+0x26>
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	e7fe      	b.n	80081c8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081ca:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <vTaskPlaceOnEventListRestricted+0x50>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3318      	adds	r3, #24
 80081d0:	4619      	mov	r1, r3
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f7fe f897 	bl	8006306 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80081de:	f04f 33ff 	mov.w	r3, #4294967295
 80081e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	68b8      	ldr	r0, [r7, #8]
 80081e8:	f000 fd02 	bl	8008bf0 <prvAddCurrentTaskToDelayedList>
	}
 80081ec:	bf00      	nop
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	20001310 	.word	0x20001310

080081f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <xTaskRemoveFromEventList+0x2a>
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	e7fe      	b.n	8008220 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	3318      	adds	r3, #24
 8008226:	4618      	mov	r0, r3
 8008228:	f7fe f8c8 	bl	80063bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800822c:	4b1d      	ldr	r3, [pc, #116]	; (80082a4 <xTaskRemoveFromEventList+0xac>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d11d      	bne.n	8008270 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	3304      	adds	r3, #4
 8008238:	4618      	mov	r0, r3
 800823a:	f7fe f8bf 	bl	80063bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008242:	4b19      	ldr	r3, [pc, #100]	; (80082a8 <xTaskRemoveFromEventList+0xb0>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	429a      	cmp	r2, r3
 8008248:	d903      	bls.n	8008252 <xTaskRemoveFromEventList+0x5a>
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824e:	4a16      	ldr	r2, [pc, #88]	; (80082a8 <xTaskRemoveFromEventList+0xb0>)
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4a13      	ldr	r2, [pc, #76]	; (80082ac <xTaskRemoveFromEventList+0xb4>)
 8008260:	441a      	add	r2, r3
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	3304      	adds	r3, #4
 8008266:	4619      	mov	r1, r3
 8008268:	4610      	mov	r0, r2
 800826a:	f7fe f84c 	bl	8006306 <vListInsertEnd>
 800826e:	e005      	b.n	800827c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	3318      	adds	r3, #24
 8008274:	4619      	mov	r1, r3
 8008276:	480e      	ldr	r0, [pc, #56]	; (80082b0 <xTaskRemoveFromEventList+0xb8>)
 8008278:	f7fe f845 	bl	8006306 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008280:	4b0c      	ldr	r3, [pc, #48]	; (80082b4 <xTaskRemoveFromEventList+0xbc>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	429a      	cmp	r2, r3
 8008288:	d905      	bls.n	8008296 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800828a:	2301      	movs	r3, #1
 800828c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800828e:	4b0a      	ldr	r3, [pc, #40]	; (80082b8 <xTaskRemoveFromEventList+0xc0>)
 8008290:	2201      	movs	r2, #1
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	e001      	b.n	800829a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008296:	2300      	movs	r3, #0
 8008298:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800829a:	697b      	ldr	r3, [r7, #20]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3718      	adds	r7, #24
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	2000180c 	.word	0x2000180c
 80082a8:	200017ec 	.word	0x200017ec
 80082ac:	20001314 	.word	0x20001314
 80082b0:	200017a4 	.word	0x200017a4
 80082b4:	20001310 	.word	0x20001310
 80082b8:	200017f8 	.word	0x200017f8

080082bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082c4:	4b06      	ldr	r3, [pc, #24]	; (80082e0 <vTaskInternalSetTimeOutState+0x24>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082cc:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <vTaskInternalSetTimeOutState+0x28>)
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	605a      	str	r2, [r3, #4]
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	200017fc 	.word	0x200017fc
 80082e4:	200017e8 	.word	0x200017e8

080082e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b088      	sub	sp, #32
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d109      	bne.n	800830c <xTaskCheckForTimeOut+0x24>
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	613b      	str	r3, [r7, #16]
 800830a:	e7fe      	b.n	800830a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d109      	bne.n	8008326 <xTaskCheckForTimeOut+0x3e>
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e7fe      	b.n	8008324 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008326:	f7fe f95f 	bl	80065e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800832a:	4b1d      	ldr	r3, [pc, #116]	; (80083a0 <xTaskCheckForTimeOut+0xb8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008342:	d102      	bne.n	800834a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008344:	2300      	movs	r3, #0
 8008346:	61fb      	str	r3, [r7, #28]
 8008348:	e023      	b.n	8008392 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	4b15      	ldr	r3, [pc, #84]	; (80083a4 <xTaskCheckForTimeOut+0xbc>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	429a      	cmp	r2, r3
 8008354:	d007      	beq.n	8008366 <xTaskCheckForTimeOut+0x7e>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	429a      	cmp	r2, r3
 800835e:	d802      	bhi.n	8008366 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008360:	2301      	movs	r3, #1
 8008362:	61fb      	str	r3, [r7, #28]
 8008364:	e015      	b.n	8008392 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	429a      	cmp	r2, r3
 800836e:	d90b      	bls.n	8008388 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	1ad2      	subs	r2, r2, r3
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff ff9d 	bl	80082bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008382:	2300      	movs	r3, #0
 8008384:	61fb      	str	r3, [r7, #28]
 8008386:	e004      	b.n	8008392 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800838e:	2301      	movs	r3, #1
 8008390:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008392:	f7fe f957 	bl	8006644 <vPortExitCritical>

	return xReturn;
 8008396:	69fb      	ldr	r3, [r7, #28]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3720      	adds	r7, #32
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	200017e8 	.word	0x200017e8
 80083a4:	200017fc 	.word	0x200017fc

080083a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80083ac:	4b03      	ldr	r3, [pc, #12]	; (80083bc <vTaskMissedYield+0x14>)
 80083ae:	2201      	movs	r2, #1
 80083b0:	601a      	str	r2, [r3, #0]
}
 80083b2:	bf00      	nop
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bc80      	pop	{r7}
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	200017f8 	.word	0x200017f8

080083c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083c8:	f000 f852 	bl	8008470 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083cc:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <prvIdleTask+0x28>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d9f9      	bls.n	80083c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083d4:	4b05      	ldr	r3, [pc, #20]	; (80083ec <prvIdleTask+0x2c>)
 80083d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083e4:	e7f0      	b.n	80083c8 <prvIdleTask+0x8>
 80083e6:	bf00      	nop
 80083e8:	20001314 	.word	0x20001314
 80083ec:	e000ed04 	.word	0xe000ed04

080083f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083f6:	2300      	movs	r3, #0
 80083f8:	607b      	str	r3, [r7, #4]
 80083fa:	e00c      	b.n	8008416 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4a12      	ldr	r2, [pc, #72]	; (8008450 <prvInitialiseTaskLists+0x60>)
 8008408:	4413      	add	r3, r2
 800840a:	4618      	mov	r0, r3
 800840c:	f7fd ff50 	bl	80062b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3301      	adds	r3, #1
 8008414:	607b      	str	r3, [r7, #4]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b37      	cmp	r3, #55	; 0x37
 800841a:	d9ef      	bls.n	80083fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800841c:	480d      	ldr	r0, [pc, #52]	; (8008454 <prvInitialiseTaskLists+0x64>)
 800841e:	f7fd ff47 	bl	80062b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008422:	480d      	ldr	r0, [pc, #52]	; (8008458 <prvInitialiseTaskLists+0x68>)
 8008424:	f7fd ff44 	bl	80062b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008428:	480c      	ldr	r0, [pc, #48]	; (800845c <prvInitialiseTaskLists+0x6c>)
 800842a:	f7fd ff41 	bl	80062b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800842e:	480c      	ldr	r0, [pc, #48]	; (8008460 <prvInitialiseTaskLists+0x70>)
 8008430:	f7fd ff3e 	bl	80062b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008434:	480b      	ldr	r0, [pc, #44]	; (8008464 <prvInitialiseTaskLists+0x74>)
 8008436:	f7fd ff3b 	bl	80062b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800843a:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <prvInitialiseTaskLists+0x78>)
 800843c:	4a05      	ldr	r2, [pc, #20]	; (8008454 <prvInitialiseTaskLists+0x64>)
 800843e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008440:	4b0a      	ldr	r3, [pc, #40]	; (800846c <prvInitialiseTaskLists+0x7c>)
 8008442:	4a05      	ldr	r2, [pc, #20]	; (8008458 <prvInitialiseTaskLists+0x68>)
 8008444:	601a      	str	r2, [r3, #0]
}
 8008446:	bf00      	nop
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20001314 	.word	0x20001314
 8008454:	20001774 	.word	0x20001774
 8008458:	20001788 	.word	0x20001788
 800845c:	200017a4 	.word	0x200017a4
 8008460:	200017b8 	.word	0x200017b8
 8008464:	200017d0 	.word	0x200017d0
 8008468:	2000179c 	.word	0x2000179c
 800846c:	200017a0 	.word	0x200017a0

08008470 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008476:	e019      	b.n	80084ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008478:	f7fe f8b6 	bl	80065e8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800847c:	4b0f      	ldr	r3, [pc, #60]	; (80084bc <prvCheckTasksWaitingTermination+0x4c>)
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3304      	adds	r3, #4
 8008488:	4618      	mov	r0, r3
 800848a:	f7fd ff97 	bl	80063bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800848e:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <prvCheckTasksWaitingTermination+0x50>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3b01      	subs	r3, #1
 8008494:	4a0a      	ldr	r2, [pc, #40]	; (80084c0 <prvCheckTasksWaitingTermination+0x50>)
 8008496:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008498:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <prvCheckTasksWaitingTermination+0x54>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3b01      	subs	r3, #1
 800849e:	4a09      	ldr	r2, [pc, #36]	; (80084c4 <prvCheckTasksWaitingTermination+0x54>)
 80084a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084a2:	f7fe f8cf 	bl	8006644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f80e 	bl	80084c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084ac:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <prvCheckTasksWaitingTermination+0x54>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e1      	bne.n	8008478 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	200017b8 	.word	0x200017b8
 80084c0:	200017e4 	.word	0x200017e4
 80084c4:	200017cc 	.word	0x200017cc

080084c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d108      	bne.n	80084ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe fa3a 	bl	8006958 <vPortFree>
				vPortFree( pxTCB );
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7fe fa37 	bl	8006958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084ea:	e017      	b.n	800851c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d103      	bne.n	80084fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7fe fa2e 	bl	8006958 <vPortFree>
	}
 80084fc:	e00e      	b.n	800851c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008504:	2b02      	cmp	r3, #2
 8008506:	d009      	beq.n	800851c <prvDeleteTCB+0x54>
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	e7fe      	b.n	800851a <prvDeleteTCB+0x52>
	}
 800851c:	bf00      	nop
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800852a:	4b0e      	ldr	r3, [pc, #56]	; (8008564 <prvResetNextTaskUnblockTime+0x40>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <prvResetNextTaskUnblockTime+0x14>
 8008534:	2301      	movs	r3, #1
 8008536:	e000      	b.n	800853a <prvResetNextTaskUnblockTime+0x16>
 8008538:	2300      	movs	r3, #0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d004      	beq.n	8008548 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800853e:	4b0a      	ldr	r3, [pc, #40]	; (8008568 <prvResetNextTaskUnblockTime+0x44>)
 8008540:	f04f 32ff 	mov.w	r2, #4294967295
 8008544:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008546:	e008      	b.n	800855a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008548:	4b06      	ldr	r3, [pc, #24]	; (8008564 <prvResetNextTaskUnblockTime+0x40>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	4a04      	ldr	r2, [pc, #16]	; (8008568 <prvResetNextTaskUnblockTime+0x44>)
 8008558:	6013      	str	r3, [r2, #0]
}
 800855a:	bf00      	nop
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	bc80      	pop	{r7}
 8008562:	4770      	bx	lr
 8008564:	2000179c 	.word	0x2000179c
 8008568:	20001804 	.word	0x20001804

0800856c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008572:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <xTaskGetSchedulerState+0x34>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d102      	bne.n	8008580 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800857a:	2301      	movs	r3, #1
 800857c:	607b      	str	r3, [r7, #4]
 800857e:	e008      	b.n	8008592 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008580:	4b08      	ldr	r3, [pc, #32]	; (80085a4 <xTaskGetSchedulerState+0x38>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d102      	bne.n	800858e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008588:	2302      	movs	r3, #2
 800858a:	607b      	str	r3, [r7, #4]
 800858c:	e001      	b.n	8008592 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800858e:	2300      	movs	r3, #0
 8008590:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008592:	687b      	ldr	r3, [r7, #4]
	}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	200017f0 	.word	0x200017f0
 80085a4:	2000180c 	.word	0x2000180c

080085a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d056      	beq.n	800866c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c2:	4b2d      	ldr	r3, [pc, #180]	; (8008678 <xTaskPriorityInherit+0xd0>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d246      	bcs.n	800865a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	db06      	blt.n	80085e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085d4:	4b28      	ldr	r3, [pc, #160]	; (8008678 <xTaskPriorityInherit+0xd0>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	6959      	ldr	r1, [r3, #20]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4a22      	ldr	r2, [pc, #136]	; (800867c <xTaskPriorityInherit+0xd4>)
 80085f4:	4413      	add	r3, r2
 80085f6:	4299      	cmp	r1, r3
 80085f8:	d101      	bne.n	80085fe <xTaskPriorityInherit+0x56>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e000      	b.n	8008600 <xTaskPriorityInherit+0x58>
 80085fe:	2300      	movs	r3, #0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d022      	beq.n	800864a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	3304      	adds	r3, #4
 8008608:	4618      	mov	r0, r3
 800860a:	f7fd fed7 	bl	80063bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800860e:	4b1a      	ldr	r3, [pc, #104]	; (8008678 <xTaskPriorityInherit+0xd0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861c:	4b18      	ldr	r3, [pc, #96]	; (8008680 <xTaskPriorityInherit+0xd8>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	429a      	cmp	r2, r3
 8008622:	d903      	bls.n	800862c <xTaskPriorityInherit+0x84>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	4a15      	ldr	r2, [pc, #84]	; (8008680 <xTaskPriorityInherit+0xd8>)
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4a10      	ldr	r2, [pc, #64]	; (800867c <xTaskPriorityInherit+0xd4>)
 800863a:	441a      	add	r2, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	3304      	adds	r3, #4
 8008640:	4619      	mov	r1, r3
 8008642:	4610      	mov	r0, r2
 8008644:	f7fd fe5f 	bl	8006306 <vListInsertEnd>
 8008648:	e004      	b.n	8008654 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800864a:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <xTaskPriorityInherit+0xd0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008654:	2301      	movs	r3, #1
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	e008      	b.n	800866c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800865e:	4b06      	ldr	r3, [pc, #24]	; (8008678 <xTaskPriorityInherit+0xd0>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	429a      	cmp	r2, r3
 8008666:	d201      	bcs.n	800866c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008668:	2301      	movs	r3, #1
 800866a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800866c:	68fb      	ldr	r3, [r7, #12]
	}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20001310 	.word	0x20001310
 800867c:	20001314 	.word	0x20001314
 8008680:	200017ec 	.word	0x200017ec

08008684 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008690:	2300      	movs	r3, #0
 8008692:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d054      	beq.n	8008744 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800869a:	4b2d      	ldr	r3, [pc, #180]	; (8008750 <xTaskPriorityDisinherit+0xcc>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d009      	beq.n	80086b8 <xTaskPriorityDisinherit+0x34>
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	e7fe      	b.n	80086b6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d109      	bne.n	80086d4 <xTaskPriorityDisinherit+0x50>
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	60bb      	str	r3, [r7, #8]
 80086d2:	e7fe      	b.n	80086d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d8:	1e5a      	subs	r2, r3, #1
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d02c      	beq.n	8008744 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d128      	bne.n	8008744 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	3304      	adds	r3, #4
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fd fe60 	bl	80063bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008714:	4b0f      	ldr	r3, [pc, #60]	; (8008754 <xTaskPriorityDisinherit+0xd0>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	429a      	cmp	r2, r3
 800871a:	d903      	bls.n	8008724 <xTaskPriorityDisinherit+0xa0>
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008720:	4a0c      	ldr	r2, [pc, #48]	; (8008754 <xTaskPriorityDisinherit+0xd0>)
 8008722:	6013      	str	r3, [r2, #0]
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008728:	4613      	mov	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4a09      	ldr	r2, [pc, #36]	; (8008758 <xTaskPriorityDisinherit+0xd4>)
 8008732:	441a      	add	r2, r3
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	3304      	adds	r3, #4
 8008738:	4619      	mov	r1, r3
 800873a:	4610      	mov	r0, r2
 800873c:	f7fd fde3 	bl	8006306 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008740:	2301      	movs	r3, #1
 8008742:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008744:	697b      	ldr	r3, [r7, #20]
	}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20001310 	.word	0x20001310
 8008754:	200017ec 	.word	0x200017ec
 8008758:	20001314 	.word	0x20001314

0800875c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800876a:	2301      	movs	r3, #1
 800876c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d06d      	beq.n	8008850 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008778:	2b00      	cmp	r3, #0
 800877a:	d109      	bne.n	8008790 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	e7fe      	b.n	800878e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	d202      	bcs.n	80087a0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	61fb      	str	r3, [r7, #28]
 800879e:	e002      	b.n	80087a6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d04f      	beq.n	8008850 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d14a      	bne.n	8008850 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80087ba:	4b27      	ldr	r3, [pc, #156]	; (8008858 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d109      	bne.n	80087d8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	60bb      	str	r3, [r7, #8]
 80087d6:	e7fe      	b.n	80087d6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	69fa      	ldr	r2, [r7, #28]
 80087e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	db04      	blt.n	80087f6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	6959      	ldr	r1, [r3, #20]
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	4613      	mov	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4a15      	ldr	r2, [pc, #84]	; (800885c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008806:	4413      	add	r3, r2
 8008808:	4299      	cmp	r1, r3
 800880a:	d101      	bne.n	8008810 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800880c:	2301      	movs	r3, #1
 800880e:	e000      	b.n	8008812 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8008810:	2300      	movs	r3, #0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d01c      	beq.n	8008850 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	3304      	adds	r3, #4
 800881a:	4618      	mov	r0, r3
 800881c:	f7fd fdce 	bl	80063bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008824:	4b0e      	ldr	r3, [pc, #56]	; (8008860 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d903      	bls.n	8008834 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008830:	4a0b      	ldr	r2, [pc, #44]	; (8008860 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008838:	4613      	mov	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4a06      	ldr	r2, [pc, #24]	; (800885c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008842:	441a      	add	r2, r3
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	3304      	adds	r3, #4
 8008848:	4619      	mov	r1, r3
 800884a:	4610      	mov	r0, r2
 800884c:	f7fd fd5b 	bl	8006306 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008850:	bf00      	nop
 8008852:	3720      	adds	r7, #32
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20001310 	.word	0x20001310
 800885c:	20001314 	.word	0x20001314
 8008860:	200017ec 	.word	0x200017ec

08008864 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008864:	b480      	push	{r7}
 8008866:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008868:	4b07      	ldr	r3, [pc, #28]	; (8008888 <pvTaskIncrementMutexHeldCount+0x24>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d004      	beq.n	800887a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008870:	4b05      	ldr	r3, [pc, #20]	; (8008888 <pvTaskIncrementMutexHeldCount+0x24>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008876:	3201      	adds	r2, #1
 8008878:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800887a:	4b03      	ldr	r3, [pc, #12]	; (8008888 <pvTaskIncrementMutexHeldCount+0x24>)
 800887c:	681b      	ldr	r3, [r3, #0]
	}
 800887e:	4618      	mov	r0, r3
 8008880:	46bd      	mov	sp, r7
 8008882:	bc80      	pop	{r7}
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	20001310 	.word	0x20001310

0800888c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8008896:	f7fd fea7 	bl	80065e8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800889a:	4b1e      	ldr	r3, [pc, #120]	; (8008914 <ulTaskNotifyTake+0x88>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d113      	bne.n	80088cc <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80088a4:	4b1b      	ldr	r3, [pc, #108]	; (8008914 <ulTaskNotifyTake+0x88>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00b      	beq.n	80088cc <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088b4:	2101      	movs	r1, #1
 80088b6:	6838      	ldr	r0, [r7, #0]
 80088b8:	f000 f99a 	bl	8008bf0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80088bc:	4b16      	ldr	r3, [pc, #88]	; (8008918 <ulTaskNotifyTake+0x8c>)
 80088be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80088cc:	f7fd feba 	bl	8006644 <vPortExitCritical>

		taskENTER_CRITICAL();
 80088d0:	f7fd fe8a 	bl	80065e8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80088d4:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <ulTaskNotifyTake+0x88>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088da:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00c      	beq.n	80088fc <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d004      	beq.n	80088f2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80088e8:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <ulTaskNotifyTake+0x88>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2200      	movs	r2, #0
 80088ee:	655a      	str	r2, [r3, #84]	; 0x54
 80088f0:	e004      	b.n	80088fc <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80088f2:	4b08      	ldr	r3, [pc, #32]	; (8008914 <ulTaskNotifyTake+0x88>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	3a01      	subs	r2, #1
 80088fa:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <ulTaskNotifyTake+0x88>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8008906:	f7fd fe9d 	bl	8006644 <vPortExitCritical>

		return ulReturn;
 800890a:	68fb      	ldr	r3, [r7, #12]
	}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	20001310 	.word	0x20001310
 8008918:	e000ed04 	.word	0xe000ed04

0800891c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	; 0x28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	603b      	str	r3, [r7, #0]
 8008928:	4613      	mov	r3, r2
 800892a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800892c:	2301      	movs	r3, #1
 800892e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d109      	bne.n	800894a <xTaskGenericNotify+0x2e>
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	61bb      	str	r3, [r7, #24]
 8008948:	e7fe      	b.n	8008948 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800894e:	f7fd fe4b 	bl	80065e8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008966:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	2b04      	cmp	r3, #4
 8008974:	d827      	bhi.n	80089c6 <xTaskGenericNotify+0xaa>
 8008976:	a201      	add	r2, pc, #4	; (adr r2, 800897c <xTaskGenericNotify+0x60>)
 8008978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897c:	080089c7 	.word	0x080089c7
 8008980:	08008991 	.word	0x08008991
 8008984:	0800899f 	.word	0x0800899f
 8008988:	080089ab 	.word	0x080089ab
 800898c:	080089b3 	.word	0x080089b3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	431a      	orrs	r2, r3
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800899c:	e013      	b.n	80089c6 <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80089a8:	e00d      	b.n	80089c6 <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80089aa:	6a3b      	ldr	r3, [r7, #32]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80089b0:	e009      	b.n	80089c6 <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80089b2:	7ffb      	ldrb	r3, [r7, #31]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d003      	beq.n	80089c0 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80089be:	e001      	b.n	80089c4 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 80089c0:	2300      	movs	r3, #0
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80089c4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80089c6:	7ffb      	ldrb	r3, [r7, #31]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d139      	bne.n	8008a40 <xTaskGenericNotify+0x124>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	3304      	adds	r3, #4
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fd fcf3 	bl	80063bc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089da:	4b1d      	ldr	r3, [pc, #116]	; (8008a50 <xTaskGenericNotify+0x134>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d903      	bls.n	80089ea <xTaskGenericNotify+0xce>
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	4a1a      	ldr	r2, [pc, #104]	; (8008a50 <xTaskGenericNotify+0x134>)
 80089e8:	6013      	str	r3, [r2, #0]
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ee:	4613      	mov	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4a17      	ldr	r2, [pc, #92]	; (8008a54 <xTaskGenericNotify+0x138>)
 80089f8:	441a      	add	r2, r3
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	3304      	adds	r3, #4
 80089fe:	4619      	mov	r1, r3
 8008a00:	4610      	mov	r0, r2
 8008a02:	f7fd fc80 	bl	8006306 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d009      	beq.n	8008a22 <xTaskGenericNotify+0x106>
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	e7fe      	b.n	8008a20 <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a26:	4b0c      	ldr	r3, [pc, #48]	; (8008a58 <xTaskGenericNotify+0x13c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d907      	bls.n	8008a40 <xTaskGenericNotify+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008a30:	4b0a      	ldr	r3, [pc, #40]	; (8008a5c <xTaskGenericNotify+0x140>)
 8008a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a36:	601a      	str	r2, [r3, #0]
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008a40:	f7fd fe00 	bl	8006644 <vPortExitCritical>

		return xReturn;
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3728      	adds	r7, #40	; 0x28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	200017ec 	.word	0x200017ec
 8008a54:	20001314 	.word	0x20001314
 8008a58:	20001310 	.word	0x20001310
 8008a5c:	e000ed04 	.word	0xe000ed04

08008a60 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b08e      	sub	sp, #56	; 0x38
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	603b      	str	r3, [r7, #0]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008a70:	2301      	movs	r3, #1
 8008a72:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <xTaskGenericNotifyFromISR+0x2e>
 8008a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8c:	e7fe      	b.n	8008a8c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a8e:	f7fd fe65 	bl	800675c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008a96:	f3ef 8211 	mrs	r2, BASEPRI
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	623a      	str	r2, [r7, #32]
 8008aac:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008aae:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d003      	beq.n	8008ac0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	2202      	movs	r2, #2
 8008ace:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	d829      	bhi.n	8008b2c <xTaskGenericNotifyFromISR+0xcc>
 8008ad8:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <xTaskGenericNotifyFromISR+0x80>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008b2d 	.word	0x08008b2d
 8008ae4:	08008af5 	.word	0x08008af5
 8008ae8:	08008b03 	.word	0x08008b03
 8008aec:	08008b0f 	.word	0x08008b0f
 8008af0:	08008b17 	.word	0x08008b17
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008b00:	e014      	b.n	8008b2c <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b06:	1c5a      	adds	r2, r3, #1
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008b0c:	e00e      	b.n	8008b2c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008b14:	e00a      	b.n	8008b2c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008b16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d003      	beq.n	8008b26 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008b24:	e001      	b.n	8008b2a <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8008b26:	2300      	movs	r3, #0
 8008b28:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8008b2a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008b2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d146      	bne.n	8008bc2 <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d009      	beq.n	8008b50 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	61bb      	str	r3, [r7, #24]
 8008b4e:	e7fe      	b.n	8008b4e <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b50:	4b21      	ldr	r3, [pc, #132]	; (8008bd8 <xTaskGenericNotifyFromISR+0x178>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d11d      	bne.n	8008b94 <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7fd fc2d 	bl	80063bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b66:	4b1d      	ldr	r3, [pc, #116]	; (8008bdc <xTaskGenericNotifyFromISR+0x17c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d903      	bls.n	8008b76 <xTaskGenericNotifyFromISR+0x116>
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b72:	4a1a      	ldr	r2, [pc, #104]	; (8008bdc <xTaskGenericNotifyFromISR+0x17c>)
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4a17      	ldr	r2, [pc, #92]	; (8008be0 <xTaskGenericNotifyFromISR+0x180>)
 8008b84:	441a      	add	r2, r3
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	3304      	adds	r3, #4
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	f7fd fbba 	bl	8006306 <vListInsertEnd>
 8008b92:	e005      	b.n	8008ba0 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	3318      	adds	r3, #24
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4812      	ldr	r0, [pc, #72]	; (8008be4 <xTaskGenericNotifyFromISR+0x184>)
 8008b9c:	f7fd fbb3 	bl	8006306 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba4:	4b10      	ldr	r3, [pc, #64]	; (8008be8 <xTaskGenericNotifyFromISR+0x188>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d909      	bls.n	8008bc2 <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	e002      	b.n	8008bc2 <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8008bbc:	4b0b      	ldr	r3, [pc, #44]	; (8008bec <xTaskGenericNotifyFromISR+0x18c>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc4:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3738      	adds	r7, #56	; 0x38
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	2000180c 	.word	0x2000180c
 8008bdc:	200017ec 	.word	0x200017ec
 8008be0:	20001314 	.word	0x20001314
 8008be4:	200017a4 	.word	0x200017a4
 8008be8:	20001310 	.word	0x20001310
 8008bec:	200017f8 	.word	0x200017f8

08008bf0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008bfa:	4b21      	ldr	r3, [pc, #132]	; (8008c80 <prvAddCurrentTaskToDelayedList+0x90>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c00:	4b20      	ldr	r3, [pc, #128]	; (8008c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3304      	adds	r3, #4
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fd fbd8 	bl	80063bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c12:	d10a      	bne.n	8008c2a <prvAddCurrentTaskToDelayedList+0x3a>
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d007      	beq.n	8008c2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c1a:	4b1a      	ldr	r3, [pc, #104]	; (8008c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	4619      	mov	r1, r3
 8008c22:	4819      	ldr	r0, [pc, #100]	; (8008c88 <prvAddCurrentTaskToDelayedList+0x98>)
 8008c24:	f7fd fb6f 	bl	8006306 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c28:	e026      	b.n	8008c78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4413      	add	r3, r2
 8008c30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c32:	4b14      	ldr	r3, [pc, #80]	; (8008c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d209      	bcs.n	8008c56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c42:	4b12      	ldr	r3, [pc, #72]	; (8008c8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	4b0f      	ldr	r3, [pc, #60]	; (8008c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3304      	adds	r3, #4
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	4610      	mov	r0, r2
 8008c50:	f7fd fb7c 	bl	800634c <vListInsert>
}
 8008c54:	e010      	b.n	8008c78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c56:	4b0e      	ldr	r3, [pc, #56]	; (8008c90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	4b0a      	ldr	r3, [pc, #40]	; (8008c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3304      	adds	r3, #4
 8008c60:	4619      	mov	r1, r3
 8008c62:	4610      	mov	r0, r2
 8008c64:	f7fd fb72 	bl	800634c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c68:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d202      	bcs.n	8008c78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c72:	4a08      	ldr	r2, [pc, #32]	; (8008c94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	6013      	str	r3, [r2, #0]
}
 8008c78:	bf00      	nop
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	200017e8 	.word	0x200017e8
 8008c84:	20001310 	.word	0x20001310
 8008c88:	200017d0 	.word	0x200017d0
 8008c8c:	200017a0 	.word	0x200017a0
 8008c90:	2000179c 	.word	0x2000179c
 8008c94:	20001804 	.word	0x20001804

08008c98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08a      	sub	sp, #40	; 0x28
 8008c9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008ca2:	f000 fb15 	bl	80092d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ca6:	4b1c      	ldr	r3, [pc, #112]	; (8008d18 <xTimerCreateTimerTask+0x80>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d021      	beq.n	8008cf2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008cb6:	1d3a      	adds	r2, r7, #4
 8008cb8:	f107 0108 	add.w	r1, r7, #8
 8008cbc:	f107 030c 	add.w	r3, r7, #12
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fd fadb 	bl	800627c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008cc6:	6879      	ldr	r1, [r7, #4]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	9202      	str	r2, [sp, #8]
 8008cce:	9301      	str	r3, [sp, #4]
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	460a      	mov	r2, r1
 8008cd8:	4910      	ldr	r1, [pc, #64]	; (8008d1c <xTimerCreateTimerTask+0x84>)
 8008cda:	4811      	ldr	r0, [pc, #68]	; (8008d20 <xTimerCreateTimerTask+0x88>)
 8008cdc:	f7fe fe2e 	bl	800793c <xTaskCreateStatic>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	4b10      	ldr	r3, [pc, #64]	; (8008d24 <xTimerCreateTimerTask+0x8c>)
 8008ce4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008ce6:	4b0f      	ldr	r3, [pc, #60]	; (8008d24 <xTimerCreateTimerTask+0x8c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d109      	bne.n	8008d0c <xTimerCreateTimerTask+0x74>
	__asm volatile
 8008cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	613b      	str	r3, [r7, #16]
 8008d0a:	e7fe      	b.n	8008d0a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008d0c:	697b      	ldr	r3, [r7, #20]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20001840 	.word	0x20001840
 8008d1c:	080094cc 	.word	0x080094cc
 8008d20:	08008ee5 	.word	0x08008ee5
 8008d24:	20001844 	.word	0x20001844

08008d28 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af02      	add	r7, sp, #8
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008d36:	2030      	movs	r0, #48	; 0x30
 8008d38:	f7fd fd4c 	bl	80067d4 <pvPortMalloc>
 8008d3c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00d      	beq.n	8008d60 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	9301      	str	r3, [sp, #4]
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	68b9      	ldr	r1, [r7, #8]
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 f809 	bl	8008d6a <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8008d60:	697b      	ldr	r3, [r7, #20]
	}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b086      	sub	sp, #24
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	607a      	str	r2, [r7, #4]
 8008d76:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d109      	bne.n	8008d92 <prvInitialiseNewTimer+0x28>
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	617b      	str	r3, [r7, #20]
 8008d90:	e7fe      	b.n	8008d90 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d015      	beq.n	8008dc4 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008d98:	f000 fa9a 	bl	80092d0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	6a3a      	ldr	r2, [r7, #32]
 8008db8:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fd fa95 	bl	80062ee <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008dc4:	bf00      	nop
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08a      	sub	sp, #40	; 0x28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]
 8008dd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d109      	bne.n	8008df8 <xTimerGenericCommand+0x2c>
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	623b      	str	r3, [r7, #32]
 8008df6:	e7fe      	b.n	8008df6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008df8:	4b19      	ldr	r3, [pc, #100]	; (8008e60 <xTimerGenericCommand+0x94>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d02a      	beq.n	8008e56 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2b05      	cmp	r3, #5
 8008e10:	dc18      	bgt.n	8008e44 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e12:	f7ff fbab 	bl	800856c <xTaskGetSchedulerState>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d109      	bne.n	8008e30 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e1c:	4b10      	ldr	r3, [pc, #64]	; (8008e60 <xTimerGenericCommand+0x94>)
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	f107 0110 	add.w	r1, r7, #16
 8008e24:	2300      	movs	r3, #0
 8008e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e28:	f7fe f848 	bl	8006ebc <xQueueGenericSend>
 8008e2c:	6278      	str	r0, [r7, #36]	; 0x24
 8008e2e:	e012      	b.n	8008e56 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e30:	4b0b      	ldr	r3, [pc, #44]	; (8008e60 <xTimerGenericCommand+0x94>)
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	f107 0110 	add.w	r1, r7, #16
 8008e38:	2300      	movs	r3, #0
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f7fe f83e 	bl	8006ebc <xQueueGenericSend>
 8008e40:	6278      	str	r0, [r7, #36]	; 0x24
 8008e42:	e008      	b.n	8008e56 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e44:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <xTimerGenericCommand+0x94>)
 8008e46:	6818      	ldr	r0, [r3, #0]
 8008e48:	f107 0110 	add.w	r1, r7, #16
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	f7fe f92e 	bl	80070b0 <xQueueGenericSendFromISR>
 8008e54:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3728      	adds	r7, #40	; 0x28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20001840 	.word	0x20001840

08008e64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af02      	add	r7, sp, #8
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ee0 <prvProcessExpiredTimer+0x7c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fd fa9d 	bl	80063bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d121      	bne.n	8008ece <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	699a      	ldr	r2, [r3, #24]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	18d1      	adds	r1, r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	6978      	ldr	r0, [r7, #20]
 8008e98:	f000 f8c8 	bl	800902c <prvInsertTimerInActiveList>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d015      	beq.n	8008ece <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	2100      	movs	r1, #0
 8008eac:	6978      	ldr	r0, [r7, #20]
 8008eae:	f7ff ff8d 	bl	8008dcc <xTimerGenericCommand>
 8008eb2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d109      	bne.n	8008ece <prvProcessExpiredTimer+0x6a>
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e7fe      	b.n	8008ecc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	6978      	ldr	r0, [r7, #20]
 8008ed4:	4798      	blx	r3
}
 8008ed6:	bf00      	nop
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	20001838 	.word	0x20001838

08008ee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008eec:	f107 0308 	add.w	r3, r7, #8
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 f857 	bl	8008fa4 <prvGetNextExpireTime>
 8008ef6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	4619      	mov	r1, r3
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 f803 	bl	8008f08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f02:	f000 f8d5 	bl	80090b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f06:	e7f1      	b.n	8008eec <prvTimerTask+0x8>

08008f08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f12:	f7fe ff3f 	bl	8007d94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f16:	f107 0308 	add.w	r3, r7, #8
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 f866 	bl	8008fec <prvSampleTimeNow>
 8008f20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d130      	bne.n	8008f8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10a      	bne.n	8008f44 <prvProcessTimerOrBlockTask+0x3c>
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d806      	bhi.n	8008f44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f36:	f7fe ff3b 	bl	8007db0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f3a:	68f9      	ldr	r1, [r7, #12]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff ff91 	bl	8008e64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f42:	e024      	b.n	8008f8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d008      	beq.n	8008f5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f4a:	4b13      	ldr	r3, [pc, #76]	; (8008f98 <prvProcessTimerOrBlockTask+0x90>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	bf0c      	ite	eq
 8008f54:	2301      	moveq	r3, #1
 8008f56:	2300      	movne	r3, #0
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f5c:	4b0f      	ldr	r3, [pc, #60]	; (8008f9c <prvProcessTimerOrBlockTask+0x94>)
 8008f5e:	6818      	ldr	r0, [r3, #0]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	f7fe fcb3 	bl	80078d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f6e:	f7fe ff1f 	bl	8007db0 <xTaskResumeAll>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10a      	bne.n	8008f8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008f78:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <prvProcessTimerOrBlockTask+0x98>)
 8008f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	f3bf 8f6f 	isb	sy
}
 8008f88:	e001      	b.n	8008f8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008f8a:	f7fe ff11 	bl	8007db0 <xTaskResumeAll>
}
 8008f8e:	bf00      	nop
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	2000183c 	.word	0x2000183c
 8008f9c:	20001840 	.word	0x20001840
 8008fa0:	e000ed04 	.word	0xe000ed04

08008fa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fac:	4b0e      	ldr	r3, [pc, #56]	; (8008fe8 <prvGetNextExpireTime+0x44>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	bf0c      	ite	eq
 8008fb6:	2301      	moveq	r3, #1
 8008fb8:	2300      	movne	r3, #0
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d105      	bne.n	8008fd6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fca:	4b07      	ldr	r3, [pc, #28]	; (8008fe8 <prvGetNextExpireTime+0x44>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	e001      	b.n	8008fda <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008fda:	68fb      	ldr	r3, [r7, #12]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bc80      	pop	{r7}
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	20001838 	.word	0x20001838

08008fec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ff4:	f7fe ff78 	bl	8007ee8 <xTaskGetTickCount>
 8008ff8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <prvSampleTimeNow+0x3c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	429a      	cmp	r2, r3
 8009002:	d205      	bcs.n	8009010 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009004:	f000 f904 	bl	8009210 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	e002      	b.n	8009016 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009016:	4a04      	ldr	r2, [pc, #16]	; (8009028 <prvSampleTimeNow+0x3c>)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800901c:	68fb      	ldr	r3, [r7, #12]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20001848 	.word	0x20001848

0800902c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800903a:	2300      	movs	r3, #0
 800903c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	429a      	cmp	r2, r3
 8009050:	d812      	bhi.n	8009078 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	1ad2      	subs	r2, r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	429a      	cmp	r2, r3
 800905e:	d302      	bcc.n	8009066 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009060:	2301      	movs	r3, #1
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	e01b      	b.n	800909e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009066:	4b10      	ldr	r3, [pc, #64]	; (80090a8 <prvInsertTimerInActiveList+0x7c>)
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3304      	adds	r3, #4
 800906e:	4619      	mov	r1, r3
 8009070:	4610      	mov	r0, r2
 8009072:	f7fd f96b 	bl	800634c <vListInsert>
 8009076:	e012      	b.n	800909e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	429a      	cmp	r2, r3
 800907e:	d206      	bcs.n	800908e <prvInsertTimerInActiveList+0x62>
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	429a      	cmp	r2, r3
 8009086:	d302      	bcc.n	800908e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009088:	2301      	movs	r3, #1
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	e007      	b.n	800909e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800908e:	4b07      	ldr	r3, [pc, #28]	; (80090ac <prvInsertTimerInActiveList+0x80>)
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3304      	adds	r3, #4
 8009096:	4619      	mov	r1, r3
 8009098:	4610      	mov	r0, r2
 800909a:	f7fd f957 	bl	800634c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800909e:	697b      	ldr	r3, [r7, #20]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3718      	adds	r7, #24
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	2000183c 	.word	0x2000183c
 80090ac:	20001838 	.word	0x20001838

080090b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08e      	sub	sp, #56	; 0x38
 80090b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090b6:	e099      	b.n	80091ec <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	da17      	bge.n	80090ee <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090be:	1d3b      	adds	r3, r7, #4
 80090c0:	3304      	adds	r3, #4
 80090c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80090c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d109      	bne.n	80090de <prvProcessReceivedCommands+0x2e>
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	61fb      	str	r3, [r7, #28]
 80090dc:	e7fe      	b.n	80090dc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80090de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090e4:	6850      	ldr	r0, [r2, #4]
 80090e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090e8:	6892      	ldr	r2, [r2, #8]
 80090ea:	4611      	mov	r1, r2
 80090ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	db7b      	blt.n	80091ec <prvProcessReceivedCommands+0x13c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80090f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d004      	beq.n	800910a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009102:	3304      	adds	r3, #4
 8009104:	4618      	mov	r0, r3
 8009106:	f7fd f959 	bl	80063bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800910a:	463b      	mov	r3, r7
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff ff6d 	bl	8008fec <prvSampleTimeNow>
 8009112:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b09      	cmp	r3, #9
 8009118:	d867      	bhi.n	80091ea <prvProcessReceivedCommands+0x13a>
 800911a:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <prvProcessReceivedCommands+0x70>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	08009149 	.word	0x08009149
 8009124:	08009149 	.word	0x08009149
 8009128:	08009149 	.word	0x08009149
 800912c:	080091ed 	.word	0x080091ed
 8009130:	080091a3 	.word	0x080091a3
 8009134:	080091d9 	.word	0x080091d9
 8009138:	08009149 	.word	0x08009149
 800913c:	08009149 	.word	0x08009149
 8009140:	080091ed 	.word	0x080091ed
 8009144:	080091a3 	.word	0x080091a3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	18d1      	adds	r1, r2, r3
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009156:	f7ff ff69 	bl	800902c <prvInsertTimerInActiveList>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d045      	beq.n	80091ec <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009166:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d13d      	bne.n	80091ec <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	441a      	add	r2, r3
 8009178:	2300      	movs	r3, #0
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	2300      	movs	r3, #0
 800917e:	2100      	movs	r1, #0
 8009180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009182:	f7ff fe23 	bl	8008dcc <xTimerGenericCommand>
 8009186:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d12e      	bne.n	80091ec <prvProcessReceivedCommands+0x13c>
 800918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	61bb      	str	r3, [r7, #24]
 80091a0:	e7fe      	b.n	80091a0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d109      	bne.n	80091c4 <prvProcessReceivedCommands+0x114>
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	e7fe      	b.n	80091c2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80091c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c6:	699a      	ldr	r2, [r3, #24]
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	18d1      	adds	r1, r2, r3
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091d2:	f7ff ff2b 	bl	800902c <prvInsertTimerInActiveList>
					break;
 80091d6:	e009      	b.n	80091ec <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d104      	bne.n	80091ec <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80091e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e4:	f7fd fbb8 	bl	8006958 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80091e8:	e000      	b.n	80091ec <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
 80091ea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091ec:	4b07      	ldr	r3, [pc, #28]	; (800920c <prvProcessReceivedCommands+0x15c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	1d39      	adds	r1, r7, #4
 80091f2:	2200      	movs	r2, #0
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fd ffef 	bl	80071d8 <xQueueReceive>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f47f af5b 	bne.w	80090b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009202:	bf00      	nop
 8009204:	3730      	adds	r7, #48	; 0x30
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20001840 	.word	0x20001840

08009210 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009216:	e044      	b.n	80092a2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009218:	4b2b      	ldr	r3, [pc, #172]	; (80092c8 <prvSwitchTimerLists+0xb8>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009222:	4b29      	ldr	r3, [pc, #164]	; (80092c8 <prvSwitchTimerLists+0xb8>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	3304      	adds	r3, #4
 8009230:	4618      	mov	r0, r3
 8009232:	f7fd f8c3 	bl	80063bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	6938      	ldr	r0, [r7, #16]
 800923c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d12d      	bne.n	80092a2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	699a      	ldr	r2, [r3, #24]
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	4413      	add	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	429a      	cmp	r2, r3
 8009256:	d90e      	bls.n	8009276 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009264:	4b18      	ldr	r3, [pc, #96]	; (80092c8 <prvSwitchTimerLists+0xb8>)
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	3304      	adds	r3, #4
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f7fd f86c 	bl	800634c <vListInsert>
 8009274:	e015      	b.n	80092a2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009276:	2300      	movs	r3, #0
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	2300      	movs	r3, #0
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	2100      	movs	r1, #0
 8009280:	6938      	ldr	r0, [r7, #16]
 8009282:	f7ff fda3 	bl	8008dcc <xTimerGenericCommand>
 8009286:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d109      	bne.n	80092a2 <prvSwitchTimerLists+0x92>
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	e7fe      	b.n	80092a0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092a2:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <prvSwitchTimerLists+0xb8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1b5      	bne.n	8009218 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80092ac:	4b06      	ldr	r3, [pc, #24]	; (80092c8 <prvSwitchTimerLists+0xb8>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80092b2:	4b06      	ldr	r3, [pc, #24]	; (80092cc <prvSwitchTimerLists+0xbc>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a04      	ldr	r2, [pc, #16]	; (80092c8 <prvSwitchTimerLists+0xb8>)
 80092b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80092ba:	4a04      	ldr	r2, [pc, #16]	; (80092cc <prvSwitchTimerLists+0xbc>)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6013      	str	r3, [r2, #0]
}
 80092c0:	bf00      	nop
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20001838 	.word	0x20001838
 80092cc:	2000183c 	.word	0x2000183c

080092d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80092d6:	f7fd f987 	bl	80065e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80092da:	4b15      	ldr	r3, [pc, #84]	; (8009330 <prvCheckForValidListAndQueue+0x60>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d120      	bne.n	8009324 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80092e2:	4814      	ldr	r0, [pc, #80]	; (8009334 <prvCheckForValidListAndQueue+0x64>)
 80092e4:	f7fc ffe4 	bl	80062b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80092e8:	4813      	ldr	r0, [pc, #76]	; (8009338 <prvCheckForValidListAndQueue+0x68>)
 80092ea:	f7fc ffe1 	bl	80062b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80092ee:	4b13      	ldr	r3, [pc, #76]	; (800933c <prvCheckForValidListAndQueue+0x6c>)
 80092f0:	4a10      	ldr	r2, [pc, #64]	; (8009334 <prvCheckForValidListAndQueue+0x64>)
 80092f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80092f4:	4b12      	ldr	r3, [pc, #72]	; (8009340 <prvCheckForValidListAndQueue+0x70>)
 80092f6:	4a10      	ldr	r2, [pc, #64]	; (8009338 <prvCheckForValidListAndQueue+0x68>)
 80092f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80092fa:	2300      	movs	r3, #0
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	4b11      	ldr	r3, [pc, #68]	; (8009344 <prvCheckForValidListAndQueue+0x74>)
 8009300:	4a11      	ldr	r2, [pc, #68]	; (8009348 <prvCheckForValidListAndQueue+0x78>)
 8009302:	2110      	movs	r1, #16
 8009304:	200a      	movs	r0, #10
 8009306:	f7fd fca1 	bl	8006c4c <xQueueGenericCreateStatic>
 800930a:	4602      	mov	r2, r0
 800930c:	4b08      	ldr	r3, [pc, #32]	; (8009330 <prvCheckForValidListAndQueue+0x60>)
 800930e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009310:	4b07      	ldr	r3, [pc, #28]	; (8009330 <prvCheckForValidListAndQueue+0x60>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009318:	4b05      	ldr	r3, [pc, #20]	; (8009330 <prvCheckForValidListAndQueue+0x60>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	490b      	ldr	r1, [pc, #44]	; (800934c <prvCheckForValidListAndQueue+0x7c>)
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe fa88 	bl	8007834 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009324:	f7fd f98e 	bl	8006644 <vPortExitCritical>
}
 8009328:	bf00      	nop
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20001840 	.word	0x20001840
 8009334:	20001810 	.word	0x20001810
 8009338:	20001824 	.word	0x20001824
 800933c:	20001838 	.word	0x20001838
 8009340:	2000183c 	.word	0x2000183c
 8009344:	200018ec 	.word	0x200018ec
 8009348:	2000184c 	.word	0x2000184c
 800934c:	080094d4 	.word	0x080094d4

08009350 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009350:	480c      	ldr	r0, [pc, #48]	; (8009384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009352:	490d      	ldr	r1, [pc, #52]	; (8009388 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009354:	4a0d      	ldr	r2, [pc, #52]	; (800938c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009358:	e002      	b.n	8009360 <LoopCopyDataInit>

0800935a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800935a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800935c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800935e:	3304      	adds	r3, #4

08009360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009364:	d3f9      	bcc.n	800935a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009366:	4a0a      	ldr	r2, [pc, #40]	; (8009390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009368:	4c0a      	ldr	r4, [pc, #40]	; (8009394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800936a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800936c:	e001      	b.n	8009372 <LoopFillZerobss>

0800936e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800936e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009370:	3204      	adds	r2, #4

08009372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009374:	d3fb      	bcc.n	800936e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009376:	f7f7 fe59 	bl	800102c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800937a:	f000 f80f 	bl	800939c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800937e:	f7f6 fee7 	bl	8000150 <main>
  bx lr
 8009382:	4770      	bx	lr
  ldr r0, =_sdata
 8009384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009388:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800938c:	080095bc 	.word	0x080095bc
  ldr r2, =_sbss
 8009390:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8009394:	20001c70 	.word	0x20001c70

08009398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009398:	e7fe      	b.n	8009398 <ADC1_2_IRQHandler>
	...

0800939c <__libc_init_array>:
 800939c:	b570      	push	{r4, r5, r6, lr}
 800939e:	2500      	movs	r5, #0
 80093a0:	4e0c      	ldr	r6, [pc, #48]	; (80093d4 <__libc_init_array+0x38>)
 80093a2:	4c0d      	ldr	r4, [pc, #52]	; (80093d8 <__libc_init_array+0x3c>)
 80093a4:	1ba4      	subs	r4, r4, r6
 80093a6:	10a4      	asrs	r4, r4, #2
 80093a8:	42a5      	cmp	r5, r4
 80093aa:	d109      	bne.n	80093c0 <__libc_init_array+0x24>
 80093ac:	f000 f82e 	bl	800940c <_init>
 80093b0:	2500      	movs	r5, #0
 80093b2:	4e0a      	ldr	r6, [pc, #40]	; (80093dc <__libc_init_array+0x40>)
 80093b4:	4c0a      	ldr	r4, [pc, #40]	; (80093e0 <__libc_init_array+0x44>)
 80093b6:	1ba4      	subs	r4, r4, r6
 80093b8:	10a4      	asrs	r4, r4, #2
 80093ba:	42a5      	cmp	r5, r4
 80093bc:	d105      	bne.n	80093ca <__libc_init_array+0x2e>
 80093be:	bd70      	pop	{r4, r5, r6, pc}
 80093c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093c4:	4798      	blx	r3
 80093c6:	3501      	adds	r5, #1
 80093c8:	e7ee      	b.n	80093a8 <__libc_init_array+0xc>
 80093ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093ce:	4798      	blx	r3
 80093d0:	3501      	adds	r5, #1
 80093d2:	e7f2      	b.n	80093ba <__libc_init_array+0x1e>
 80093d4:	080095b4 	.word	0x080095b4
 80093d8:	080095b4 	.word	0x080095b4
 80093dc:	080095b4 	.word	0x080095b4
 80093e0:	080095b8 	.word	0x080095b8

080093e4 <memcpy>:
 80093e4:	b510      	push	{r4, lr}
 80093e6:	1e43      	subs	r3, r0, #1
 80093e8:	440a      	add	r2, r1
 80093ea:	4291      	cmp	r1, r2
 80093ec:	d100      	bne.n	80093f0 <memcpy+0xc>
 80093ee:	bd10      	pop	{r4, pc}
 80093f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093f8:	e7f7      	b.n	80093ea <memcpy+0x6>

080093fa <memset>:
 80093fa:	4603      	mov	r3, r0
 80093fc:	4402      	add	r2, r0
 80093fe:	4293      	cmp	r3, r2
 8009400:	d100      	bne.n	8009404 <memset+0xa>
 8009402:	4770      	bx	lr
 8009404:	f803 1b01 	strb.w	r1, [r3], #1
 8009408:	e7f9      	b.n	80093fe <memset+0x4>
	...

0800940c <_init>:
 800940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940e:	bf00      	nop
 8009410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009412:	bc08      	pop	{r3}
 8009414:	469e      	mov	lr, r3
 8009416:	4770      	bx	lr

08009418 <_fini>:
 8009418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941a:	bf00      	nop
 800941c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941e:	bc08      	pop	{r3}
 8009420:	469e      	mov	lr, r3
 8009422:	4770      	bx	lr
